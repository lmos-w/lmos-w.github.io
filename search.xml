<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>为何重写equals方法就得重写hashCode方法[转]</title>
    <url>/2020/03/23/%E4%B8%BA%E4%BD%95%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E5%B0%B1%E5%BE%97%E9%87%8D%E5%86%99hashCode%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="为何重写equals方法就得重写hashCode方法"><a href="#为何重写equals方法就得重写hashCode方法" class="headerlink" title="为何重写equals方法就得重写hashCode方法"></a>为何重写equals方法就得重写hashCode方法</h3><a id="more"></a>
<p>我们知道，Java 设计的顶级父类 Object 类中，有两个方法很特殊，它们分别是 equals 方法与 hashCode 方法。当我们在使用的时候我们总是被提醒，<strong>一旦重写了 equals 方法，就一定要重写 hashCode 方法</strong>。为什么？很多同学会想这个问题，聊明白这个也就是这篇文章的目的。</p>
<p>在正式探究原因之前，我们先进行前期的铺垫 – 弄明白这两个方法之间千丝万缕的联系，我们先来看看 Object 这个类的作者是怎么说的，打开 Object 类我们能看到如下注释。</p>
<p><img src="/2020/03/23/%E4%B8%BA%E4%BD%95%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E5%B0%B1%E5%BE%97%E9%87%8D%E5%86%99hashCode%E6%96%B9%E6%B3%95/2.jpg" alt>Object 类中 equals 方法</p>
<p>注释中的大致意思是：当我们将 equals 方法重写后有必要将 hashCode 方法也重写，这样做才能保证不违背 hashCode 方法中 “<strong>相同对象必须有相同哈希值</strong>” 的约定。</p>
<p>此处 Object 类的作者只是提醒了我们重写是必要的，重写是为了维护 hashCode 方法设计的定义，<strong>但是为什么要维护 hashCode 方法设计的定义呢</strong>？我们带着疑问继续去看 hashCode 方法的定义。</p>
<p><img src="/2020/03/23/%E4%B8%BA%E4%BD%95%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E5%B0%B1%E5%BE%97%E9%87%8D%E5%86%99hashCode%E6%96%B9%E6%B3%95/4.jpg" alt>Object 类中 hashCode 方法</p>
<p>hashCode 方法本质就是一个哈希函数，这个不是我根据字面意思瞎猜的，而是 Object 类的作者说明的。Object 类的作者在注释的最后一段的括号中写道：<strong>将对象的地址值映射为 integer 类型的哈希值。</strong>（对哈希函数定义的一篇文章：<a href="https://zhuanlan.zhihu.com/p/49435564" target="_blank" rel="noopener">通俗地理解哈希函数</a>）。牢牢把握哈希函数的定义有利于帮助我们理解接下来的内容。</p>
<p>我们看到，hashCode 方法注释中列了个列表，列表中有三条注释，当前需要理解的大致意思如下：</p>
<ol>
<li>一个对象多次调用它的 hashCode 方法，应当返回相同的 integer（哈希值）。</li>
<li>两个对象如果通过 equals 方法判定为相等，那么就应当返回相同 integer。</li>
<li>两个地址值不相等的对象调用 hashCode 方法不要求返回不相等的 integer，但是要求拥有两个不相等 integer 的对象必须是不同对象。</li>
</ol>
<p>上面列的三条完完全全属于哈希函数的定义与属性范畴。所以我们将上方的三条注释内容代入到哈希函数的定义中帮忙理解。如果还不能理解也可以看下图：</p>
<p><img src="/2020/03/23/%E4%B8%BA%E4%BD%95%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E5%B0%B1%E5%BE%97%E9%87%8D%E5%86%99hashCode%E6%96%B9%E6%B3%95/5.jpg" alt>对象与哈希值对应关系</p>
<p>我们看到，图中存在两种独立的情况：</p>
<ol>
<li>相同的对象必然导致相同的哈希值。</li>
<li>不同的哈希值必然是由不同对象导致的。</li>
</ol>
<p>也就是作者在 hashCode 方法注释上写明了的定义，实际上作者也就是在实现一个哈希函数，并且把哈希函数的定义写到注释里。</p>
<p>其实我们看到这里，就能明白一件事情了：equals 方法与 hashCode 方法<strong>根本就是配套使用的</strong>。对于任何一个对象，不论是使用继承自 Object 的 equals 方法还是重写 equals 方法。hashCode 方法实际上必须要完成的一件事情就是，<strong>为该 equals 方法认定为相同的对象返回相同的哈希值</strong>。</p>
<p>Object 类中的 equals 方法区分两个对象的做法是比较地址值，即使用 “==”。而我们如若根据业务需求改写了 equals 方法的实现，那么也应当同时改写 hashCode 方法的实现。否则 hashCode 方法依然返回的是依据 Object 类中的依据地址值得到的 integer 哈希值。</p>
<p>这么说起来可能不是很好理解，我们代入到具体的例子 –String 类中好了。</p>
<p>String 类中，equals 方法经过重写，具体实现源码如下：</p>
<p><img src="/2020/03/23/%E4%B8%BA%E4%BD%95%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E5%B0%B1%E5%BE%97%E9%87%8D%E5%86%99hashCode%E6%96%B9%E6%B3%95/6.jpg" alt>String 类 equals 方法的重写实现</p>
<p>通过源码我们能看到，String 对象在调用 equals 方法比较另一个对象时，除了认定相同地址值的两个对象相等以外，还认定对应着的每个字符都相等的两个 String 对象也相等，即使这两个 String 对象的地址值不同（即属于两个对象）。</p>
<p>此时我们能想到的是，String 类中对 equals 方法进行重写扩充了，但是如果此时我们不将 hashCode 方法也进行重写，那么 String 类调用的就是来自顶级父类 Obejct 类中的 hashCode 方法。即，对于两个字符串对象，使用他们各自的地址值映射为哈希值。也就是会出现如下情形：</p>
<p><img src="/2020/03/23/%E4%B8%BA%E4%BD%95%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E5%B0%B1%E5%BE%97%E9%87%8D%E5%86%99hashCode%E6%96%B9%E6%B3%95/7.jpg" alt> 创建两个地址值不同，字面量相同的字符串对象</p>
<p>也就是说，<strong>被 String 类中的 equals 方法认定为相等的两个对象拥有两个不同的哈希值</strong>（因为他们的地址值不同）。问题分析到这一步，原来的问题 “为什么重写 equals 方法就得重写 hashCode 方法” 已经结束了，它的答案是“<strong>因为必须保证重写后的 equals 方法认定相同的两个对象拥有相同的哈希值</strong>”。同时我们顺便得出了一个结论：“<strong>hashCode 方法的重写原则就是保证 equals 方法认定为相同的两个对象拥有相同的哈希值</strong>”。</p>
<p>看到这里，我的内心甚至没有一点波澜 – 两个字面量相同的 String 对象哈希值不同怎么啦！Object 类作者给我的叮嘱我不遵守又怎么啦！说到现在为止，上方提到的任何东西都没有对我的实际代码没有造成任何影响。实际上是这样吗？<strong>两个被认定为相同的对象拥有不同的哈希值没有造成不便或者 bug 吗</strong>？这就是我们接下来要进一步挖掘的问题：<strong>为什么要保证它们的哈希值相等呢？“hashCode 方法返回的哈希值在语言中扮演了一个什么角色？</strong>”。</p>
<p>其实，文章前半部在分析 Java 作者注释的时候我省去了一些东西没有说明，就是作者几次三番地提到了 HashMap、HashTable。所以接下来我们带着疑问接着看 HashMap 类中存放数据的 put 方法，它实际调用 putVal 方法，以下是它的片段截取：</p>
<p><img src="/2020/03/23/%E4%B8%BA%E4%BD%95%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E5%B0%B1%E5%BE%97%E9%87%8D%E5%86%99hashCode%E6%96%B9%E6%B3%95/8.jpg" alt></p>
<p>put 一个键值对的时候按照流程大致进行了如下操作：</p>
<ol>
<li>通过传入键（Key）的哈希值来查找底层数组位于该位置的元素 p，如果 p 不为 null，则相当于我们传入的 Key 在 HashMap 的底层数组中存在。也就是说我们需要使用新的键值对来覆盖旧的键值对（0 号红框处）。</li>
<li>仅仅是通过哈希值相等来证明两个对象是相同对象是行不通的，因此我们再做进一步的证明，即上图 1、2 号红框中，为了证明两个对象是同一对象，我们要求 (二者哈希值相等) 且(二者地址值相等或调用 equals 认定相等)。</li>
<li>如果底层数组中存在传入的 Key，那么使用新传入的覆盖掉查到的（3 号红框处）。</li>
</ol>
<p>注意！这一整套流程出现问题了。结合上文，假设此处我们此处我们使用了 String 类型的值来作为 Key 值，且此 String 类重写了 equals 方法而未重写 hashCode 方法。</p>
<p>那么还是那个地址值不同而字面量相同的两个 String 对象 s1 与 s2，由于未进行针对性地重写 hashCode 方法，那么 hashCode 还是通过地址值分别得到 s1 与 s2 的哈希值，他们显然是不同的。</p>
<p>0 号红色框中的 hash 是传入 Key 的哈希值，它与 HashMap 底层数组 tab 的长度进行同位与运算得到的数组位置为最终目标节点在数组中的位置。也就是说即使我们输入了两个字面量完全相同的 s1 与 s2，由于他们的地址值不同，得到的哈希值也不同，结果导致的是这个查出来的 p 节点始终为 null（0 号红色框处），也就是会执行操作 – 创建一个新的节点。</p>
<p>对应到我们 put 操作就相当于执行了 hashMap.put(“k”,”v1”)，hashMap.put(“k”:”v2”)，而不是使用 v2 替换 v1 的值，这样我们的 HashMap 就乱套了。</p>
<p>虽然此处我们仅仅是进行了十分简陋且十分片面的证明，但是问题挖到了这里依然说明了相同对象拥有不同哈希值会造成不便。几乎可以肯定地说，<strong>hashCode 方法不仅仅是与 equals 配套使用的，它甚至是与 Java 集合配套使用的</strong>。同样地，类似的代码我们也能在 HashTable 中找到，就更不用提 HashSet 一类的集合了。</p>
<p>集合本身在我们日常的编码中就必不可少，所以我们以后为了代码不出问题还是乖乖地重写 hashCode 方法吧。不过好在一般我们为了集合的效率以及安全性，都会使用不可变的 String，它已经将 hashCode 方法重写了，并且重写的是一个散列极为优秀的 hashCode 方法，此处限于篇幅不展开聊。（END）</p>
<p>写下你的评论…  </p>
<p>为啥重写 equals？</p>
<p>继承自 Object 的 equals 方法不能满足业务需求的情形，就比如我在文中说的，String 除了对比地址值之外，还将每个对应字符相等的两个 String 对象也认定为 “equals”。</p>
<p>什么样的业务需求会是这样的情况？？</p>
<p>“String 类中对 equals 方法进行重写扩充了，但是如果此时我们不将 hashCode 方法也进行重写，那么 String 类调用的就是来自顶级父类 Obejct 类中的 hashCode 方法。”</p>
<p>String 调用 Hashcode 方法的 case，你是指下文 java API 的 hash 有关的集合吧，因为它们默认调用了 Hashcode 方法？</p>
<p>这里单独拿出 String 类来说是为了下文直观地说明如果不重写会给实际代码造成什么后果，毕竟集合的使用是日常代码离不开的，并且我们大多数时候都选择 String 作 key。</p>
<p>那可以理解为 非要重写 hashcode 的根本原因 就是这些 hash 结构 是默认调用 hashcode</p>
<p>来计算 key 的？</p>
<p>原文地址 <a href="https://zhuanlan.zhihu.com/p/50206657" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/50206657</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>hashcode</tag>
        <tag>equals</tag>
      </tags>
  </entry>
  <entry>
    <title>Collection集合总结(掌握)</title>
    <url>/2020/03/15/Collection%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="Collection集合总结-掌握"><a href="#Collection集合总结-掌握" class="headerlink" title="Collection集合总结(掌握)"></a>Collection集合总结(掌握)</h3><a id="more"></a> 
<pre><code>Collection  
    |--List    有序, 可重复  
        |--ArrayList  
            底层数据结构是数组，查询快，增删慢。  
            线程不安全，效率高  
        |--Vector  
            底层数据结构是数组，查询快，增删慢。  
            线程安全，效率低  
        |--LinkedList  
            底层数据结构是链表，查询慢，增删快。  
            线程不安全，效率高  
    |--Set    无序, 唯一  
        |--HashSet  
            底层数据结构是哈希表。  
            如何保证元素唯一性的呢?  
                依赖两个方法：hashCode() 和 equals()  
            |--LinkedHashSet  
                底层数据结构是链表和哈希表  
                由链表保证元素有序  
                由哈希表保证元素唯一  
        |--TreeSet  
            底层数据结构是红黑树。  
            如何保证元素排序的呢?  
                自然排序  
                比较器排序  
            如何保证元素唯一性的呢?  
                根据比较的返回值是否是 0 来决定  </code></pre><p>针对 Collection 集合我们到底使用谁呢?(掌握)<br>    唯一吗?<br>        是：Set<br>            排序吗?<br>                是：TreeSet<br>                否：HashSet<br>        如果你知道是 Set，但是不知道是哪个 Set，就用 HashSet。  </p>
<pre><code>    否：List  
        要安全吗?  
            是：Vector  
            否：ArrayList 或者 LinkedList  
                查询多：ArrayList  
                增删多：LinkedList  
    如果你知道是 List，但是不知道是哪个 List，就用 ArrayList。  

如果你知道是 Collection 集合，但是不知道使用谁，就用 ArrayList。  

如果你知道用集合，就用 ArrayList。  </code></pre><p>在集合中常见的数据结构 (掌握)<br>    ArrayXxx: 底层数据结构是数组，查询快，增删慢<br>    LinkedXxx: 底层数据结构是链表，查询慢，增删快<br>    HashXxx: 底层数据结构是哈希表。依赖两个方法：hashCode() 和 equals()<br>    TreeXxx: 底层数据结构是二叉树。两种方式排序：自然排序和比较器排序</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合中List,Set以及Map等集合体系详解[转]</title>
    <url>/2020/03/13/Java%E9%9B%86%E5%90%88%E4%B8%ADList,Set%E4%BB%A5%E5%8F%8AMap%E7%AD%89%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="Java集合中List-Set以及Map等集合体系详解-转"><a href="#Java集合中List-Set以及Map等集合体系详解-转" class="headerlink" title="Java集合中List,Set以及Map等集合体系详解[转]"></a>Java集合中List,Set以及Map等集合体系详解[转]</h3><a id="more"></a>
<h2 id="转载地址-Java-集合中-List-Set-以及-Map-等集合体系详解-史上最全"><a href="#转载地址-Java-集合中-List-Set-以及-Map-等集合体系详解-史上最全" class="headerlink" title="转载地址:Java 集合中 List,Set 以及 Map 等集合体系详解 (史上最全)"></a>转载地址:<a href="https://blog.csdn.net/zhangqunshuai/article/details/80660974" target="_blank" rel="noopener">Java 集合中 List,Set 以及 Map 等集合体系详解 (史上最全)</a></h2><h2 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h2><ul>
<li>List , Set, Map 都是接口，前两个继承至 Collection 接口，Map 为独立接口</li>
<li>Set 下有 HashSet，LinkedHashSet，TreeSet</li>
<li>List 下有 ArrayList，Vector，LinkedList</li>
<li>Map 下有 Hashtable，LinkedHashMap，HashMap，TreeMap</li>
<li>Collection 接口下还有个 Queue 接口，有 PriorityQueue 类</li>
</ul>
<p><img src="/2020/03/13/Java%E9%9B%86%E5%90%88%E4%B8%ADList,Set%E4%BB%A5%E5%8F%8AMap%E7%AD%89%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3/1.jpg" alt></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><ul>
<li><p>Queue 接口与 List、Set 同一级别，都是继承了 Collection 接口。<br>看图你会发现, LinkedList 既可以实现 Queue 接口, 也可以实现 List 接口. 只不过呢, LinkedList 实现了 Queue 接口。Queue 接口窄化了对 LinkedList 的方法的访问权限（即在方法中的参数类型如果是 Queue 时，就完全只能访问 Queue 接口所定义的方法 了，而不能直接访问 LinkedList 的非 Queue 的方法），以使得只有恰当的方法才可以使用。</p>
</li>
<li><p>SortedSet 是个接口，它里面的（只有 TreeSet 这一个实现可用）中的元素一定是有序的。</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><h3 id="Connection-接口"><a href="#Connection-接口" class="headerlink" title="Connection 接口:"></a>Connection 接口:</h3><p>— <strong>List 有序, 可重复</strong></p>
<ul>
<li>ArrayList<br><strong>优点:</strong> 底层数据结构是数组，查询快，增删慢。<br><strong>缺点:</strong> 线程不安全，效率高</li>
<li>Vector<br><strong>优点:</strong> 底层数据结构是数组，查询快，增删慢。<br><strong>缺点:</strong> 线程安全，效率低</li>
<li>LinkedList<br><strong>优点:</strong> 底层数据结构是链表，查询慢，增删快。<br><strong>缺点:</strong> 线程不安全，效率高</li>
</ul>
<p>—<strong>Set 无序, 唯一</strong></p>
<ul>
<li><p>HashSet<br>底层数据结构是哈希表。(无序, 唯一)<br>如何来保证元素唯一性?  </p>
<ol>
<li>依赖两个方法：hashCode() 和 equals()</li>
</ol>
</li>
<li><p>LinkedHashSet<br>底层数据结构是链表和哈希表。(FIFO 插入有序, 唯一)  </p>
<ol>
<li>由链表保证元素有序  </li>
<li>由哈希表保证元素唯一</li>
</ol>
</li>
<li><p>TreeSet<br>底层数据结构是红黑树。(唯一，有序)  </p>
<ol>
<li>如何保证元素排序的呢?<br>自然排序<br>比较器排序  </li>
<li>如何保证元素唯一性的呢?<br>根据比较的返回值是否是 0 来决定</li>
</ol>
</li>
</ul>
<p><strong>针对 Collection 集合我们到底使用谁呢?(掌握)</strong></p>
<blockquote>
<p>唯一吗?</p>
<blockquote>
<p>是：Set</p>
<blockquote>
<p>排序吗?</p>
<blockquote>
<p>是：TreeSet 或 LinkedHashSet<br>否：HashSet<br>如果你知道是 Set，但是不知道是哪个 Set，就用 HashSet。</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>否：List</p>
<blockquote>
<p>要安全吗?</p>
<blockquote>
<p>是：Vector<br>否：ArrayList 或者 LinkedList</p>
<blockquote>
<p>查询多：ArrayList<br>增删多：LinkedList<br>如果你知道是 List，但是不知道是哪个 List，就用 ArrayList。</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>如果你知道是 Collection 集合，但是不知道使用谁，就用 ArrayList。<br>如果你知道用集合，就用 ArrayList。</p>
</blockquote>
<p>说完了 Collection, 来简单说一下 Map.</p>
<h3 id="Map-接口"><a href="#Map-接口" class="headerlink" title="Map 接口:"></a>Map 接口:</h3><p>上图:<br><img src="/2020/03/13/Java%E9%9B%86%E5%90%88%E4%B8%ADList,Set%E4%BB%A5%E5%8F%8AMap%E7%AD%89%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3/2.png" alt></p>
<p>Map 接口有三个比较重要的实现类，分别是 HashMap、TreeMap 和 HashTable。</p>
<ul>
<li>TreeMap 是有序的，HashMap 和 HashTable 是无序的。</li>
<li>Hashtable 的方法是同步的，HashMap 的方法不是同步的。这是两者最主要的区别。</li>
</ul>
<p>这就意味着:</p>
<ul>
<li>Hashtable 是线程安全的，HashMap 不是线程安全的。</li>
<li>HashMap 效率较高，Hashtable 效率较低。<br>如果对同步性或与遗留代码的兼容性没有任何要求，建议使用 HashMap。 查看 Hashtable 的源代码就可以发现，除构造函数外，Hashtable 的所有 public 方法声明中都有 synchronized 关键字，而 HashMap 的源码中则没有。</li>
<li>Hashtable 不允许 null 值，HashMap 允许 null 值（key 和 value 都允许）</li>
<li>父类不同：Hashtable 的父类是 Dictionary，HashMap 的父类是 AbstractMap</li>
</ul>
<h2 id="重点问题重点分析"><a href="#重点问题重点分析" class="headerlink" title="重点问题重点分析:"></a>重点问题重点分析:</h2><h3 id="一-TreeSet-LinkedHashSet-and-HashSet-的区别"><a href="#一-TreeSet-LinkedHashSet-and-HashSet-的区别" class="headerlink" title="(一).TreeSet, LinkedHashSet and HashSet 的区别"></a>(一).TreeSet, LinkedHashSet and HashSet 的区别</h3><blockquote>
<p><strong>1. 介绍</strong></p>
</blockquote>
<blockquote>
<ul>
<li>TreeSet, LinkedHashSet and HashSet 在 java 中都是实现 Set 的数据结构</li>
</ul>
</blockquote>
<ul>
<li>TreeSet 的主要功能用于排序</li>
<li>LinkedHashSet 的主要功能用于保证 FIFO 即有序的集合 (先进先出)</li>
<li>HashSet 只是通用的存储数据的集合</li>
</ul>
<blockquote>
<p><strong>2. 相同点</strong></p>
</blockquote>
<blockquote>
<ul>
<li>Duplicates elements: 因为三者都实现 Set interface，所以三者都不包含 duplicate elements</li>
<li>Thread safety: 三者都不是线程安全的，如果要使用线程安全可以 Collections.synchronizedSet()</li>
</ul>
</blockquote>
<blockquote>
<p><strong>3. 不同点</strong></p>
</blockquote>
<blockquote>
<ul>
<li>Performance and Speed: HashSet 插入数据最快，其次 LinkHashSet，最慢的是 TreeSet 因为内部实现排序</li>
</ul>
</blockquote>
<ul>
<li>Ordering: HashSet 不保证有序，LinkHashSet 保证 FIFO 即按插入顺序排序，<strong>TreeSet 安装内部实现排序，也可以自定义排序规则</strong></li>
<li>null:HashSet 和 LinkHashSet 允许存在 null 数据，但是 TreeSet 中插入 null 数据时会报 NullPointerException</li>
</ul>
<blockquote>
<p><strong>4. 代码比较</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String args[]) &#123;</span><br><span class="line">        HashSet&lt;String&gt; hashSet = new HashSet&lt;&gt;();</span><br><span class="line">        LinkedHashSet&lt;String&gt; linkedHashSet = new LinkedHashSet&lt;&gt;();</span><br><span class="line">        TreeSet&lt;String&gt; treeSet = new TreeSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        for (String data : Arrays.asList(&quot;B&quot;, &quot;E&quot;, &quot;D&quot;, &quot;C&quot;, &quot;A&quot;)) &#123;</span><br><span class="line">            hashSet.add(data);</span><br><span class="line">            linkedHashSet.add(data);</span><br><span class="line">            treeSet.add(data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //不保证有序</span><br><span class="line">        System.out.println(&quot;Ordering in HashSet :&quot; + hashSet);</span><br><span class="line"></span><br><span class="line">        //FIFO保证安装插入顺序排序</span><br><span class="line">        System.out.println(&quot;Order of element in LinkedHashSet :&quot; + linkedHashSet);</span><br><span class="line"></span><br><span class="line">        //内部实现排序</span><br><span class="line">        System.out.println(&quot;Order of objects in TreeSet :&quot; + treeSet);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果:<br>Ordering in HashSet :[A, B, C, D, E] (无顺序)<br>Order of element in LinkedHashSet :[B, E, D, C, A] (FIFO 插入有序)<br>Order of objects in TreeSet :[A, B, C, D, E] (排序)</p>
</blockquote>
<h3 id="二-TreeSet-的两种排序方式比较"><a href="#二-TreeSet-的两种排序方式比较" class="headerlink" title="(二).TreeSet 的两种排序方式比较"></a>(二).TreeSet 的两种排序方式比较</h3><h5 id="1-排序的引入-以基本数据类型的排序为例"><a href="#1-排序的引入-以基本数据类型的排序为例" class="headerlink" title="1. 排序的引入 (以基本数据类型的排序为例)"></a>1. 排序的引入 (以基本数据类型的排序为例)</h5><p>由于 TreeSet 可以实现对元素按照某种规则进行排序，例如下面的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 创建集合对象</span><br><span class="line">        // 自然顺序进行排序</span><br><span class="line">        TreeSet&lt;Integer&gt; ts = new TreeSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        // 创建元素并添加</span><br><span class="line">        // 20,18,23,22,17,24,19,18,24</span><br><span class="line">        ts.add(20);</span><br><span class="line">        ts.add(18);</span><br><span class="line">        ts.add(23);</span><br><span class="line">        ts.add(22);</span><br><span class="line">        ts.add(17);</span><br><span class="line">        ts.add(24);</span><br><span class="line">        ts.add(19);</span><br><span class="line">        ts.add(18);</span><br><span class="line">        ts.add(24);</span><br><span class="line"></span><br><span class="line">        // 遍历</span><br><span class="line">        for (Integer i : ts) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果:<br>17<br>18<br>19<br>20<br>22<br>23<br>24</p>
</blockquote>
<h5 id="2-如果是引用数据类型呢-比如自定义对象-又该如何排序呢"><a href="#2-如果是引用数据类型呢-比如自定义对象-又该如何排序呢" class="headerlink" title="2. 如果是引用数据类型呢, 比如自定义对象, 又该如何排序呢?"></a>2. 如果是引用数据类型呢, 比如自定义对象, 又该如何排序呢?</h5><p>测试类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TreeSet&lt;Student&gt; ts=new TreeSet&lt;Student&gt;();</span><br><span class="line">        //创建元素对象</span><br><span class="line">        Student s1=new Student(&quot;zhangsan&quot;,20);</span><br><span class="line">        Student s2=new Student(&quot;lis&quot;,22);</span><br><span class="line">        Student s3=new Student(&quot;wangwu&quot;,24);</span><br><span class="line">        Student s4=new Student(&quot;chenliu&quot;,26);</span><br><span class="line">        Student s5=new Student(&quot;zhangsan&quot;,22);</span><br><span class="line">        Student s6=new Student(&quot;qianqi&quot;,24);</span><br><span class="line"></span><br><span class="line">        //将元素对象添加到集合对象中</span><br><span class="line">        ts.add(s1);</span><br><span class="line">        ts.add(s2);</span><br><span class="line">        ts.add(s3);</span><br><span class="line">        ts.add(s4);</span><br><span class="line">        ts.add(s5);</span><br><span class="line">        ts.add(s6);</span><br><span class="line"></span><br><span class="line">        //遍历</span><br><span class="line">        for(Student s:ts)&#123;</span><br><span class="line">            System.out.println(s.getName()+&quot;-----------&quot;+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student.java:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">        super();</span><br><span class="line">        // TODO Auto-generated constructor stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果报错:</p>
<p><img src="/2020/03/13/Java%E9%9B%86%E5%90%88%E4%B8%ADList,Set%E4%BB%A5%E5%8F%8AMap%E7%AD%89%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3/3.png" alt><br>原因分析：<br>由于不知道该安照那一中排序方式排序，所以会报错。<br>解决方法：  </p>
<ol>
<li>自然排序  </li>
<li>比较器排序</li>
</ol>
<h6 id="1-自然排序"><a href="#1-自然排序" class="headerlink" title="(1). 自然排序"></a>(1). 自然排序</h6><p>自然排序要进行一下操作：<br>1.Student 类中实现 Comparable 接口<br>2. 重写 Comparable 接口中的 Compareto 方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compareTo(T o)  比较此对象与指定对象的顺序。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Student implements Comparable&lt;Student&gt;&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">        super();</span><br><span class="line">        // TODO Auto-generated constructor stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(Student s) &#123;</span><br><span class="line">        //return -1; //-1表示放在红黑树的左边,即逆序输出</span><br><span class="line">        //return 1;  //1表示放在红黑树的右边，即顺序输出</span><br><span class="line">        //return o;  //表示元素相同，仅存放第一个元素</span><br><span class="line">        //主要条件 姓名的长度,如果姓名长度小的就放在左子树，否则放在右子树</span><br><span class="line">        int num=this.name.length()-s.name.length();</span><br><span class="line">        //姓名的长度相同，不代表内容相同,如果按字典顺序此 String 对象位于参数字符串之前，则比较结果为一个负整数。</span><br><span class="line">        //如果按字典顺序此 String 对象位于参数字符串之后，则比较结果为一个正整数。</span><br><span class="line">        //如果这两个字符串相等，则结果为 0</span><br><span class="line">        int num1=num==0?this.name.compareTo(s.name):num;</span><br><span class="line">        //姓名的长度和内容相同，不代表年龄相同，所以还要判断年龄</span><br><span class="line">        int num2=num1==0?this.age-s.age:num1;</span><br><span class="line">        return num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<blockquote>
<p>lis———–22<br>qianqi———–24<br>wangwu———–24<br>chenliu———–26<br>zhangsan———–20<br>zhangsan———–22</p>
</blockquote>
<h6 id="2-比较器排序"><a href="#2-比较器排序" class="headerlink" title="(2). 比较器排序"></a>(2). 比较器排序</h6><p>比较器排序步骤：  </p>
<ol>
<li>单独创建一个比较类，这里以 MyComparator 为例，并且要让其继承 Comparator 接口  </li>
<li>重写 Comparator 接口中的 Compare 方法</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compare(T o1,T o2)      比较用来排序的两个参数。</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在主类中使用下面的 构造方法</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TreeSet(Comparator&lt;? superE&gt; comparator)</span><br><span class="line">          构造一个新的空 TreeSet，它根据指定比较器进行排序。</span><br></pre></td></tr></table></figure>

<p>测试类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建集合对象</span><br><span class="line">        //TreeSet(Comparator&lt;? super E&gt; comparator) 构造一个新的空 TreeSet，它根据指定比较器进行排序。</span><br><span class="line">        TreeSet&lt;Student&gt; ts=new TreeSet&lt;Student&gt;(new MyComparator());</span><br><span class="line"></span><br><span class="line">        //创建元素对象</span><br><span class="line">        Student s1=new Student(&quot;zhangsan&quot;,20);</span><br><span class="line">        Student s2=new Student(&quot;lis&quot;,22);</span><br><span class="line">        Student s3=new Student(&quot;wangwu&quot;,24);</span><br><span class="line">        Student s4=new Student(&quot;chenliu&quot;,26);</span><br><span class="line">        Student s5=new Student(&quot;zhangsan&quot;,22);</span><br><span class="line">        Student s6=new Student(&quot;qianqi&quot;,24);</span><br><span class="line"></span><br><span class="line">        //将元素对象添加到集合对象中</span><br><span class="line">        ts.add(s1);</span><br><span class="line">        ts.add(s2);</span><br><span class="line">        ts.add(s3);</span><br><span class="line">        ts.add(s4);</span><br><span class="line">        ts.add(s5);</span><br><span class="line">        ts.add(s6);</span><br><span class="line"></span><br><span class="line">        //遍历</span><br><span class="line">        for(Student s:ts)&#123;</span><br><span class="line">            System.out.println(s.getName()+&quot;-----------&quot;+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student.java:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">        super();</span><br><span class="line">        // TODO Auto-generated constructor stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, int age) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyComparator 类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyComparator implements Comparator&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int compare(Student s1,Student s2) &#123;</span><br><span class="line">        // 姓名长度</span><br><span class="line">        int num = s1.getName().length() - s2.getName().length();</span><br><span class="line">        // 姓名内容</span><br><span class="line">        int num2 = num == 0 ? s1.getName().compareTo(s2.getName()) : num;</span><br><span class="line">        // 年龄</span><br><span class="line">        int num3 = num2 == 0 ? s1.getAge() - s2.getAge() : num2;</span><br><span class="line">        return num3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<blockquote>
<p>lis———–22<br>qianqi———–24<br>wangwu———–24<br>chenliu———–26<br>zhangsan———–20<br>zhangsan———–22</p>
</blockquote>
<h4 id="三-性能测试"><a href="#三-性能测试" class="headerlink" title="(三). 性能测试"></a>(三). 性能测试</h4><p>对象类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Dog implements Comparable&lt;Dog&gt; &#123;</span><br><span class="line">    int size;</span><br><span class="line">    public Dog(int s) &#123;</span><br><span class="line">        size = s;</span><br><span class="line">    &#125;</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return size + &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public int compareTo(Dog o) &#123;</span><br><span class="line">       //数值大小比较</span><br><span class="line">        return size - o.size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Random r = new Random();</span><br><span class="line">        HashSet&lt;Dog&gt; hashSet = new HashSet&lt;Dog&gt;();</span><br><span class="line">        TreeSet&lt;Dog&gt; treeSet = new TreeSet&lt;Dog&gt;();</span><br><span class="line">        LinkedHashSet&lt;Dog&gt; linkedSet = new LinkedHashSet&lt;Dog&gt;();</span><br><span class="line"></span><br><span class="line">        // start time</span><br><span class="line">        long startTime = System.nanoTime();</span><br><span class="line">        for (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            int x = r.nextInt(1000 - 10) + 10;</span><br><span class="line">            hashSet.add(new Dog(x));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // end time</span><br><span class="line">        long endTime = System.nanoTime();</span><br><span class="line">        long duration = endTime - startTime;</span><br><span class="line">        System.out.println(&quot;HashSet: &quot; + duration);</span><br><span class="line"></span><br><span class="line">        // start time</span><br><span class="line">        startTime = System.nanoTime();</span><br><span class="line">        for (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            int x = r.nextInt(1000 - 10) + 10;</span><br><span class="line">            treeSet.add(new Dog(x));</span><br><span class="line">        &#125;</span><br><span class="line">        // end time</span><br><span class="line">        endTime = System.nanoTime();</span><br><span class="line">        duration = endTime - startTime;</span><br><span class="line">        System.out.println(&quot;TreeSet: &quot; + duration);</span><br><span class="line"></span><br><span class="line">        // start time</span><br><span class="line">        startTime = System.nanoTime();</span><br><span class="line">        for (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            int x = r.nextInt(1000 - 10) + 10;</span><br><span class="line">            linkedSet.add(new Dog(x));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // end time</span><br><span class="line">        endTime = System.nanoTime();</span><br><span class="line">        duration = endTime - startTime;</span><br><span class="line">        System.out.println(&quot;LinkedHashSet: &quot; + duration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<blockquote>
<p>HashSet: 1544313<br>TreeSet: 2066049<br>LinkedHashSet: 629826<br>虽然测试不够准确, 但能反映得出，TreeSet 要慢得多, 因为它是有序的。</p>
</blockquote>
<p><img src="/2020/03/13/Java%E9%9B%86%E5%90%88%E4%B8%ADList,Set%E4%BB%A5%E5%8F%8AMap%E7%AD%89%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3/4.png" alt></p>
<p>参考文章:<br><a href="https://www.jianshu.com/p/14bd5d9654fe" target="_blank" rel="noopener">HashSet、TreeSet 和 LinkedHashSet 的使用区别</a><br><a href="https://blog.csdn.net/czwx_24/article/details/51308706" target="_blank" rel="noopener">Collection 集合总结</a><br><a href="https://www.cnblogs.com/sidekick/p/8010522.html" target="_blank" rel="noopener">HashMap、TreeMap 和 HashTable 的区别</a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Collections</category>
      </categories>
      <tags>
        <tag>List、Set、Map</tag>
      </tags>
  </entry>
  <entry>
    <title>git开发过程中各个分支的作用简单分析</title>
    <url>/2020/03/09/git%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%90%84%E4%B8%AA%E5%88%86%E6%94%AF%E7%9A%84%E4%BD%9C%E7%94%A8%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="git开发过程中各个分支的作用简单分析"><a href="#git开发过程中各个分支的作用简单分析" class="headerlink" title="git开发过程中各个分支的作用简单分析"></a>git开发过程中各个分支的作用简单分析</h3><a id="more"></a>
<p>Git 和 SVN 是我们代码开发中，最常用的两款代码管理软件。在这里我来写写我在工作中如何使用 Git 来管理我们的代码开发。<br>  首先，我们是一个多人开发的团队，因此在开发过程中，少不了要进行多人协作的时候。不同的功能分支就成了家常便饭的事情了。咱先来看一副图：</p>
<p><img src="/2020/03/09/git%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%90%84%E4%B8%AA%E5%88%86%E6%94%AF%E7%9A%84%E4%BD%9C%E7%94%A8%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/1.png" alt></p>
<p>这幅图里画的是我日常工作中，代码管理中 Git 分支的存在形式。从最上层的一行中可以看到，一般会存在一些这样的分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;Master: 主分支；主要是稳定的版本分支，正式发布的版本都从Master拉。</span><br><span class="line">&gt;&gt;Develop: 开发分支；更新和变动最频繁的分支，正常情况下开发都是在Develop分支上进行的。</span><br><span class="line">&gt;&gt;Release：预发行分支；一般来说，代表一个版本的功能全部开发完成后递交测试，测试出Bug后进行修复的分支。</span><br><span class="line">&gt;&gt;Features: 功能分支； 其实Features不是一个分支，而是一个分支文件夹。里面包含了每个程序员开发的功能点。Feature开发完成后合入Develop分支。</span><br><span class="line">&gt;&gt;HotFix: 最希望不会被创建的分支；这个分支的存在是在已经正式上线的版本中，发现了重大Bug进行修复的分支。</span><br></pre></td></tr></table></figure>

<p>介绍完了几个分支的主要功能，我们能谈谈一个具体的 App 软件版本开发中的流程。<br>1、软件版本的起点：A<br>  需求总是在不断更新的。<br>  上一次产品经理需求 0.1 的软件版本刚刚完成后，这不又来了新的版本需求 0.2，这次一共两个功能点。幸好我们有 Git，让并行开发成为可能。拉取 Develop 分支准备开干！</p>
<p>2、开发的起点：B<br>  两名工程师，两个不同的需求，大师甲和大师乙各自领取一个功能点开干；从 Develop 拉取属于自己的分支，有单独的分支就不会被干扰：）</p>
<p>3、开发的终点：H<br>  一周不到，两位大师就已经完成了属于自己的功能；从图上看，都有两次代码的提交。大师们各自开发的功能初步看似乎没有啥问题，但是我们的 App 版本是一个多功能的集合，是否合在一起也会没有问题？这时候大师们把属于自己的分支合入 Develop，并删掉自己的工作 Branche。编译，运行，Success!</p>
<p>4、预发行的起点：Release 0.2 节点 (I)<br>  大师们的能力果然与众不同，合入后没有一点问题，达到提交测试部的标准。新建 Release 0.2 分支，代表一个里程碑式的事件。</p>
<p>5、Release 分支 Bug 宿命<br>  世上没有哪个大师的代码是没有 Bug 的，大师甲和大师乙也不例外。这不，测试部刚拿到预发行的版本就曝出了 2 个 Bug。<br>  不过没有关系，能够复现的 Bug 对于我们来说就不是 Bug。从 Release 0.2 拉取 Bug 修复分支。修好了，继续合进 Release 0.2。谁叫 Release 就是这样的宿命呢。</p>
<p>6、版本发行的终点: M<br>  但愿人长久，Bug 不再有。<br>  经过大师们艰苦卓绝的 bug 修复，终于通过了测试部的测试，也得到了产品经理们的认可，准备提交 App Store 审核。<br>  Release 合入 Master 分支，打上 Tag 0.2，这就是这次的 MileStone 了。<br>  当然也得记得 Release 合入 Develop，之前这么多的 bug 也得在 Develop 上修复修复不是。做好了这些，Release 就可以删啦。</p>
<p>7、救火队员一般的 HotFix: N<br>  好事多磨！AppStore 刚发出去的 App, 就有用户反馈 Crash! 大师甲和大师乙临危受命!<br>  从 Master 拉取 HotFix 分支来搞定它。原来是数组越界！分分钟搞定。完成后合入 Master，版本更新为 Tag 0.3，代表我们修复了重大问题。编译，运行，没问题，提交 App Store 等审核。<br>  噢，one more thing, HotFix 也要合入 Develop，又多了一个功能点（bug 修复）不是。</p>
<p>8、新的轮回开始：P<br>  1-&gt; 7 就是一个版本的开发过程中，我们的 Git Flow 流。到了最后，P 和 O 节点拥有了相同的内容，就像在一开始的 A 和 B 那样。<br>  这时候，我看见产品经理又拿着版本需求 1.0 向我走来……</p>
<p>原文地址 <a href="https://www.jianshu.com/p/c2aefcf6b2b7" target="_blank" rel="noopener">https://www.jianshu.com/p/c2aefcf6b2b7</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>branch</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的多态</title>
    <url>/2020/03/08/Java%E4%B8%AD%E7%9A%84%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h3 id="Java中的多态"><a href="#Java中的多态" class="headerlink" title="Java中的多态"></a>Java中的多态</h3><a id="more"></a>
<p>多态一般分为两种：重写式多态和重载式多态。重写和重载这两个知识点前面的文章已经详细将结果了，这里就不多说了。</p>
<ul>
<li><p>重载式多态，也叫编译时多态。也就是说这种多态再编译时已经确定好了。重载大家都知道，方法名相同而参数列表不同的一组方法就是重载。在调用这种重载的方法时，通过传入不同的参数最后得到不同的结果。</p>
<blockquote>
<p>但是这里是有歧义的，有的人觉得不应该把重载也算作多态。因为很多人对多态的理解是：程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，这种情况叫做多态。 这个定义中描述的就是我们的第二种多态—重写式多态。并且，重载式多态并不是面向对象编程特有的，而多态却是面向对象三大特性之一（如果我说的不对，记得告诉我。。）。</p>
<p>我觉得大家也没有必要在定义上去深究这些，我的理解是：同一个行为具有多个不同表现形式或形态的能力就是多态，所以我认为重载也是一种多态，如果你不同意这种观点，我也接受。</p>
</blockquote>
</li>
<li><p>重写式多态，也叫运行时多态。这种多态通过动态绑定（dynamic binding）技术来实现，是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。也就是说，只有程序运行起来，你才知道调用的是哪个子类的方法。<br>这种多态通过函数的重写以及向上转型来实现，我们上面代码中的例子就是一个完整的重写式多态。我们接下来讲的所有多态都是重写式多态，因为它才是面向对象编程中真正的多态。</p>
</li>
</ul>
<h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>子类引用的对象转换为父类类型称为向上转型。通俗地说就是是将子类对象转为父类对象。此处父类对象可以是接口。</p>
<p>看一个大家都知道的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Animal &#123;</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        System.out.println(&quot;animal eatting...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Cat extends Animal&#123;</span><br><span class="line"></span><br><span class="line">    public void eat()&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;我吃鱼&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Dog extends Animal&#123;</span><br><span class="line"></span><br><span class="line">    public void eat()&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;我吃骨头&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(&quot;我会跑&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Animal animal = new Cat(); //向上转型</span><br><span class="line">        animal.eat();</span><br><span class="line"></span><br><span class="line">        animal = new Dog();</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//结果:</span><br><span class="line">//我吃鱼</span><br><span class="line">//我吃骨头</span><br></pre></td></tr></table></figure>

<p>这就是向上转型，Animal animal = new Cat(); 将子类对象 Cat 转化为父类对象 Animal。这个时候 animal 这个引用调用的方法是子类方法。</p>
<h4 id="转型过程中需要注意的问题"><a href="#转型过程中需要注意的问题" class="headerlink" title="转型过程中需要注意的问题"></a>转型过程中需要注意的问题</h4><ul>
<li>向上转型时，子类单独定义的方法会丢失。比如上面 Dog 类中定义的 run 方法，当 animal 引用指向 Dog 类实例时是访问不到 run 方法的，<code>animal.run()</code>会报错。</li>
<li>子类引用不能指向父类对象。<code>Cat c = (Cat)new Animal()</code>这样是不行的。</li>
</ul>
<h4 id="向上转型的好处"><a href="#向上转型的好处" class="headerlink" title="向上转型的好处"></a>向上转型的好处</h4><ul>
<li>减少重复代码，使代码变得简洁。</li>
<li>提高系统扩展性。</li>
</ul>
<h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><p>与向上转型相对应的就是向下转型了。向下转型是把父类对象转为子类对象。(请注意！这里是有坑的。)</p>
<h4 id="案例驱动"><a href="#案例驱动" class="headerlink" title="案例驱动"></a>案例驱动</h4><p>先看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//还是上面的animal和cat dog</span><br><span class="line">Animal a = new Cat();</span><br><span class="line">Cat c = ((Cat) a);</span><br><span class="line">c.eat();</span><br><span class="line">//输出  我吃鱼</span><br><span class="line">Dog d = ((Dog) a);</span><br><span class="line">d.eat();</span><br><span class="line">// 报错 ： java.lang.ClassCastException：com.chengfan.animal.Cat cannot be cast to com.chengfan.animal.Dog</span><br><span class="line">Animal a1 = new Animal();</span><br><span class="line">Cat c1 = ((Cat) a1);</span><br><span class="line">c1.eat();</span><br><span class="line">// 报错 ： java.lang.ClassCastException：com.chengfan.animal.Animal cannot be cast to com.chengfan.animal.Cat</span><br></pre></td></tr></table></figure>

<p>为什么第一段代码不报错呢？相比你也知道了，因为 a 本身就是 Cat 对象，所以它理所当然的可以向下转型为 Cat，也理所当然的不能转为 Dog，你见过一条狗突然就变成一只猫这种操蛋现象？</p>
<p>而 a1 为 Animal 对象，它也不能被向下转型为任何子类对象。比如你去考古，发现了一个新生物，知道它是一种动物，但是你不能直接说，啊，它是猫，或者说它是狗。</p>
<h4 id="向下转型注意事项"><a href="#向下转型注意事项" class="headerlink" title="向下转型注意事项"></a>向下转型注意事项</h4><ul>
<li>向下转型的前提是父类对象指向的是子类对象（也就是说，在向下转型之前，它得先向上转型）</li>
<li>向下转型只能转型为本类对象（猫是不能变成狗的）。</li>
</ul>
<p>看一个经典案例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    public String show(D obj) &#123;</span><br><span class="line">        return (&quot;A and D&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String show(A obj) &#123;</span><br><span class="line">        return (&quot;A and A&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A&#123;</span><br><span class="line">    public String show(B obj)&#123;</span><br><span class="line">        return (&quot;B and B&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String show(A obj)&#123;</span><br><span class="line">        return (&quot;B and A&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C extends B&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class D extends B&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Demo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        A a1 = new A();</span><br><span class="line">        A a2 = new B();</span><br><span class="line">        B b = new B();</span><br><span class="line">        C c = new C();</span><br><span class="line">        D d = new D();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;1--&quot; + a1.show(b));</span><br><span class="line">        System.out.println(&quot;2--&quot; + a1.show(c));</span><br><span class="line">        System.out.println(&quot;3--&quot; + a1.show(d));</span><br><span class="line">        System.out.println(&quot;4--&quot; + a2.show(b));</span><br><span class="line">        System.out.println(&quot;5--&quot; + a2.show(c));</span><br><span class="line">        System.out.println(&quot;6--&quot; + a2.show(d));</span><br><span class="line">        System.out.println(&quot;7--&quot; + b.show(b));</span><br><span class="line">        System.out.println(&quot;8--&quot; + b.show(c));</span><br><span class="line">        System.out.println(&quot;9--&quot; + b.show(d));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//结果：</span><br><span class="line">//1--A and A</span><br><span class="line">//2--A and A</span><br><span class="line">//3--A and D</span><br><span class="line">//4--B and A</span><br><span class="line">//5--B and A</span><br><span class="line">//6--A and D</span><br><span class="line">//7--B and B</span><br><span class="line">//8--B and B</span><br><span class="line">//9--A and D</span><br><span class="line"></span><br><span class="line">//能看懂这个结果么？先自分析一下。</span><br></pre></td></tr></table></figure>

<p>前三个，强行分析，还能看得懂。但是第四个，大概你就傻了吧。为什么不是 b and b 呢？</p>
<p>这里就要学点新东西了。</p>
<blockquote>
<p>当父类对象引用变量引用子类对象时，被引用对象的类型决定了调用谁的成员方法，引用变量类型决定可调用的方法。如果子类中没有覆盖该方法，那么会去父类中寻找。</p>
</blockquote>
<p>可能读起来比较拗口，我们先来看一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class X &#123;</span><br><span class="line">    public void show(Y y)&#123;</span><br><span class="line">        System.out.println(&quot;x and y&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void show()&#123;</span><br><span class="line">        System.out.println(&quot;only x&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Y extends X &#123;</span><br><span class="line">    public void show(Y y)&#123;</span><br><span class="line">        System.out.println(&quot;y and y&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void show(int i)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class main&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        X x = new Y();</span><br><span class="line">        x.show(new Y());</span><br><span class="line">        x.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//结果</span><br><span class="line">//y and y</span><br><span class="line">//only x</span><br></pre></td></tr></table></figure>

<p>Y 继承了 X，覆盖了 X 中的 show（Y y) 方法，但是没有覆盖 show（）方法。</p>
<p>这个时候，引用类型为 X 的 x 指向的对象为 Y，这个时候，调用的方法由 Y 决定，会先从 Y 中寻找。执行<code>x.show(new Y());</code>，该方法在 Y 中定义了，所以执行的是 Y 里面的方法；</p>
<p>但是执行<code>x.show();</code>的时候，有的人会说，Y 中没有这个方法啊？它好像是去父类中找该方法了，因为调用了 X 中的方法。</p>
<p>事实上，Y 类中是有 show（）方法的，这个方法继承自 X，只不过没有覆盖该方法，所以没有在 Y 中明确写出来而已，看起来像是调用了 X 中的方法，实际上调用的还是 Y 中的。</p>
<blockquote>
<p>这个时候再看上面那句难理解的话就不难理解了吧。X 是引用变量类型，它决定哪些方法可以调用；show（）和 show(Y y) 可以调用，而 show(int i) 不可以调用。Y 是被引用对象的类型，它决定了调用谁的方法：调用 y 的方法。</p>
</blockquote>
<p>上面的是一个简单的知识，它还不足以让我们理解那个复杂的例子。我们再来看这样一个知识：</p>
<blockquote>
<p><strong>继承链中对象方法的调用的优先级：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。</strong></p>
</blockquote>
<p>如果你能理解这个调用关系，那么多态你就掌握了。我们回到那个复杂的例子：</p>
<p>abcd 的关系是这样的：C/D —&gt; B —&gt; A</p>
<p>我们先来分析 4 ： <code>a2.show(b)</code></p>
<blockquote>
<ul>
<li>首先，a2 是类型为 A 的引用类型，它指向类型为 B 的对象。A 确定可调用的方法：show(D obj) 和 show(A obj)。</li>
<li><code>a2.show(b)</code> ==&gt; <code>this.show(b)</code>，这里 this 指的是 B。</li>
<li>然后. 在 B 类中找 show（B obj），找到了，可惜没用，因为 show（B obj）方法不在可调用范围内，<code>this.show(O)</code>失败，进入下一级别：<code>super.show(O)</code>，super 指的是 A。</li>
<li>在 A 中寻找 show（B obj)，失败，因为没用定义这个方法。进入第三级别：<code>this.show((super)O)</code>，this 指的是 B。</li>
<li>在 B 中找 show（（A）O）, 找到了：show(A obj)，选择调用该方法。</li>
<li>输出：B and A</li>
</ul>
</blockquote>
<p>如果你能看懂这个过程，并且能分析出其他的情况，那你就真的掌握了。</p>
<p>我们再来看一下 9：<code>b.show(d)</code></p>
<blockquote>
<ul>
<li>首先，b 为类型为 B 的引用对象，指向类型为 B 的对象。没有涉及向上转型，只会调用本类中的方法。</li>
<li>在 B 中寻找 show(D obj)，方法。现在你不会说没找到了吧？找到了，直接调用该方法。</li>
<li>输出 A and D。</li>
</ul>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章的内容大体上就是这些了。我们来总结一下。</p>
<ol>
<li>多态，简而言之就是同一个行为具有多个不同表现形式或形态的能力。</li>
<li>多态的分类：运行时多态和编译时多态。</li>
<li>运行时多态的前提：继承（实现），重写，向上转型</li>
<li>向上转型与向下转型。</li>
<li>继承链中对象方法的调用的优先级：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。</li>
</ol>
<p>原文地址 <a href="https://www.cnblogs.com/kexianting/p/8689031.html" target="_blank" rel="noopener">https://www.cnblogs.com/kexianting/p/8689031.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>multi</tag>
      </tags>
  </entry>
  <entry>
    <title>多态性，父类引用指向子类对象</title>
    <url>/2020/03/07/%E5%A4%9A%E6%80%81%E6%80%A7%EF%BC%8C%E7%88%B6%E7%B1%BB%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="多态性，父类引用指向子类对象"><a href="#多态性，父类引用指向子类对象" class="headerlink" title="多态性，父类引用指向子类对象"></a>多态性，父类引用指向子类对象</h3><a id="more"></a>
<p>父类引用指向子类对象指的是：</p>
<p>例如父类 Animal，子类 Cat,Dog。其中 Animal 可以是类也可以是接口，Cat 和 Dog 是继承或实现 Animal 的子类。</p>
<p>Animal animal = new Cat();<br>即声明的是父类，实际指向的是子类的一个对象。</p>
<p><strong>那我们从内存角度来理解试试.</strong><br>假设现在有一个父类 Father, 它里面的变量需要占用 1M 内存.<br>有一个它的子类 Son, 它里面的变量需要占用 0.5M 内存.<br>现在通过代码来看看内存的分配情况:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Father f = new Father();//系统将分配1M内存.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Son s = new Son();//系统将分配1.5M内存!</span><br></pre></td></tr></table></figure>

<p>因为子类中有一个隐藏的引用 super 会指向父类实例, 所以在实例化子类之前会先实例化一个父类, 也就是说会先执行父类的构造函数. 由于 s 中包含了父类的实例, 所以 s 可以调用父类的方法.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Son s1 = s; //s1指向那1.5M的内存.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Father f1 = (Father)s;//这时f1会指向那1.5M内存中的1M内存</span><br></pre></td></tr></table></figure>

<p>f1 只是指向了 s 中实例的父类实例对象, 所以 f1 只能调用父类的方法 (存储在 1M 内存中), 而不能调用子类的方法 (存储在 0.5M 内存中).</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Son s2 = (Son)f;//这句代码运行时会报ClassCastException.</span><br></pre></td></tr></table></figure>

<p>因为 f 中只有 1M 内存, 而子类的引用都必须要有 1.5M 的内存, 所以无法转换.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Son s3 = (Son)f1;//这句可以通过运行,这时s3指向那1.5M的内存.</span><br></pre></td></tr></table></figure>

<p>由于 f1 是由 s 转换过来的, 所以它是有 1.5M 的内存的, 只是它指向的只有 1M 内存.<br><img src="/2020/03/07/%E5%A4%9A%E6%80%81%E6%80%A7%EF%BC%8C%E7%88%B6%E7%B1%BB%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1/1.jpg" alt></p>
<p>如果能够理解对象在内存的分布，那我们接下来就介绍 java 的多态性</p>
<p>方法的重写、重载和动态链接构成了 java 的多态性。Java 之所以引入多态的概念，原因之一是它在类的继承问题上和 C++ 不同，后者允许多继承，这确实给其带来的非常强大的功能，但是复杂的继承关系也给 C++ 开发者带来了更大的麻烦，为了规避风险，Java 只允许单继承，派生类与基类间有 IS-A 的关系（即 “猫”is a “动物”）。这样做虽然保证了继承关系的简单明了，但是势必在功能上有很大的限制，所以，Java 引入了多态性的概念以弥补这点的不足。</p>
<p>理解多态性，首先要理解的就是 “向上转型”</p>
<p>Animal c = new Cat()；<br>它表示我定义了一个 Animal 类型的引用，指向新建的 Cat 类型的对象。由于 Cat 是继承自它的父类 Animal，所以 Animal 类型的引用是可以指向 Cat 类型的对象的。这就是 “向上转型”。</p>
<p>注意：java 中 “向上转型” 是自动的。但是 “向下转型” 却不是自动的。需要我们用强制类型转化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Animal c = new Cat();</span><br><span class="line">Cat c1 = （Cat）c；    //不允许“向下转型”，需用强制类型转化。</span><br></pre></td></tr></table></figure>

<p>那么这样做有什么意义呢？因为子类是对父类的改进和扩充。定义一个父类类型的引用指向一个子类的对象既可以使用子类强大的功能，又可以抽取父类的共性。 但是父类类型的引用可以调用父类中定义的所有属性和方法，而对于子类中定义而父类中没有的方法，父类引用是无法调用的；</p>
<p>要做到父类引用调用子类的属性或者方法，就还要有<strong>动态连接</strong>。那什么是动态链接呢？<strong>当父类中的一个方法只有在父类中定义而在子类中没有被重写的情况下，才可以被父类类型的引用调用； 对于父类中定义的方法，如果子类中重写了该方法，那么父类类型的引用将会调用子类中的这个方法，这就是动态连接。</strong></p>
<p>JAVA 里没有多继承，一个类只能有一个父类。而继承的表现就是多态。一个父类可以有多个子类，而在子类里可以重写父类的方法，这样每个子类里重写的代码不一样，自然表现形式就不一样。这样用父类的变量去引用不同的子类，在调用这个相同的方法的时候得到的结果和表现形式就不一样了，这就是多态，相同的消息（也就是调用相同的方法）会有不同的结果。举例说明：<br>下面看一个多态性的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//父类</span><br><span class="line">public class Father&#123;</span><br><span class="line">    //父类有一个打孩子方法</span><br><span class="line">    public void hitChild()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//子类1</span><br><span class="line">public class Son1 extends Father&#123;</span><br><span class="line">    //重写父类打孩子方法</span><br><span class="line">    public void hitChild()&#123;</span><br><span class="line">      System.out.println(&quot;为什么打我？我做错什么了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//子类2</span><br><span class="line">public class Son2 extends Father&#123;</span><br><span class="line">    //重写父类打孩子方法</span><br><span class="line">    public void hitChild()&#123;</span><br><span class="line">      System.out.println(&quot;我知道错了，别打了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//子类3</span><br><span class="line">public class Son3 extends Father&#123;</span><br><span class="line">    //重写父类打孩子方法</span><br><span class="line">    public void hitChild()&#123;</span><br><span class="line">      System.out.println(&quot;我跑，你打不着！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//测试类</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String args[])&#123;</span><br><span class="line">      Father father;</span><br><span class="line">      father = new Son1();</span><br><span class="line">      father.hitChild();</span><br><span class="line">      father = new Son2();</span><br><span class="line">      father.hitChild();</span><br><span class="line">      father = new Son3();</span><br><span class="line">      father.hitChild();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面程序调用同一个方法，去出现不同的结果。这就是多态。<br>对于多态性的实现有必要重视方法重载（overloading）和方法重写（override）区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Father&#123;</span><br><span class="line">    public void func1()&#123;</span><br><span class="line">       System.out.println(&quot;AAA&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Child extends Father&#123;</span><br><span class="line">    //func1(int i)是对func1()方法的一个重载，主要不是重写！</span><br><span class="line">    //由于在父类中没有定义这个方法，所以它不能被父类类型的引用调用</span><br><span class="line">    //所以在下面的main方法中child.func1(68)是不对的</span><br><span class="line">    public void func1(int i)&#123;</span><br><span class="line">        System.out.println(&quot;BBB&quot;);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class PolymorphismTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123; </span><br><span class="line">        Father child = new Child();</span><br><span class="line">        child.func1(68);//错误</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的程序是个很典型的多态的例子。子类 Child 继承了父类 Father，并重载了父类的 func1() 方法。重载后的 func1(int i) 和 func1() 不再是同一个方法，由于父类中没有 func1(int i)，那么，父类类型的引用 child 就不能调用 func1(int i) 方法。</p>
<p><strong>最后，对于多态做出几点总结</strong></p>
<p><strong>1、使用父类类型的引用指向子类的对象；</strong><br><strong>2、该引用只能调用父类中定义的方法和变量；</strong><br><strong>3、如果子类中重写了父类中的一个方法，那么在调用这个方法的时候，将会调用子类中的这个方法；（动态连接、动态调用）</strong><br><strong>4、变量不能被重写（覆盖），”重写 “的概念只针对方法，如果在子类中” 重写“了父类中的变量，那么在编译时会报错。</strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>multi</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 java 多态性之父类引用指向子类对象</title>
    <url>/2020/03/07/%E5%85%B3%E4%BA%8Ejava%E5%A4%9A%E6%80%81%E6%80%A7%E4%B9%8B%E7%88%B6%E7%B1%BB%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="关于-java-多态性之父类引用指向子类对象"><a href="#关于-java-多态性之父类引用指向子类对象" class="headerlink" title="关于 java 多态性之父类引用指向子类对象"></a>关于 java 多态性之父类引用指向子类对象</h3><a id="more"></a>
<p>在使用多态前，要确保两个类之间是继承关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Animal&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Dog extends Animal&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后创建对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Animal animal1 = new Animal();</span><br><span class="line">Animal animal2 = new Dog();</span><br></pre></td></tr></table></figure>

<p>这时，Animal animal2 = new Dog(); 就是父类引用指向子类对象</p>
<p>即：<strong>声明的是父类，实际指向的是子类的一个对象</strong></p>
<p>在学习 java 时，书上有讲到一个章节——对象的上转对象，其中有一个概念：</p>
<p>A 类是 B 类的父类，当用子类创建一个对象，并把这个对象的引用放到父类的对象时，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A a;</span><br><span class="line">a = new B();    //A a = new B();</span><br><span class="line">//或者</span><br><span class="line">A a;</span><br><span class="line">B b=new B();</span><br><span class="line">a=b;</span><br></pre></td></tr></table></figure>

<p>这时，称对象 a 是对象 b 的<strong>上转对象</strong>（就像说 “中国人是人”）</p>
<p>可以理解成，父类引用指向子类对象 = 上转对象  （不确定，我是暂时这么理解）</p>
<p>那么，让父类引用指向子类对象有什么用的：</p>
<p>要知道，<strong><em>父类对象不可以访问，子类方法</em></strong>。</p>
<p>而上转型对象，既可以访问父类方法（通过 super. 来调用），也可以访问子类继承或隐藏的成员变量，或者调用子类继承的方法（父类方法）或者子类重写的实例方法。</p>
<p><img src="/2020/03/07/%E5%85%B3%E4%BA%8Ejava%E5%A4%9A%E6%80%81%E6%80%A7%E4%B9%8B%E7%88%B6%E7%B1%BB%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E5%AD%90%E7%B1%BB%E5%AF%B9%E8%B1%A1/1.png" alt></p>
<p>进而，一个父类类型的引用指向一个子类的对象既可以使用子类强大的功能，又可以抽取父类的共性。</p>
<p>一个参考网上的定义：要做到父类引用调用子类的属性或者方法，就还要有<strong>动态连接</strong>。那什么是动态链接呢？<strong>当父类中的一个方法只有在父类中定义而在子类中没有被重写的情况下，才可以被父类类型的引用调用； 对于父类中定义的方法，如果子类中重写了该方法，那么父类类型的引用将会调用子类中的这个方法，这就是动态连接。</strong></p>
<p>JAVA 里没有多继承，一个类只能有一个父类。而继承的表现就是多态。一个父类可以有多个子类，而在子类里可以重写父类的方法，这样每个子类里重写的代码不一样，自然表现形式就不一样。这样用父类的变量去引用不同的子类，在调用这个相同的方法的时候得到的结果和表现形式就不一样了，这就是多态，相同的消息（也就是调用相同的方法）会有不同的结果。举例说明：<br>下面看一个多态性的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//父类</span><br><span class="line">public class Animal&#123;</span><br><span class="line">    //动物会叫</span><br><span class="line">   public void shout()&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//子类：狗</span><br><span class="line">public class Dog extends Animal&#123;</span><br><span class="line">   //狗的叫声</span><br><span class="line">   public void shout()&#123;</span><br><span class="line">   System.out.println(&quot;汪汪汪！&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//子类：猫</span><br><span class="line">public class Cat extends Animal&#123;</span><br><span class="line">   //猫的叫声</span><br><span class="line">   public void shout()&#123;</span><br><span class="line">   System.out.println(&quot;喵喵喵！&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//子类：狼</span><br><span class="line">public class Wolf extends Animal&#123;</span><br><span class="line">    //虎的叫声</span><br><span class="line">    public void shout()&#123;</span><br><span class="line">    System.out.println(&quot;嗷呜嗷呜！&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//测试类</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String arg[])&#123;</span><br><span class="line">       Animal animal;</span><br><span class="line">       animal = new Dog();</span><br><span class="line">       animal.shout();</span><br><span class="line">       animal = new Cat();</span><br><span class="line">       animal.shout();</span><br><span class="line">       animal = new Wolf();</span><br><span class="line">       animal.shout();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 参考博客：<a href="https://www.cnblogs.com/shilin/p/4784862.html" target="_blank" rel="noopener">https://www.cnblogs.com/shilin/p/4784862.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>multi</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习整理</title>
    <url>/2020/02/15/docker%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="Docker-学习整理"><a href="#Docker-学习整理" class="headerlink" title="Docker 学习整理"></a>Docker 学习整理</h3><hr><p><em><strong>一）docker 简介</strong></em></p><p><strong>一：是什么</strong></p><p>1：为什么会有 docker 出现？</p><pre><code>一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发 + 运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员都是考验  </code></pre><a id="more"></a>



<p>Docker 之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案。<br>环境配置如此麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时 “在我的机器上可正常工作” 的问题。</p>
<p><img src="https://img-blog.csdnimg.cn/20190214092808829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<pre><code> 之前在服务器配置一个应用的运行环境，要安装各种软件，Java/Tomcat/MySQL/JDBC 驱动包等。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在 Windows 上安装的这些环境，到了 Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要移植应用也是非常麻烦的。

传统上认为，软件编码开发 / 测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等 (java 为例)。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，开发需要清楚的告诉运维部署团队，用的全部配置文件 + 所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。Docker 镜像的设计，使得 Docker 得以打破过去「程序即应用」的观念。透过镜像(images) 将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作。</code></pre><p>2 ：docker 理念</p>
<p>Docker 是基于 Go 语言实现的云开源项目。<br>Docker 的主要目标是 “Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的 APP（可以是一个 WEB 应用或数据库应用等等）及其运行环境能够做到 “一次封装，到处运行”。</p>
<p><img src="https://img-blog.csdnimg.cn/20190214093322524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作，一句话：解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。</p>
<p><strong>二：能干嘛？</strong></p>
<p>1：之前的虚拟技术</p>
<p>虚拟机（virtual machine）就是带环境安装的一种解决方案。<br>它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。  </p>
<p>虚拟机的缺点：<br>1    资源占用多               2    冗余步骤多                 3    启动慢</p>
<p>2：容器的虚拟化技术</p>
<p>由于前面虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。<br>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。而 Docker 就是在它的基础上发展过来的。  </p>
<p>比较了 Docker 和传统虚拟化方式的不同之处：  </p>
<ul>
<li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；  </li>
<li>而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。  </li>
<li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</li>
</ul>
<p>3：docker 容器好处：</p>
<p>一次构建，随处运行</p>
<p>1 更快速的应用交付和部署</p>
<pre><code>传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker 化之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间。</code></pre><p>2 更便捷的升级和扩缩容</p>
<pre><code>随着微服务架构和 Docker 的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个 Docker 容器将变成一块 “积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。</code></pre><p>3 更简单的系统运维</p>
<pre><code>应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的 BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。</code></pre><p>4 更高效的计算资源利用</p>
<p>Docker 是内核级虚拟化，其不像传统的虚拟化技术一样需要额外的 Hypervisor 支持，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的 CPU 和内存的利用率。</p>
<p><strong>三：去哪下载？</strong></p>
<p><strong>docker 官网</strong>：</p>
<p><strong>docker 官网：<a href="http://www.docker.com" target="_blank" rel="noopener">http://www.docker.com</a></strong></p>
<p><strong>docker 中文网站：<a href="https://www.docker-cn.com/" target="_blank" rel="noopener">https://www.docker-cn.com/</a></strong></p>
<p><strong>仓库：</strong></p>
<p><strong>Docker Hub 官网: <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></strong></p>
<p>四：安装说明</p>
<p>CentOS Docker 安装<br>Docker 支持以下的 CentOS 版本：<br>CentOS 7 (64-bit)<br>CentOS 6.5 (64-bit) 或更高的版本  </p>
<p>前提条件<br>目前，CentOS 仅发行版本中的内核支持 Docker。<br>Docker 运行在 CentOS 7 上，要求系统为 64 位、系统内核版本为 3.10 以上。<br>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为 64 位、系统内核版本为 2.6.32-431 或者更高版本。  </p>
<p>查看自己的内核<br>uname 命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。</p>
<p><img src="https://img-blog.csdnimg.cn/20190214094843806.png" alt></p>
<p>查看已安装的 CentOS 版本信息（CentOS6.8 有，CentOS7 无该命令）</p>
<p><img src="https://img-blog.csdnimg.cn/20190214094909477.png" alt></p>
<p><img src="https://img-blog.csdnimg.cn/20190214094954711.png" alt></p>
<p><strong>五 docker 的基本组成架构：</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20190214095432259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p><em><strong>二）docker 安装</strong></em></p>
<p><strong>一 CentOS6.8 安装 Docker</strong></p>
<p>1.yum install -y epel-release</p>
<p>Docker 使用 EPEL 发布，RHEL 系的 OS 首先要确保已经持有 EPEL 仓库，否则先检查 OS 的版本，然后安装相应的 EPEL 包。</p>
<p><img src="https://img-blog.csdnimg.cn/20190214095957321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>2 yum install -y docker-io</p>
<p><img src="https://img-blog.csdnimg.cn/2019021410010057.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<ol start="3">
<li>安装后的配置文件：/etc/sysconfig/docker</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20190214100234792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>4 启动 Docker 后台服务：service docker start</p>
<p>5 docker version 验证</p>
<p><strong>二 CentOS7 安装 Docker</strong></p>
<p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>
<p>1 官网中文安装参考手册 <a href="https://docs.docker-cn.com/engine/installation/linux/docker-ce/centos/#prerequisites" target="_blank" rel="noopener">https://docs.docker-cn.com/engine/installation/linux/docker-ce/centos/#prerequisites</a></p>
<p>2 确定你是 CentOS7 及以上版本 cat /etc/redhat-release</p>
<p>3 yum 安装 gcc 相关  </p>
<pre><code>1：CentOS7 能上外网  ![](https://img-blog.csdnimg.cn/20190214100546410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70)

2：yum -y install gcc

3：yum -y install gcc-c++</code></pre><p>   4 卸载旧版本</p>
<p>   1：yum -y remove docker docker-common docker-selinux docker-engine</p>
<p>   2：yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-selinux \<br>                  docker-engine-selinux \<br>                  docker-engine</p>
<p>5 安装需要的软件包    yum install -y yum-utils device-mapper-persistent-data lvm2</p>
<p>6 设置 stable 镜像仓库</p>
<p>大坑：yum-config-manager –add-repo <a href="https://download.docker.com/linux/centos/docker-ce.repo" target="_blank" rel="noopener">https://download.docker.com/linux/centos/docker-ce.repo</a></p>
<p>推荐：yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p>
<p>7 更新 yum 软件包索引   yum makecache fast</p>
<p>8 安装 DOCKER CE    yum -y install docker-ce</p>
<p>9 启动 docker   systemctl start docker</p>
<p>10 测试     docker version      docker run hello-world</p>
<p>11 配置镜像加速</p>
<pre><code>1 mkdir -p /etc/docker

2 vim  /etc/docker/daemon.json     </code></pre><h1 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h1><p> {“registry-mirrors”: [“<a href="http://hub-mirror.c.163.com&quot;]" target="_blank" rel="noopener">http://hub-mirror.c.163.com&quot;]</a> }  </p>
<h1 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h1><p> {<br>  “registry-mirrors”: [“https://｛自已的编码｝.mirror.aliyuncs.com”]<br> }</p>
<p>  3 systemctl daemon-reload</p>
<p>  4 systemctl restart docker</p>
<p>12 卸载    1 systemctl stop docker  2 yum -y remove docker-ce  3 rm -rf /var/lib/docker</p>
<p><strong>三：阿里云镜像加速</strong></p>
<p> 1 是什么.<a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">https://dev.aliyun.com/search.html</a></p>
<p> 2 注册一个属于自己的阿里云账户 (可复用淘宝账号)</p>
<p> 3 获得加速器地址连接 </p>
<p> 3.1 登陆阿里云开发者平台</p>
<p> <img src="https://img-blog.csdnimg.cn/2019021410191749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>3.2 获取加速器地址</p>
<p><img src="https://img-blog.csdnimg.cn/20190214101949723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>4 配置本机 Docker 运行镜像加速器</p>
<p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，<br>我使用的是阿里云的本人自己账号的镜像地址 (需要自己注册有一个属于你自己的)：   <a href="https://xxxx.mirror.aliyuncs.com" target="_blank" rel="noopener">https://xxxx.mirror.aliyuncs.com</a>  </p>
<ul>
<li>vim /etc/sysconfig/docker<br>将获得的自己账户下的阿里云加速地址配置进<br>other_args=”–registry-mirror=https:// 你自己的账号加速信息. mirror.aliyuncs.com”</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190214102137837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>5 重新启动 Docker 后台服务：service docker restart</p>
<p>6 Linux 系统下配置完加速器需要检查是否生效</p>
<p> 如果从结果中看到了配置的 –registry-mirror 参数说明配置成功，如下所示:</p>
<p>网易云加速基本同阿里云一样，配置 Json 串的地方不同了:</p>
<p><img src="https://img-blog.csdnimg.cn/20190214102408739.png" alt></p>
<p> {<br> “registry-mirrors”: [“<a href="http://hub-mirror.c.163.com&quot;]" target="_blank" rel="noopener">http://hub-mirror.c.163.com&quot;]</a><br>}</p>
<p><strong>四 启动 Docker 后台容器 (测试运行 hello-world)</strong></p>
<p><strong>五 底层原理</strong></p>
<p><strong>1 Docker 是一个 Client-Server 结构的系统，Docker 守护进程运行在主机上， 然后通过 Socket 连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。</strong><img src="https://img-blog.csdnimg.cn/2019021410263240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>2 为什么 Docker 比较比 VM 快</p>
<p>(1)docker 有着比虚拟机更少的抽象层。由亍 docker 不需要 Hypervisor 实现硬件资源虚拟化, 运行在 docker 容器上的程序直接使用的都是实际物理机的硬件资源。因此在 CPU、内存利用率上 docker 将会在效率上有明显优势。  </p>
<p>(2)docker 利用的是宿主机的内核, 而不需要 Guest OS。因此, 当新建一个容器时, docker 不需要和虚拟机一样重新加载一个操作系统内核。从而避免查寻、加载操作系统内核返回比较费时费资源的过程, 当新建一个虚拟机时, 虚拟机软件需要加载 Guest OS, 返个新建过程是分钟级别的。而 docker 由于直接利用宿主机的操作系统, 则省略了返个过程, 因此新建一个 docker 容器只需要几秒钟。</p>
<p><em><strong>三）docker 常用命令</strong></em></p>
<p>一 帮助命令 docker version     docker info   docker –help</p>
<p>二 镜像命令 </p>
<p>1docker images  列出本地主机上的镜像</p>
<p><img src="https://img-blog.csdnimg.cn/20190214105430319.png" alt></p>
<p>各个选项说明:<br>REPOSITORY：表示镜像的仓库源<br>TAG：镜像的标签<br>IMAGE ID：镜像 ID<br>CREATED：镜像创建时间<br>SIZE：镜像大小<br> 同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。<br>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像</p>
<p>OPTIONS 说明：-a : 列出本地所有的镜像（含中间映像层）</p>
<pre><code>-q : 只显示镜像 ID。

--digests : 显示镜像的摘要信息

--no-trunc : 显示完整的镜像信息</code></pre><p>2docker search 某个 XXX 镜像名字</p>
<p><a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a></p>
<p>docker search [OPTIONS] 镜像名字   –no-trunc : 显示完整的镜像描述   -s : 列出收藏数不小于指定值的镜像。  –automated : 只列出 automated build 类型的镜像；</p>
<p>3docker pull 某个 XXX 镜像名字   下载镜像  docker pull 镜像名字 [:TAG]</p>
<p>4 docker rmi 某个 XXX 镜像名字 ID   单个 docker rmi  -f 镜像 ID   多个 docker rmi -f 镜像名 1:TAG 镜像名 2:TAG  全部 docker rmi -f $(docker images -qa)</p>
<p>三 容器命令</p>
<p>有镜像才能创建容器，这是根本前提 (下载一个 CentOS 镜像演示)</p>
<p>1 新建并启动容器 docker run [OPTIONS] IMAGE [COMMAND] [ARG…]</p>
<p>OPTIONS 说明（常用）：有些是一个减号，有些是两个减号  </p>
<p>–: 为容器指定一个名称；<br>-d: 后台运行容器，并返回容器 ID，也即启动守护式容器；<br>-i：以交互模式运行容器，通常与 -t 同时使用；<br>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；<br>-P: 随机端口映射；<br>-p: 指定端口映射，有以下四种格式<br>      ip:hostPort:containerPort<br>      ip::containerPort<br>      hostPort:containerPort<br>      containerPort</p>
<p>启动交互式容器 </p>
<p><img src="https://img-blog.csdnimg.cn/20190214110345689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>#使用镜像 centos:latest 以交互模式启动一个容器, 在容器内执行 / bin/bash 命令。<br>docker run -it centos /bin/bash </p>
<p>2 列出当前所有正在运行的容器  docker ps [OPTIONS]</p>
<p>OPTIONS 说明（常用）：  </p>
<p>-a : 列出当前所有正在运行的容器 + 历史上运行过的<br>-l : 显示最近创建的容器。<br>-n：显示最近 n 个创建的容器。<br>-q : 静默模式，只显示容器编号。<br>–no-trunc : 不截断输出。</p>
<p>3 退出容器 </p>
<p> 容器停止退出  exit     </p>
<p> 容器不停止退出 ctrl+P+Q</p>
<p>4 启动容器  docker start 容器 ID 或者容器名</p>
<p>5 重启容器 docker restart 容器 ID 或者容器名</p>
<p>6 停止容器  docker stop 容器 ID 或者容器名</p>
<p>7 强制停止容器 docker kill 容器 ID 或者容器名</p>
<p>8 删除已停止的容器  docker rm 容器 ID  一次性删除多个容器  docker rm -f $(docker ps -a -q)   docker ps -a -q | xargs docker rm</p>
<p>important</p>
<p>9 启动守护式容器 docker run -d 容器名  </p>
<p>#使用镜像 centos:latest 以后台模式启动一个容器<br>docker run -d centos  </p>
<p>问题：然后 docker ps -a 进行查看, 会发现容器已经退出<br>很重要的要说明的一点: Docker 容器后台运行, 就必须有一个前台进程.<br>容器运行的命令如果不是那些一直挂起的命令（比如运行 top，tail），就是会自动退出的。  </p>
<p>这个是 docker 的机制问题, 比如你的 web 容器, 我们以 nginx 为例，正常情况下, 我们配置启动服务只需要启动响应的 service 即可。例如<br>service nginx start<br>但是, 这样做, nginx 为后台进程模式运行, 就导致 docker 前台没有运行的应用,<br>这样的容器后台启动后, 会立即自杀因为他觉得他没事可做了.<br>所以，最佳的解决方案是, 将你要运行的程序以前台进程的形式运行</p>
<p>其实，docker 容器就是容器，是没有后台前台后端前端之分的，他本质就是一个被隔离的进程</p>
<p>10 查看容器日志  docker logs -f -t –tail 容器 ID</p>
<p>docker run -d centos /bin/sh -c “while true;do echo hello zzyy;sleep 2;done”</p>
<ul>
<li>-t 是加入时间戳  </li>
<li>-f 跟随最新的日志打印  </li>
<li>–tail 数字 显示最后多少条</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190214111909206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>10 查看容器内运行的进程  docker top 容器 ID</p>
<p>11 查看容器内部细节  docker inspect 容器 ID</p>
<p>12 进入正在运行的容器并以命令行交互   docker exec -it 容器 ID bashShell   是在容器中打开新的终端，并且可以启动新的进程</p>
<p><img src="https://img-blog.csdnimg.cn/20190214112514967.png" alt></p>
<p>重新进入 docker attach 容器 ID    直接进入容器启动命令的终端，不会启动新的进程</p>
<p>13 从容器内拷贝文件到主机上    docker cp  容器 ID: 容器内路径 目的主机路径</p>
<p><img src="https://img-blog.csdnimg.cn/20190214112657255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>常用命令总结：</p>
<p><img src="https://img-blog.csdnimg.cn/20190214112805274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p><em><strong>四）docker 镜像</strong></em></p>
<p>一：是什么</p>
<pre><code>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</code></pre><p>1.UnionFS（联合文件系统）：Union 文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下 (unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。<br> <img src="https://img-blog.csdnimg.cn/20190214113244947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt><br>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p>
<p>2 Docker 镜像加载原理</p>
<p>Docker 镜像加载原理：<br>   docker 的镜像实际上由一层一层的文件系统组成，这种层级的文件系统 UnionFS。<br>bootfs(boot file system) 主要包含 bootloader 和 kernel, bootloader 主要是引导加载 kernel, Linux 刚启动时会加载 bootfs 文件系统，在 Docker 镜像的最底层是 bootfs。这一层与我们典型的 Linux/Unix 系统是一样的，包含 boot 加载器和内核。当 boot 加载完成之后整个内核就都在内存中了，此时内存的使用权已由 bootfs 转交给内核，此时系统也会卸载 bootfs。  </p>
<p>rootfs (root file system) ，在 bootfs 之上。包含的就是典型 Linux 系统中的 /dev, /proc, /bin, /etc 等标准目录和文件。rootfs 就是各种不同的操作系统发行版，比如 Ubuntu，Centos 等等。<br><img src="https://img-blog.csdnimg.cn/20190214113737836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>平时我们安装进虚拟机的 CentOS 都是好几个 G，为什么 docker 这里才 200M？？</p>
<p><img src="https://img-blog.csdnimg.cn/20190214113755754.png" alt></p>
<p>对于一个精简的 OS，rootfs 可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用 Host 的 kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的 linux 发行版, bootfs 基本是一致的, rootfs 会有差别, 因此不同的发行版可以公用 bootfs。</p>
<p>3 分层的镜像    以我们的 pull 为例，在下载的过程中我们可以看到 docker 的镜像好像是在一层一层的在下载</p>
<p>4 为什么 Docker 镜像要采用这种分层结构呢   </p>
<p> 最大的一个好处就是 - 共享资源<br>比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份 base 镜像，<br>同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p>
<p>5 特点 </p>
<p>Docker 镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作 “容器层”，“容器层” 之下的都都叫“镜像层”。</p>
<p>6 Docker 镜像 commit 操作补充</p>
<p>   docker commit 提交容器副本使之成为一个新的镜像，</p>
<p>   docker commit -m=“提交的描述信息” -a=“作者” 容器 ID 要创建的目标镜像名:[标签名]</p>
<p>案例演示：1. 从 Hub 上下载 tomcat 镜像到本地并成功运行</p>
<pre><code>       ![](https://img-blog.csdnimg.cn/20190214114705728.png)

       ![](https://img-blog.csdnimg.cn/20190214114722149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70)

     docker run -it -p 8080:8080 tomcat  （-p 主机端口: docker 容器端口  -P 随机分配端口 i: 交互 t: 终端）

2 故意删除上一步镜像生产 tomcat 容器的文档</code></pre><p><img src="https://img-blog.csdnimg.cn/2019021411482882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p><img src="https://img-blog.csdnimg.cn/20190214114927281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>3 也即当前的 tomcat 运行实例是一个没有文档内容的容器，<br>以它为模板 commit 一个没有 doc 的 tomcat 新镜像 atguigu/tomcat02</p>
<p><img src="https://img-blog.csdnimg.cn/2019021411501271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p> 4 启动我们的新镜像并和原来的对比 </p>
<p>启动 atguigu/tomcat02，它没有 docs </p>
<p>  <img src="https://img-blog.csdnimg.cn/20190214115054177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>新启动原来的 tomcat，它有 docs</p>
<p><img src="https://img-blog.csdnimg.cn/20190214115125226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p><em><strong>五）docker 容器数据卷</strong></em></p>
<p>一 是什么    一句话：有点类似我们 Redis 里面的 rdb 和 aof 文件</p>
<p>先来看看 Docker 的理念：  </p>
<ul>
<li>将应用与运行的环境打包形成容器运行 ，运行可以伴随着容器，但是我们对数据的要求希望是持久化的  </li>
<li>容器之间希望有可能共享数据</li>
</ul>
<p>Docker 容器产生的数据，如果不通过 docker commit 生成新的镜像，使得数据做为镜像的一部分保存下来，<br>那么当容器删除后，数据自然也就没有了。</p>
<p>为了能保存数据在 docker 中我们使用卷。</p>
<p>二  能干嘛</p>
<p>卷就是目录或文件，存在于一个或多个容器中，由 docker 挂载到容器，但不属于联合文件系统，因此能够绕过 Union File System 提供一些用于持续存储或共享数据的特性：  </p>
<p> 卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此 Docker 不会在容器删除时删除其挂载的数据卷</p>
<p>特点：<br>1：数据卷可在容器之间共享或重用数据<br>2：卷中的更改可以直接生效<br>3：数据卷中的更改不会包含在镜像的更新中<br>4：数据卷的生命周期一直持续到没有容器使用它为止</p>
<p>容器的持久化     容器间继承 + 共享数据</p>
<p>三 数据卷  </p>
<p> 容器内添加  </p>
<p>1 直接命令添加    docker run -it -v / 宿主机绝对路径目录:/ 容器内目录      镜像名</p>
<p> docker run -it -v / 宿主机目录:/ 容器内目录 centos /bin/bash  </p>
<p><img src="https://img-blog.csdnimg.cn/20190214134145329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p> 查看数据卷是否挂载成功</p>
<p>docker inspect 容器 ID<br><img src="https://img-blog.csdnimg.cn/20190214134333345.png" alt></p>
<p>容器和宿主机之间数据共享</p>
<p><img src="https://img-blog.csdnimg.cn/2019021413571710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>容器停止退出后，主机修改后数据是否同步</p>
<p><img src="https://img-blog.csdnimg.cn/20190214140007105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>容器重启后，会从挂载目录加载数据</p>
<p>2  DockerFile 添加</p>
<p>2.1 根目录下新建 mydocker 文件夹并进入</p>
<p>2.2 可在 Dockerfile 中使用 VOLUME 指令来给镜像添加一个或多个数据卷</p>
<p>VOLUME[“/dataVolumeContainer”,”/dataVolumeContainer2”,”/dataVolumeContainer3”]  </p>
<p>说明：  </p>
<p>出于可移植和分享的考虑，用 - v 主机目录: 容器目录这种方法不能够直接在 Dockerfile 中实现。<br>由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有的宿主机上都存在这样的特定目录。</p>
<p>2.3 File 构建</p>
<p><img src="https://img-blog.csdnimg.cn/20190214141323857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<h1 id="volume-test"><a href="#volume-test" class="headerlink" title="volume test"></a>volume test</h1><p>FROM centos<br>VOLUME [“/dataVolumeContainer1”,”/dataVolumeContainer2”]<br>CMD echo “finished,——–success1”<br>CMD /bin/bash</p>
<p>2.4build 后生成镜像   获得一个新镜像 zzyy/centos</p>
<p><img src="https://img-blog.csdnimg.cn/20190214141454715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>2.5 run 容器</p>
<p><img src="https://img-blog.csdnimg.cn/20190214143107297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>2.6 通过上述步骤，容器内的卷目录地址已经知道<br>对应的主机目录地址哪？？</p>
<p><img src="https://img-blog.csdnimg.cn/20190214143740907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p><img src="https://img-blog.csdnimg.cn/20190214143728781.png" alt></p>
<p>2.7 主机对应默认地址</p>
<p><img src="https://img-blog.csdnimg.cn/20190214143504748.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>2.8 备注  Docker 挂载主机目录 Docker 访问出现 cannot open directory .: Permission denied<br>解决办法：在挂载目录后多加一个 –privileged=true 参数即可</p>
<p>四 数据卷容器</p>
<ol>
<li>是什么</li>
</ol>
<p>命名的容器挂载数据卷，其它容器通过挂载这个 (父容器) 实现数据共享，挂载数据卷的容器，称之为数据卷容器</p>
<ol start="2">
<li>总体介绍</li>
</ol>
<p>以上一步新建的镜像 zzyy/centos 为模板并运行容器 dc01/dc02/dc03</p>
<p>它们已经具有容器卷  /dataVolumeContainer1   /dataVolumeContainer2</p>
<p>3 容器间传递共享 (–volumes-from)</p>
<p>3.1 先启动一个父容器 dc01  在 dataVolumeContainer2 新增内容</p>
<p><img src="https://img-blog.csdnimg.cn/20190214144519358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>3.2 dc02/dc03 继承自 dc01    –volumes-from</p>
<p>docker run -it –name dc02 –volumes-from dc01 zzyy/centos</p>
<p><img src="https://img-blog.csdnimg.cn/20190214144709190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>dc02/dc03 分别在 dataVolumeContainer2 各自新增内容</p>
<p>3.3 回到 dc01 可以看到 02/03 各自添加的都能共享了</p>
<p><img src="https://img-blog.csdnimg.cn/20190214153443980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>3.4 删除 dc01，dc02 修改后 dc03 可否访问</p>
<p><img src="https://img-blog.csdnimg.cn/20190214153718436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>3.5 删除 dc02 后 dc03 可否访问</p>
<p><img src="https://img-blog.csdnimg.cn/20190214153758529.png" alt></p>
<p>3.6 新建 dc04 继承 dc03 后再删除 dc03</p>
<p><img src="https://img-blog.csdnimg.cn/20190214153817567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>3.7 结论：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止</p>
<p><em><strong>六）DockerFile 解析</strong></em></p>
<ol>
<li>是什么   Dockerfile 是用来构建 Docker 镜像的构建文件，是由一系列命令和参数构成的脚本（不同于 shell 脚本，他的一个命令会生成一个容器，修改提交生成镜像，再删除这个临时的容器）。</li>
</ol>
<p>构建三步骤  1.1 编写 Dockerfile 文件 1.2 docker build  1.3 docker run</p>
<p>2.DockerFile 构建过程解析 </p>
<p>   2.1 Dockerfile 内容基础知识 </p>
<pre><code> 2.1 .1：每条保留字指令都必须为大写字母且后面要跟随至少一个参数

 2.1.2：指令按照从上到下，顺序执行

 2.1.3：# 表示注释

2.1.4：每条指令都会创建一个新的镜像层，并对镜像进行提交</code></pre><p>  2.2 Docker 执行 Dockerfile 的大致流程</p>
<p>   （1）docker 从基础镜像运行一个容器</p>
<p>   （2）执行一条指令并对容器作出修改</p>
<p>   （3）执行类似 docker commit 的操作提交一个新的镜像层 (另一种说法是 对容器 执行 docker commit 操作 生成新的镜像层，删           除这个容器)</p>
<p>  （4）docker 再基于刚提交的镜像运行一个新容器</p>
<p>   （5）执行 dockerfile 中的下一条指令直到所有指令都执行完成</p>
<p>  2.3. 小总结</p>
<p>从应用软件的角度来看，Dockerfile、Docker 镜像与 Docker 容器分别代表软件的三个不同阶段，  </p>
<ul>
<li>Dockerfile 是软件的原材料（比如说：建房子，原材料，钢材，木料等等）  </li>
<li>Docker 镜像是软件的交付品（建好的别墅，交付了（未拆封的））  </li>
<li>Docker 容器则可以认为是软件的运行态。（客户购买，拎包入住了（提供服务））<br>Dockerfile 面向开发，Docker 镜像成为交付标准，Docker 容器则涉及部署与运维，三者缺一不可，合力充当 Docker 体系的基石。</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190214160419792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<pre><code> 2.3.1 Dockerfile，需要定义一个 Dockerfile，Dockerfile 定义了进程需要的一切东西。Dockerfile 涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程 (当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计 namespace 的权限控制) 等等;  

2.3. 2 Docker 镜像，在用 Dockerfile 定义一个文件之后，docker build 时会产生一个 Docker 镜像，当运行 Docker 镜像时，会真正开始提供服务;  

 2.3.3 Docker 容器，容器是直接提供服务的。</code></pre><p>3.DockerFile 体系结构 (保留字指令)</p>
<p> FROM   基础镜像，当前新镜像是基于哪个镜像的</p>
<p> MAINTAINER 镜像维护者的姓名和邮箱地址</p>
<p> RUN 容器构建时需要运行的命令</p>
<p> EXPOSE 当前容器对外暴露出的端口</p>
<p> WORKDIR  指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</p>
<p> ENV 用来在构建镜像过程中设置环境变量  </p>
<pre><code>ENV MY_PATH /usr/mytest  
这个环境变量可以在后续的任何 RUN 指令中使用，这就如同在命令前面指定了环境变量前缀一样；  
也可以在其它指令中直接使用这些环境变量， 比如：WORKDIR $MY_PATH</code></pre><p>ADD  将宿主机目录下的文件拷贝进镜像且 ADD 命令会自动处理 URL 和解压 tar 压缩包</p>
<p>COPY    类似 ADD，拷贝文件和目录到镜像中。将从构建上下文目录中 &lt;源路径&gt; 的文件 / 目录复制到新的一层的镜像内的 &lt; 目标                路径 &gt; 位置  COPY src dest       COPY [“src”, “dest”]</p>
<p>VOLUME   容器数据卷，用于数据保存和持久化工作</p>
<p>CMD  指定一个容器启动时要运行的命令   Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之            后的参数替换</p>
<p>ENTRYPOINT  指定一个容器启动时要运行的命令   ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数</p>
<p>ONBUILD 当构建一个被继承的 Dockerfile 时运行命令，父镜像在被子继承后父镜像的 onbuild 被触发</p>
<p><img src="https://img-blog.csdnimg.cn/20190214162115323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p><img src="https://img-blog.csdnimg.cn/20190214162216304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>小结：<img src="https://img-blog.csdnimg.cn/20190214162419182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<ol start="4">
<li>案例</li>
</ol>
<p>4.1 Base 镜像 (scratch)</p>
<p> Docker Hub 中 99% 的镜像都是通过在 base 镜像中安装和配置需要的软件构建出来的</p>
<p><img src="https://img-blog.csdnimg.cn/2019021416524882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>4.2 自定义镜像 mycentos</p>
<p>4.2.1 编写  </p>
<pre><code>Hub 默认 CentOS 镜像什么情况</code></pre><p><img src="https://img-blog.csdnimg.cn/20190214165411175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>准备编写 DockerFile 文件</p>
<p><img src="https://img-blog.csdnimg.cn/20190214165432255.png" alt></p>
<p>myCentOS 内容 DockerFile</p>
<p><img src="https://img-blog.csdnimg.cn/20190214165514558.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>FROM centos<br>MAINTAINER zzyy<a href="mailto:&#122;&#122;&#x79;&#x79;&#49;&#x36;&#x37;&#64;&#49;&#x32;&#x36;&#x2e;&#99;&#x6f;&#x6d;">&#122;&#122;&#x79;&#x79;&#49;&#x36;&#x37;&#64;&#49;&#x32;&#x36;&#x2e;&#99;&#x6f;&#x6d;</a>  </p>
<p>ENV MYPATH /usr/local<br>WORKDIR $MYPATH  </p>
<p>RUN yum -y install vim<br>RUN yum -y install net-tools  </p>
<p>EXPOSE 80  </p>
<p>CMD echo $MYPATH<br>CMD echo “success————–ok”<br>CMD /bin/bash<br>4.2.2 构建</p>
<p>docker build -t 新镜像名字: TAG .    会看到 docker build 命令最后有一个 .                                   . 表示当前目录</p>
<p><img src="https://img-blog.csdnimg.cn/20190214165726577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p><img src="https://img-blog.csdnimg.cn/20190214165739181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>4.2.3 运行 docker run -it 新镜像名字: TAG   可以看到，我们自己的新镜像已经支持 vim/ifconfig 命令，扩展成功了。</p>
<p><img src="https://img-blog.csdnimg.cn/20190214165959936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>4.2.4 列出镜像的变更历史   docker history 镜像名</p>
<p>4.3  CMD/ENTRYPOINT 镜像案例</p>
<p>4.3.1 都是指定一个容器启动时要运行的命令</p>
<p>4.3.2 CMD   Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换</p>
<pre><code>ENTRYPOINT  docker run 之后的参数会被当做参数传递给 ENTRYPOINT，之后形成新的命令组合</code></pre><p><img src="https://img-blog.csdnimg.cn/20190214170338486.png" alt></p>
<p>4.3.3 栗子</p>
<p>  制作 CMD 版可以查询 IP 信息的容器</p>
<p>   FROM centos<br>  RUN yum install -y curl<br>  CMD [“curl”, “-s”, “<a href="http://ip.cn&quot;]" target="_blank" rel="noopener">http://ip.cn&quot;]</a></p>
<p><img src="https://img-blog.csdnimg.cn/20190214170503416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>curl 命令可以用来执行下载、发送各种 HTTP 请求，指定 HTTP 头部等操作。<br>如果系统没有 curl 可以使用 yum install curl 安装，也可以下载安装。<br>curl 是将下载文件输出到 stdout  </p>
<p>使用命令：curl <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a><br>执行后，<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 的 html 就会显示在屏幕上了  </p>
<p>这是最简单的使用方法。用这个命令获得了 <a href="http://curl.haxx.se" target="_blank" rel="noopener">http://curl.haxx.se</a> 指向的页面，同样，如果这里的 URL 指向的是一个文件或者一幅图都可以直接下载到本地。如果下载的是 HTML 文档，那么缺省的将只显示文件头部，即 HTML 文档的 header。要全部显示，请加参数 -i</p>
<p><img src="https://img-blog.csdnimg.cn/20190214170735369.png" alt></p>
<p>我们可以看到可执行文件找不到的报错，executable file not found。<br>之前我们说过，跟在镜像名后面的是 command，运行时会替换 CMD 的默认值。<br>因此这里的 -i 替换了原来的 CMD，而不是添加在原来的 curl -s <a href="http://ip.cn" target="_blank" rel="noopener">http://ip.cn</a> 后面。而 -i 根本不是命令，所以自然找不到。  </p>
<p>那么如果我们希望加入 -i 这参数，我们就必须重新完整的输入这个命令：  </p>
<p>$ docker run myip curl -s <a href="http://ip.cn" target="_blank" rel="noopener">http://ip.cn</a> -i  </p>
<p>4.4 自定义镜像 Tomcat9</p>
<p>4.4.1 mkdir -p /zzyyuse/mydockerfile/tomcat9</p>
<p>4.4.2 在上述目录下 touch c.txt</p>
<p>4.4.3   将 jdk 和 tomcat 安装的压缩包拷贝进上一步目录   apache-tomcat-9.0.8.tar.gz    jdk-8u171-linux-x64.tar.gz</p>
<pre><code>![](https://img-blog.csdnimg.cn/20190214171230201.png)

![](https://img-blog.csdnimg.cn/20190214171219614.png)</code></pre><p>4.4.4 在 / zzyyuse/mydockerfile/tomcat9 目录下新建 Dockerfile 文件</p>
<pre><code>目录内容  ![](https://img-blog.csdnimg.cn/20190214171357585.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70)</code></pre><p>4.4.5 构建</p>
<p><img src="https://img-blog.csdnimg.cn/20190214171443522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>构建完成</p>
<p><img src="https://img-blog.csdnimg.cn/20190214171612560.png" alt></p>
<p>4.4.6 run<br>docker run -d -p 9080:8080 –name myt9 -v /zzyyuse/mydockerfile/tomcat9/test:/usr/local/apache-tomcat-9.0.8/webapps/test -v /zzyyuse/mydockerfile/tomcat9/tomcat9logs/:/usr/local/apache-tomcat-9.0.8/logs –privileged=true zzyytomcat9</p>
<p><img src="https://img-blog.csdnimg.cn/20190214171703915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>备注：<br>Docker 挂载主机目录 Docker 访问出现 cannot open directory .: Permission denied<br>解决办法：在挂载目录后多加一个 –privileged=true 参数即可</p>
<p>4.4.7 验证 </p>
<p><img src="https://img-blog.csdnimg.cn/20190214171846844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>4.4.8 结合前述的容器卷将测试的 web 服务 test 发布</p>
<pre><code>总体概述</code></pre><p><img src="https://img-blog.csdnimg.cn/20190214172108120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>web.xml</p>
<?xml version="1.0" encoding="UTF-8"?><p><br><web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemalocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">  </web-app></p>
<p>  <display-name>test</display-name>  </p>


<p>a.jsp</p>
<p>&lt;%@ page language=”java” contentType=”text/html; charset=UTF-8” pageEncoding=”UTF-8”%&gt;<br><!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">  </p>
<html>  
  <head>  
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">  
    <title>Insert title here</title>  
  </head>  
  <body>  
    -----------welcome------------  
    <%="i am in docker tomcat self"%>  
    <br>  
    <br>  
    <% system.out.println("="============docker" tomcat self");%>  
  <script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","model":{"jsonPath":"/live2dw/assets/wanko.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"log":false,"tagMode":false});</script></%></%="i></body>  
</html>

<p>测试</p>
<p><img src="https://img-blog.csdnimg.cn/20190214172230640.png" alt></p>
<p>4.5</p>
<p>总结：</p>
<p><img src="https://img-blog.csdnimg.cn/20190214172405655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p><em><strong>七）Docker 常用安装</strong></em></p>
<ol>
<li>总体步骤</li>
</ol>
<p>搜索镜像  拉取镜像  查看镜像  启动镜像 停止容器  移除容器</p>
<ol start="2">
<li>安装 tomcat </li>
</ol>
<p>2.1 docker hub 上面查找 tomcat 镜像   docker search tomcat</p>
<p><img src="https://img-blog.csdnimg.cn/20190214174229956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>2.2 从 docker hub 上拉取 tomcat 镜像到本地 docker pull tomcat</p>
<p>2.3 docker images 查看是否有拉取到的 tomcat</p>
<p><img src="https://img-blog.csdnimg.cn/20190214174355562.png" alt></p>
<p>2.4 使用 tomcat 镜像创建容器 (也叫运行镜像)   docker run -it -p 8080:8080 tomcat</p>
<p>-p 主机端口: docker 容器端口   -P 随机分配端口   i: 交互  t: 终端</p>
<p><img src="https://img-blog.csdnimg.cn/20190214174512677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<ol start="3">
<li>安装 mysql</li>
</ol>
<p>3.1 docker hub 上面查找 mysql 镜像</p>
<p><img src="https://img-blog.csdnimg.cn/20190214174613187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>3.2 从 docker hub 上 (阿里云加速器) 拉取 mysql 镜像到本地标签为 5.6</p>
<p><img src="https://img-blog.csdnimg.cn/20190214174653715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>3.3 使用 mysql5.6 镜像创建容器 (也叫运行镜像)</p>
<p>3.3.1 使用 mysql 镜像</p>
<p>docker run -p 12345:3306 –name mysql -v /zzyyuse/mysql/conf:/etc/mysql/conf.d -v /zzyyuse/mysql/logs:/logs -v /zzyyuse/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6  </p>
<p>命令说明：<br>-p 12345:3306：将主机的 12345 端口映射到 docker 容器的 3306 端口。<br>–name mysql：运行服务名字<br>-v /zzyyuse/mysql/conf:/etc/mysql/conf.d ：将主机 / zzyyuse/mysql 录下的 conf/my.cnf 挂载到容器的 /etc/mysql/conf.d<br>-v /zzyyuse/mysql/logs:/logs：将主机 / zzyyuse/mysql 目录下的 logs 目录挂载到容器的 /logs。<br>-v /zzyyuse/mysql/data:/var/lib/mysql ：将主机 / zzyyuse/mysql 目录下的 data 目录挂载到容器的 /var/lib/mysql<br>-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。<br>-d mysql:5.6 : 后台程序运行 mysql5.6</p>
<p>docker exec -it MySQL 运行成功后的容器 ID     /bin/bash</p>
<p><img src="https://img-blog.csdnimg.cn/20190214174921883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>3.3.2  外部 Win10 也来连接运行在 dokcer 上的 mysql 服务</p>
<p><img src="https://img-blog.csdnimg.cn/20190214175021950.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p> 3.3.3 数据备份小测试 (可以不做)<br>docker exec myql 服务容器 ID sh -c ‘exec mysqldump –all-databases -uroot -p”123456” ‘ &gt; /zzyyuse/all-databases.sql</p>
<ol start="4">
<li>安装 redis</li>
</ol>
<p>4.1 从 docker hub 上 (阿里云加速器) 拉取 redis 镜像到本地标签为 3.2</p>
<p><img src="https://img-blog.csdnimg.cn/20190214175217730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>4.2 使用 redis3.2 镜像创建容器 (也叫运行镜像)</p>
<p>4.2.1 使用镜像  </p>
<p>docker run -p 6379:6379 -v /zzyyuse/myredis/data:/data -v /zzyyuse/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf  -d redis:3.2 redis-server /usr/local/etc/redis/redis.conf –appendonly yes</p>
<p><img src="https://img-blog.csdnimg.cn/20190214175525322.png" alt></p>
<p>4.2.2 在主机 / zzyyuse/myredis/conf/redis.conf 目录下新建 redis.conf 文件<br>vim /zzyyuse/myredis/conf/redis.conf/redis.conf</p>
<h1 id="Redis-configuration-file-example"><a href="#Redis-configuration-file-example" class="headerlink" title="Redis configuration file example."></a>Redis configuration file example.</h1><h1 id><a href="#" class="headerlink" title></a></h1><h1 id="Note-that-in-order-to-read-the-configuration-file-Redis-must-be"><a href="#Note-that-in-order-to-read-the-configuration-file-Redis-must-be" class="headerlink" title="Note that in order to read the configuration file, Redis must be"></a>Note that in order to read the configuration file, Redis must be</h1><h1 id="started-with-the-file-path-as-first-argument"><a href="#started-with-the-file-path-as-first-argument" class="headerlink" title="started with the file path as first argument:"></a>started with the file path as first argument:</h1><h1 id="-1"><a href="#-1" class="headerlink" title></a></h1><h1 id="redis-server-path-to-redis-conf"><a href="#redis-server-path-to-redis-conf" class="headerlink" title="./redis-server /path/to/redis.conf"></a>./redis-server /path/to/redis.conf</h1><h1 id="Note-on-units-when-memory-size-is-needed-it-is-possible-to-specify"><a href="#Note-on-units-when-memory-size-is-needed-it-is-possible-to-specify" class="headerlink" title="Note on units: when memory size is needed, it is possible to specify"></a>Note on units: when memory size is needed, it is possible to specify</h1><h1 id="it-in-the-usual-form-of-1k-5GB-4M-and-so-forth"><a href="#it-in-the-usual-form-of-1k-5GB-4M-and-so-forth" class="headerlink" title="it in the usual form of 1k 5GB 4M and so forth:"></a>it in the usual form of 1k 5GB 4M and so forth:</h1><h1 id="-2"><a href="#-2" class="headerlink" title></a></h1><h1 id="1k-gt-1000-bytes"><a href="#1k-gt-1000-bytes" class="headerlink" title="1k =&gt; 1000 bytes"></a>1k =&gt; 1000 bytes</h1><h1 id="1kb-gt-1024-bytes"><a href="#1kb-gt-1024-bytes" class="headerlink" title="1kb =&gt; 1024 bytes"></a>1kb =&gt; 1024 bytes</h1><h1 id="1m-gt-1000000-bytes"><a href="#1m-gt-1000000-bytes" class="headerlink" title="1m =&gt; 1000000 bytes"></a>1m =&gt; 1000000 bytes</h1><h1 id="1mb-gt-1024-1024-bytes"><a href="#1mb-gt-1024-1024-bytes" class="headerlink" title="1mb =&gt; 1024*1024 bytes"></a>1mb =&gt; 1024*1024 bytes</h1><h1 id="1g-gt-1000000000-bytes"><a href="#1g-gt-1000000000-bytes" class="headerlink" title="1g =&gt; 1000000000 bytes"></a>1g =&gt; 1000000000 bytes</h1><h1 id="1gb-gt-102410241024-bytes"><a href="#1gb-gt-102410241024-bytes" class="headerlink" title="1gb =&gt; 102410241024 bytes"></a>1gb =&gt; 1024<em>1024</em>1024 bytes</h1><h1 id="-3"><a href="#-3" class="headerlink" title></a></h1><h1 id="units-are-case-insensitive-so-1GB-1Gb-1gB-are-all-the-same"><a href="#units-are-case-insensitive-so-1GB-1Gb-1gB-are-all-the-same" class="headerlink" title="units are case insensitive so 1GB 1Gb 1gB are all the same."></a>units are case insensitive so 1GB 1Gb 1gB are all the same.</h1><p>################################## INCLUDES ###################################  </p>
<h1 id="Include-one-or-more-other-config-files-here-This-is-useful-if-you"><a href="#Include-one-or-more-other-config-files-here-This-is-useful-if-you" class="headerlink" title="Include one or more other config files here.  This is useful if you"></a>Include one or more other config files here.  This is useful if you</h1><h1 id="have-a-standard-template-that-goes-to-all-Redis-servers-but-also-need"><a href="#have-a-standard-template-that-goes-to-all-Redis-servers-but-also-need" class="headerlink" title="have a standard template that goes to all Redis servers but also need"></a>have a standard template that goes to all Redis servers but also need</h1><h1 id="to-customize-a-few-per-server-settings-Include-files-can-include"><a href="#to-customize-a-few-per-server-settings-Include-files-can-include" class="headerlink" title="to customize a few per-server settings.  Include files can include"></a>to customize a few per-server settings.  Include files can include</h1><h1 id="other-files-so-use-this-wisely"><a href="#other-files-so-use-this-wisely" class="headerlink" title="other files, so use this wisely."></a>other files, so use this wisely.</h1><h1 id="-4"><a href="#-4" class="headerlink" title></a></h1><h1 id="Notice-option-“include”-won’t-be-rewritten-by-command”CONFIG-REWRITE”"><a href="#Notice-option-“include”-won’t-be-rewritten-by-command”CONFIG-REWRITE”" class="headerlink" title="Notice option “include” won’t be rewritten by command”CONFIG REWRITE”"></a>Notice option “include” won’t be rewritten by command”CONFIG REWRITE”</h1><h1 id="from-admin-or-Redis-Sentinel-Since-Redis-always-uses-the-last-processed"><a href="#from-admin-or-Redis-Sentinel-Since-Redis-always-uses-the-last-processed" class="headerlink" title="from admin or Redis Sentinel. Since Redis always uses the last processed"></a>from admin or Redis Sentinel. Since Redis always uses the last processed</h1><h1 id="line-as-value-of-a-configuration-directive-you’d-better-put-includes"><a href="#line-as-value-of-a-configuration-directive-you’d-better-put-includes" class="headerlink" title="line as value of a configuration directive, you’d better put includes"></a>line as value of a configuration directive, you’d better put includes</h1><h1 id="at-the-beginning-of-this-file-to-avoid-overwriting-config-change-at-runtime"><a href="#at-the-beginning-of-this-file-to-avoid-overwriting-config-change-at-runtime" class="headerlink" title="at the beginning of this file to avoid overwriting config change at runtime."></a>at the beginning of this file to avoid overwriting config change at runtime.</h1><h1 id="-5"><a href="#-5" class="headerlink" title></a></h1><h1 id="If-instead-you-are-interested-in-using-includes-to-override-configuration"><a href="#If-instead-you-are-interested-in-using-includes-to-override-configuration" class="headerlink" title="If instead you are interested in using includes to override configuration"></a>If instead you are interested in using includes to override configuration</h1><h1 id="options-it-is-better-to-use-include-as-the-last-line"><a href="#options-it-is-better-to-use-include-as-the-last-line" class="headerlink" title="options, it is better to use include as the last line."></a>options, it is better to use include as the last line.</h1><h1 id="-6"><a href="#-6" class="headerlink" title></a></h1><h1 id="include-path-to-local-conf"><a href="#include-path-to-local-conf" class="headerlink" title="include /path/to/local.conf"></a>include /path/to/local.conf</h1><h1 id="include-path-to-other-conf"><a href="#include-path-to-other-conf" class="headerlink" title="include /path/to/other.conf"></a>include /path/to/other.conf</h1><p>################################## NETWORK #####################################  </p>
<h1 id="By-default-if-no-“bind”-configuration-directive-is-specified-Redis-listens"><a href="#By-default-if-no-“bind”-configuration-directive-is-specified-Redis-listens" class="headerlink" title="By default, if no “bind” configuration directive is specified, Redis listens"></a>By default, if no “bind” configuration directive is specified, Redis listens</h1><h1 id="for-connections-from-all-the-network-interfaces-available-on-the-server"><a href="#for-connections-from-all-the-network-interfaces-available-on-the-server" class="headerlink" title="for connections from all the network interfaces available on the server."></a>for connections from all the network interfaces available on the server.</h1><h1 id="It-is-possible-to-listen-to-just-one-or-multiple-selected-interfaces-using"><a href="#It-is-possible-to-listen-to-just-one-or-multiple-selected-interfaces-using" class="headerlink" title="It is possible to listen to just one or multiple selected interfaces using"></a>It is possible to listen to just one or multiple selected interfaces using</h1><h1 id="the-“bind”-configuration-directive-followed-by-one-or-more-IP-addresses"><a href="#the-“bind”-configuration-directive-followed-by-one-or-more-IP-addresses" class="headerlink" title="the “bind” configuration directive, followed by one or more IP addresses."></a>the “bind” configuration directive, followed by one or more IP addresses.</h1><h1 id="-7"><a href="#-7" class="headerlink" title></a></h1><h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h1><h1 id="-8"><a href="#-8" class="headerlink" title></a></h1><h1 id="bind-192-168-1-100-10-0-0-1"><a href="#bind-192-168-1-100-10-0-0-1" class="headerlink" title="bind 192.168.1.100 10.0.0.1"></a>bind 192.168.1.100 10.0.0.1</h1><h1 id="bind-127-0-0-1-1"><a href="#bind-127-0-0-1-1" class="headerlink" title="bind 127.0.0.1 ::1"></a>bind 127.0.0.1 ::1</h1><h1 id="-9"><a href="#-9" class="headerlink" title></a></h1><h1 id="WARNING-If-the-computer-running-Redis-is-directly-exposed-to-the"><a href="#WARNING-If-the-computer-running-Redis-is-directly-exposed-to-the" class="headerlink" title="~ WARNING ~ If the computer running Redis is directly exposed to the"></a><del>~ WARNING ~</del> If the computer running Redis is directly exposed to the</h1><h1 id="internet-binding-to-all-the-interfaces-is-dangerous-and-will-expose-the"><a href="#internet-binding-to-all-the-interfaces-is-dangerous-and-will-expose-the" class="headerlink" title="internet, binding to all the interfaces is dangerous and will expose the"></a>internet, binding to all the interfaces is dangerous and will expose the</h1><h1 id="instance-to-everybody-on-the-internet-So-by-default-we-uncomment-the"><a href="#instance-to-everybody-on-the-internet-So-by-default-we-uncomment-the" class="headerlink" title="instance to everybody on the internet. So by default we uncomment the"></a>instance to everybody on the internet. So by default we uncomment the</h1><h1 id="following-bind-directive-that-will-force-Redis-to-listen-only-into"><a href="#following-bind-directive-that-will-force-Redis-to-listen-only-into" class="headerlink" title="following bind directive, that will force Redis to listen only into"></a>following bind directive, that will force Redis to listen only into</h1><h1 id="the-IPv4-lookback-interface-address-this-means-Redis-will-be-able-to"><a href="#the-IPv4-lookback-interface-address-this-means-Redis-will-be-able-to" class="headerlink" title="the IPv4 lookback interface address (this means Redis will be able to"></a>the IPv4 lookback interface address (this means Redis will be able to</h1><h1 id="accept-connections-only-from-clients-running-into-the-same-computer-it"><a href="#accept-connections-only-from-clients-running-into-the-same-computer-it" class="headerlink" title="accept connections only from clients running into the same computer it"></a>accept connections only from clients running into the same computer it</h1><h1 id="is-running"><a href="#is-running" class="headerlink" title="is running)."></a>is running).</h1><h1 id="-10"><a href="#-10" class="headerlink" title></a></h1><h1 id="IF-YOU-ARE-SURE-YOU-WANT-YOUR-INSTANCE-TO-LISTEN-TO-ALL-THE-INTERFACES"><a href="#IF-YOU-ARE-SURE-YOU-WANT-YOUR-INSTANCE-TO-LISTEN-TO-ALL-THE-INTERFACES" class="headerlink" title="IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES"></a>IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</h1><h1 id="JUST-COMMENT-THE-FOLLOWING-LINE"><a href="#JUST-COMMENT-THE-FOLLOWING-LINE" class="headerlink" title="JUST COMMENT THE FOLLOWING LINE."></a>JUST COMMENT THE FOLLOWING LINE.</h1><h1 id="-11"><a href="#-11" class="headerlink" title="~"></a><del>~</del></h1><p>#bind 127.0.0.1  </p>
<h1 id="Protected-mode-is-a-layer-of-security-protection-in-order-to-avoid-that"><a href="#Protected-mode-is-a-layer-of-security-protection-in-order-to-avoid-that" class="headerlink" title="Protected mode is a layer of security protection, in order to avoid that"></a>Protected mode is a layer of security protection, in order to avoid that</h1><h1 id="Redis-instances-left-open-on-the-internet-are-accessed-and-exploited"><a href="#Redis-instances-left-open-on-the-internet-are-accessed-and-exploited" class="headerlink" title="Redis instances left open on the internet are accessed and exploited."></a>Redis instances left open on the internet are accessed and exploited.</h1><h1 id="-12"><a href="#-12" class="headerlink" title></a></h1><h1 id="When-protected-mode-is-on-and-if"><a href="#When-protected-mode-is-on-and-if" class="headerlink" title="When protected mode is on and if:"></a>When protected mode is on and if:</h1><h1 id="-13"><a href="#-13" class="headerlink" title></a></h1><h1 id="1-The-server-is-not-binding-explicitly-to-a-set-of-addresses-using-the"><a href="#1-The-server-is-not-binding-explicitly-to-a-set-of-addresses-using-the" class="headerlink" title="1) The server is not binding explicitly to a set of addresses using the"></a>1) The server is not binding explicitly to a set of addresses using the</h1><h1 id="“bind”-directive"><a href="#“bind”-directive" class="headerlink" title="“bind” directive."></a>“bind” directive.</h1><h1 id="2-No-password-is-configured"><a href="#2-No-password-is-configured" class="headerlink" title="2) No password is configured."></a>2) No password is configured.</h1><h1 id="-14"><a href="#-14" class="headerlink" title></a></h1><h1 id="The-server-only-accepts-connections-from-clients-connecting-from-the"><a href="#The-server-only-accepts-connections-from-clients-connecting-from-the" class="headerlink" title="The server only accepts connections from clients connecting from the"></a>The server only accepts connections from clients connecting from the</h1><h1 id="IPv4-and-IPv6-loopback-addresses-127-0-0-1-and-1-and-from-Unix-domain"><a href="#IPv4-and-IPv6-loopback-addresses-127-0-0-1-and-1-and-from-Unix-domain" class="headerlink" title="IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain"></a>IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</h1><h1 id="sockets"><a href="#sockets" class="headerlink" title="sockets."></a>sockets.</h1><h1 id="-15"><a href="#-15" class="headerlink" title></a></h1><h1 id="By-default-protected-mode-is-enabled-You-should-disable-it-only-if"><a href="#By-default-protected-mode-is-enabled-You-should-disable-it-only-if" class="headerlink" title="By default protected mode is enabled. You should disable it only if"></a>By default protected mode is enabled. You should disable it only if</h1><h1 id="you-are-sure-you-want-clients-from-other-hosts-to-connect-to-Redis"><a href="#you-are-sure-you-want-clients-from-other-hosts-to-connect-to-Redis" class="headerlink" title="you are sure you want clients from other hosts to connect to Redis"></a>you are sure you want clients from other hosts to connect to Redis</h1><h1 id="even-if-no-authentication-is-configured-nor-a-specific-set-of-interfaces"><a href="#even-if-no-authentication-is-configured-nor-a-specific-set-of-interfaces" class="headerlink" title="even if no authentication is configured, nor a specific set of interfaces"></a>even if no authentication is configured, nor a specific set of interfaces</h1><h1 id="are-explicitly-listed-using-the-“bind”-directive"><a href="#are-explicitly-listed-using-the-“bind”-directive" class="headerlink" title="are explicitly listed using the “bind” directive."></a>are explicitly listed using the “bind” directive.</h1><p>protected-mode yes  </p>
<h1 id="Accept-connections-on-the-specified-port-default-is-6379-IANA-815344"><a href="#Accept-connections-on-the-specified-port-default-is-6379-IANA-815344" class="headerlink" title="Accept connections on the specified port, default is 6379 (IANA #815344)."></a>Accept connections on the specified port, default is 6379 (IANA #815344).</h1><h1 id="If-port-0-is-specified-Redis-will-not-listen-on-a-TCP-socket"><a href="#If-port-0-is-specified-Redis-will-not-listen-on-a-TCP-socket" class="headerlink" title="If port 0 is specified Redis will not listen on a TCP socket."></a>If port 0 is specified Redis will not listen on a TCP socket.</h1><p>port 6379  </p>
<h1 id="TCP-listen-backlog"><a href="#TCP-listen-backlog" class="headerlink" title="TCP listen() backlog."></a>TCP listen() backlog.</h1><h1 id="-16"><a href="#-16" class="headerlink" title></a></h1><h1 id="In-high-requests-per-second-environments-you-need-an-high-backlog-in-order"><a href="#In-high-requests-per-second-environments-you-need-an-high-backlog-in-order" class="headerlink" title="In high requests-per-second environments you need an high backlog in order"></a>In high requests-per-second environments you need an high backlog in order</h1><h1 id="to-avoid-slow-clients-connections-issues-Note-that-the-Linux-kernel"><a href="#to-avoid-slow-clients-connections-issues-Note-that-the-Linux-kernel" class="headerlink" title="to avoid slow clients connections issues. Note that the Linux kernel"></a>to avoid slow clients connections issues. Note that the Linux kernel</h1><h1 id="will-silently-truncate-it-to-the-value-of-proc-sys-net-core-somaxconn-so"><a href="#will-silently-truncate-it-to-the-value-of-proc-sys-net-core-somaxconn-so" class="headerlink" title="will silently truncate it to the value of /proc/sys/net/core/somaxconn so"></a>will silently truncate it to the value of /proc/sys/net/core/somaxconn so</h1><h1 id="make-sure-to-raise-both-the-value-of-somaxconn-and-tcp-max-syn-backlog"><a href="#make-sure-to-raise-both-the-value-of-somaxconn-and-tcp-max-syn-backlog" class="headerlink" title="make sure to raise both the value of somaxconn and tcp_max_syn_backlog"></a>make sure to raise both the value of somaxconn and tcp_max_syn_backlog</h1><h1 id="in-order-to-get-the-desired-effect"><a href="#in-order-to-get-the-desired-effect" class="headerlink" title="in order to get the desired effect."></a>in order to get the desired effect.</h1><p>tcp-backlog 511  </p>
<h1 id="Unix-socket"><a href="#Unix-socket" class="headerlink" title="Unix socket."></a>Unix socket.</h1><h1 id="-17"><a href="#-17" class="headerlink" title></a></h1><h1 id="Specify-the-path-for-the-Unix-socket-that-will-be-used-to-listen-for"><a href="#Specify-the-path-for-the-Unix-socket-that-will-be-used-to-listen-for" class="headerlink" title="Specify the path for the Unix socket that will be used to listen for"></a>Specify the path for the Unix socket that will be used to listen for</h1><h1 id="incoming-connections-There-is-no-default-so-Redis-will-not-listen"><a href="#incoming-connections-There-is-no-default-so-Redis-will-not-listen" class="headerlink" title="incoming connections. There is no default, so Redis will not listen"></a>incoming connections. There is no default, so Redis will not listen</h1><h1 id="on-a-unix-socket-when-not-specified"><a href="#on-a-unix-socket-when-not-specified" class="headerlink" title="on a unix socket when not specified."></a>on a unix socket when not specified.</h1><h1 id="-18"><a href="#-18" class="headerlink" title></a></h1><h1 id="unixsocket-tmp-redis-sock"><a href="#unixsocket-tmp-redis-sock" class="headerlink" title="unixsocket /tmp/redis.sock"></a>unixsocket /tmp/redis.sock</h1><h1 id="unixsocketperm-700"><a href="#unixsocketperm-700" class="headerlink" title="unixsocketperm 700"></a>unixsocketperm 700</h1><h1 id="Close-the-connection-after-a-client-is-idle-for-N-seconds-0-to-disable"><a href="#Close-the-connection-after-a-client-is-idle-for-N-seconds-0-to-disable" class="headerlink" title="Close the connection after a client is idle for N seconds (0 to disable)"></a>Close the connection after a client is idle for N seconds (0 to disable)</h1><p>timeout 0  </p>
<h1 id="TCP-keepalive"><a href="#TCP-keepalive" class="headerlink" title="TCP keepalive."></a>TCP keepalive.</h1><h1 id="-19"><a href="#-19" class="headerlink" title></a></h1><h1 id="If-non-zero-use-SO-KEEPALIVE-to-send-TCP-ACKs-to-clients-in-absence"><a href="#If-non-zero-use-SO-KEEPALIVE-to-send-TCP-ACKs-to-clients-in-absence" class="headerlink" title="If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence"></a>If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</h1><h1 id="of-communication-This-is-useful-for-two-reasons"><a href="#of-communication-This-is-useful-for-two-reasons" class="headerlink" title="of communication. This is useful for two reasons:"></a>of communication. This is useful for two reasons:</h1><h1 id="-20"><a href="#-20" class="headerlink" title></a></h1><h1 id="1-Detect-dead-peers"><a href="#1-Detect-dead-peers" class="headerlink" title="1) Detect dead peers."></a>1) Detect dead peers.</h1><h1 id="2-Take-the-connection-alive-from-the-point-of-view-of-network"><a href="#2-Take-the-connection-alive-from-the-point-of-view-of-network" class="headerlink" title="2) Take the connection alive from the point of view of network"></a>2) Take the connection alive from the point of view of network</h1><h1 id="equipment-in-the-middle"><a href="#equipment-in-the-middle" class="headerlink" title="equipment in the middle."></a>equipment in the middle.</h1><h1 id="-21"><a href="#-21" class="headerlink" title></a></h1><h1 id="On-Linux-the-specified-value-in-seconds-is-the-period-used-to-send-ACKs"><a href="#On-Linux-the-specified-value-in-seconds-is-the-period-used-to-send-ACKs" class="headerlink" title="On Linux, the specified value (in seconds) is the period used to send ACKs."></a>On Linux, the specified value (in seconds) is the period used to send ACKs.</h1><h1 id="Note-that-to-close-the-connection-the-double-of-the-time-is-needed"><a href="#Note-that-to-close-the-connection-the-double-of-the-time-is-needed" class="headerlink" title="Note that to close the connection the double of the time is needed."></a>Note that to close the connection the double of the time is needed.</h1><h1 id="On-other-kernels-the-period-depends-on-the-kernel-configuration"><a href="#On-other-kernels-the-period-depends-on-the-kernel-configuration" class="headerlink" title="On other kernels the period depends on the kernel configuration."></a>On other kernels the period depends on the kernel configuration.</h1><h1 id="-22"><a href="#-22" class="headerlink" title></a></h1><h1 id="A-reasonable-value-for-this-option-is-300-seconds-which-is-the-new"><a href="#A-reasonable-value-for-this-option-is-300-seconds-which-is-the-new" class="headerlink" title="A reasonable value for this option is 300 seconds, which is the new"></a>A reasonable value for this option is 300 seconds, which is the new</h1><h1 id="Redis-default-starting-with-Redis-3-2-1"><a href="#Redis-default-starting-with-Redis-3-2-1" class="headerlink" title="Redis default starting with Redis 3.2.1."></a>Redis default starting with Redis 3.2.1.</h1><p>tcp-keepalive 300  </p>
<p>################################# GENERAL #####################################  </p>
<h1 id="By-default-Redis-does-not-run-as-a-daemon-Use-‘yes’-if-you-need-it"><a href="#By-default-Redis-does-not-run-as-a-daemon-Use-‘yes’-if-you-need-it" class="headerlink" title="By default Redis does not run as a daemon. Use ‘yes’ if you need it."></a>By default Redis does not run as a daemon. Use ‘yes’ if you need it.</h1><h1 id="Note-that-Redis-will-write-a-pid-file-in-var-run-redis-pid-when-daemonized"><a href="#Note-that-Redis-will-write-a-pid-file-in-var-run-redis-pid-when-daemonized" class="headerlink" title="Note that Redis will write a pid file in /var/run/redis.pid when daemonized."></a>Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</h1><p>#daemonize no  </p>
<h1 id="If-you-run-Redis-from-upstart-or-systemd-Redis-can-interact-with-your"><a href="#If-you-run-Redis-from-upstart-or-systemd-Redis-can-interact-with-your" class="headerlink" title="If you run Redis from upstart or systemd, Redis can interact with your"></a>If you run Redis from upstart or systemd, Redis can interact with your</h1><h1 id="supervision-tree-Options"><a href="#supervision-tree-Options" class="headerlink" title="supervision tree. Options:"></a>supervision tree. Options:</h1><h1 id="supervised-no-no-supervision-interaction"><a href="#supervised-no-no-supervision-interaction" class="headerlink" title="supervised no      - no supervision interaction"></a>supervised no      - no supervision interaction</h1><h1 id="supervised-upstart-signal-upstart-by-putting-Redis-into-SIGSTOP-mode"><a href="#supervised-upstart-signal-upstart-by-putting-Redis-into-SIGSTOP-mode" class="headerlink" title="supervised upstart - signal upstart by putting Redis into SIGSTOP mode"></a>supervised upstart - signal upstart by putting Redis into SIGSTOP mode</h1><h1 id="supervised-systemd-signal-systemd-by-writing-READY-1-to-NOTIFY-SOCKET"><a href="#supervised-systemd-signal-systemd-by-writing-READY-1-to-NOTIFY-SOCKET" class="headerlink" title="supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET"></a>supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</h1><h1 id="supervised-auto-detect-upstart-or-systemd-method-based-on"><a href="#supervised-auto-detect-upstart-or-systemd-method-based-on" class="headerlink" title="supervised auto    - detect upstart or systemd method based on"></a>supervised auto    - detect upstart or systemd method based on</h1><h1 id="UPSTART-JOB-or-NOTIFY-SOCKET-environment-variables"><a href="#UPSTART-JOB-or-NOTIFY-SOCKET-environment-variables" class="headerlink" title="UPSTART_JOB or NOTIFY_SOCKET environment variables"></a>UPSTART_JOB or NOTIFY_SOCKET environment variables</h1><h1 id="Note-these-supervision-methods-only-signal-“process-is-ready-”"><a href="#Note-these-supervision-methods-only-signal-“process-is-ready-”" class="headerlink" title="Note: these supervision methods only signal “process is ready.”"></a>Note: these supervision methods only signal “process is ready.”</h1><h1 id="They-do-not-enable-continuous-liveness-pings-back-to-your-supervisor"><a href="#They-do-not-enable-continuous-liveness-pings-back-to-your-supervisor" class="headerlink" title="They do not enable continuous liveness pings back to your supervisor."></a>They do not enable continuous liveness pings back to your supervisor.</h1><p>supervised no  </p>
<h1 id="If-a-pid-file-is-specified-Redis-writes-it-where-specified-at-startup"><a href="#If-a-pid-file-is-specified-Redis-writes-it-where-specified-at-startup" class="headerlink" title="If a pid file is specified, Redis writes it where specified at startup"></a>If a pid file is specified, Redis writes it where specified at startup</h1><h1 id="and-removes-it-at-exit"><a href="#and-removes-it-at-exit" class="headerlink" title="and removes it at exit."></a>and removes it at exit.</h1><h1 id="-23"><a href="#-23" class="headerlink" title></a></h1><h1 id="When-the-server-runs-non-daemonized-no-pid-file-is-created-if-none-is"><a href="#When-the-server-runs-non-daemonized-no-pid-file-is-created-if-none-is" class="headerlink" title="When the server runs non daemonized, no pid file is created if none is"></a>When the server runs non daemonized, no pid file is created if none is</h1><h1 id="specified-in-the-configuration-When-the-server-is-daemonized-the-pid-file"><a href="#specified-in-the-configuration-When-the-server-is-daemonized-the-pid-file" class="headerlink" title="specified in the configuration. When the server is daemonized, the pid file"></a>specified in the configuration. When the server is daemonized, the pid file</h1><h1 id="is-used-even-if-not-specified-defaulting-to-“-var-run-redis-pid”"><a href="#is-used-even-if-not-specified-defaulting-to-“-var-run-redis-pid”" class="headerlink" title="is used even if not specified, defaulting to “/var/run/redis.pid”."></a>is used even if not specified, defaulting to “/var/run/redis.pid”.</h1><h1 id="-24"><a href="#-24" class="headerlink" title></a></h1><h1 id="Creating-a-pid-file-is-best-effort-if-Redis-is-not-able-to-create-it"><a href="#Creating-a-pid-file-is-best-effort-if-Redis-is-not-able-to-create-it" class="headerlink" title="Creating a pid file is best effort: if Redis is not able to create it"></a>Creating a pid file is best effort: if Redis is not able to create it</h1><h1 id="nothing-bad-happens-the-server-will-start-and-run-normally"><a href="#nothing-bad-happens-the-server-will-start-and-run-normally" class="headerlink" title="nothing bad happens, the server will start and run normally."></a>nothing bad happens, the server will start and run normally.</h1><p>pidfile /var/run/redis_6379.pid  </p>
<h1 id="Specify-the-server-verbosity-level"><a href="#Specify-the-server-verbosity-level" class="headerlink" title="Specify the server verbosity level."></a>Specify the server verbosity level.</h1><h1 id="This-can-be-one-of"><a href="#This-can-be-one-of" class="headerlink" title="This can be one of:"></a>This can be one of:</h1><h1 id="debug-a-lot-of-information-useful-for-development-testing"><a href="#debug-a-lot-of-information-useful-for-development-testing" class="headerlink" title="debug (a lot of information, useful for development/testing)"></a>debug (a lot of information, useful for development/testing)</h1><h1 id="verbose-many-rarely-useful-info-but-not-a-mess-like-the-debug-level"><a href="#verbose-many-rarely-useful-info-but-not-a-mess-like-the-debug-level" class="headerlink" title="verbose (many rarely useful info, but not a mess like the debug level)"></a>verbose (many rarely useful info, but not a mess like the debug level)</h1><h1 id="notice-moderately-verbose-what-you-want-in-production-probably"><a href="#notice-moderately-verbose-what-you-want-in-production-probably" class="headerlink" title="notice (moderately verbose, what you want in production probably)"></a>notice (moderately verbose, what you want in production probably)</h1><h1 id="warning-only-very-important-critical-messages-are-logged"><a href="#warning-only-very-important-critical-messages-are-logged" class="headerlink" title="warning (only very important / critical messages are logged)"></a>warning (only very important / critical messages are logged)</h1><p>loglevel notice  </p>
<h1 id="Specify-the-log-file-name-Also-the-empty-string-can-be-used-to-force"><a href="#Specify-the-log-file-name-Also-the-empty-string-can-be-used-to-force" class="headerlink" title="Specify the log file name. Also the empty string can be used to force"></a>Specify the log file name. Also the empty string can be used to force</h1><h1 id="Redis-to-log-on-the-standard-output-Note-that-if-you-use-standard"><a href="#Redis-to-log-on-the-standard-output-Note-that-if-you-use-standard" class="headerlink" title="Redis to log on the standard output. Note that if you use standard"></a>Redis to log on the standard output. Note that if you use standard</h1><h1 id="output-for-logging-but-daemonize-logs-will-be-sent-to-dev-null"><a href="#output-for-logging-but-daemonize-logs-will-be-sent-to-dev-null" class="headerlink" title="output for logging but daemonize, logs will be sent to /dev/null"></a>output for logging but daemonize, logs will be sent to /dev/null</h1><p>logfile “”  </p>
<h1 id="To-enable-logging-to-the-system-logger-just-set-‘syslog-enabled’-to-yes"><a href="#To-enable-logging-to-the-system-logger-just-set-‘syslog-enabled’-to-yes" class="headerlink" title="To enable logging to the system logger, just set ‘syslog-enabled’ to yes,"></a>To enable logging to the system logger, just set ‘syslog-enabled’ to yes,</h1><h1 id="and-optionally-update-the-other-syslog-parameters-to-suit-your-needs"><a href="#and-optionally-update-the-other-syslog-parameters-to-suit-your-needs" class="headerlink" title="and optionally update the other syslog parameters to suit your needs."></a>and optionally update the other syslog parameters to suit your needs.</h1><h1 id="syslog-enabled-no"><a href="#syslog-enabled-no" class="headerlink" title="syslog-enabled no"></a>syslog-enabled no</h1><h1 id="Specify-the-syslog-identity"><a href="#Specify-the-syslog-identity" class="headerlink" title="Specify the syslog identity."></a>Specify the syslog identity.</h1><h1 id="syslog-ident-redis"><a href="#syslog-ident-redis" class="headerlink" title="syslog-ident redis"></a>syslog-ident redis</h1><h1 id="Specify-the-syslog-facility-Must-be-USER-or-between-LOCAL0-LOCAL7"><a href="#Specify-the-syslog-facility-Must-be-USER-or-between-LOCAL0-LOCAL7" class="headerlink" title="Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7."></a>Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</h1><h1 id="syslog-facility-local0"><a href="#syslog-facility-local0" class="headerlink" title="syslog-facility local0"></a>syslog-facility local0</h1><h1 id="Set-the-number-of-databases-The-default-database-is-DB-0-you-can-select"><a href="#Set-the-number-of-databases-The-default-database-is-DB-0-you-can-select" class="headerlink" title="Set the number of databases. The default database is DB 0, you can select"></a>Set the number of databases. The default database is DB 0, you can select</h1><h1 id="a-different-one-on-a-per-connection-basis-using-SELECT-where"><a href="#a-different-one-on-a-per-connection-basis-using-SELECT-where" class="headerlink" title="a different one on a per-connection basis using SELECT  where"></a>a different one on a per-connection basis using SELECT <dbid> where</dbid></h1><h1 id="dbid-is-a-number-between-0-and-‘databases’-1"><a href="#dbid-is-a-number-between-0-and-‘databases’-1" class="headerlink" title="dbid is a number between 0 and ‘databases’-1"></a>dbid is a number between 0 and ‘databases’-1</h1><p>databases 16  </p>
<p>################################ SNAPSHOTTING  ################################  </p>
<h1 id="-25"><a href="#-25" class="headerlink" title></a></h1><h1 id="Save-the-DB-on-disk"><a href="#Save-the-DB-on-disk" class="headerlink" title="Save the DB on disk:"></a>Save the DB on disk:</h1><h1 id="-26"><a href="#-26" class="headerlink" title></a></h1><h1 id="save"><a href="#save" class="headerlink" title="save  "></a>save <seconds> <changes></changes></seconds></h1><h1 id="-27"><a href="#-27" class="headerlink" title></a></h1><h1 id="Will-save-the-DB-if-both-the-given-number-of-seconds-and-the-given"><a href="#Will-save-the-DB-if-both-the-given-number-of-seconds-and-the-given" class="headerlink" title="Will save the DB if both the given number of seconds and the given"></a>Will save the DB if both the given number of seconds and the given</h1><h1 id="number-of-write-operations-against-the-DB-occurred"><a href="#number-of-write-operations-against-the-DB-occurred" class="headerlink" title="number of write operations against the DB occurred."></a>number of write operations against the DB occurred.</h1><h1 id="-28"><a href="#-28" class="headerlink" title></a></h1><h1 id="In-the-example-below-the-behaviour-will-be-to-save"><a href="#In-the-example-below-the-behaviour-will-be-to-save" class="headerlink" title="In the example below the behaviour will be to save:"></a>In the example below the behaviour will be to save:</h1><h1 id="after-900-sec-15-min-if-at-least-1-key-changed"><a href="#after-900-sec-15-min-if-at-least-1-key-changed" class="headerlink" title="after 900 sec (15 min) if at least 1 key changed"></a>after 900 sec (15 min) if at least 1 key changed</h1><h1 id="after-300-sec-5-min-if-at-least-10-keys-changed"><a href="#after-300-sec-5-min-if-at-least-10-keys-changed" class="headerlink" title="after 300 sec (5 min) if at least 10 keys changed"></a>after 300 sec (5 min) if at least 10 keys changed</h1><h1 id="after-60-sec-if-at-least-10000-keys-changed"><a href="#after-60-sec-if-at-least-10000-keys-changed" class="headerlink" title="after 60 sec if at least 10000 keys changed"></a>after 60 sec if at least 10000 keys changed</h1><h1 id="-29"><a href="#-29" class="headerlink" title></a></h1><h1 id="Note-you-can-disable-saving-completely-by-commenting-out-all-“save”-lines"><a href="#Note-you-can-disable-saving-completely-by-commenting-out-all-“save”-lines" class="headerlink" title="Note: you can disable saving completely by commenting out all “save” lines."></a>Note: you can disable saving completely by commenting out all “save” lines.</h1><h1 id="-30"><a href="#-30" class="headerlink" title></a></h1><h1 id="It-is-also-possible-to-remove-all-the-previously-configured-save"><a href="#It-is-also-possible-to-remove-all-the-previously-configured-save" class="headerlink" title="It is also possible to remove all the previously configured save"></a>It is also possible to remove all the previously configured save</h1><h1 id="points-by-adding-a-save-directive-with-a-single-empty-string-argument"><a href="#points-by-adding-a-save-directive-with-a-single-empty-string-argument" class="headerlink" title="points by adding a save directive with a single empty string argument"></a>points by adding a save directive with a single empty string argument</h1><h1 id="like-in-the-following-example"><a href="#like-in-the-following-example" class="headerlink" title="like in the following example:"></a>like in the following example:</h1><h1 id="-31"><a href="#-31" class="headerlink" title></a></h1><h1 id="save-“”"><a href="#save-“”" class="headerlink" title="save “”"></a>save “”</h1><p>save 120 1<br>save 300 10<br>save 60 10000  </p>
<h1 id="By-default-Redis-will-stop-accepting-writes-if-RDB-snapshots-are-enabled"><a href="#By-default-Redis-will-stop-accepting-writes-if-RDB-snapshots-are-enabled" class="headerlink" title="By default Redis will stop accepting writes if RDB snapshots are enabled"></a>By default Redis will stop accepting writes if RDB snapshots are enabled</h1><h1 id="at-least-one-save-point-and-the-latest-background-save-failed"><a href="#at-least-one-save-point-and-the-latest-background-save-failed" class="headerlink" title="(at least one save point) and the latest background save failed."></a>(at least one save point) and the latest background save failed.</h1><h1 id="This-will-make-the-user-aware-in-a-hard-way-that-data-is-not-persisting"><a href="#This-will-make-the-user-aware-in-a-hard-way-that-data-is-not-persisting" class="headerlink" title="This will make the user aware (in a hard way) that data is not persisting"></a>This will make the user aware (in a hard way) that data is not persisting</h1><h1 id="on-disk-properly-otherwise-chances-are-that-no-one-will-notice-and-some"><a href="#on-disk-properly-otherwise-chances-are-that-no-one-will-notice-and-some" class="headerlink" title="on disk properly, otherwise chances are that no one will notice and some"></a>on disk properly, otherwise chances are that no one will notice and some</h1><h1 id="disaster-will-happen"><a href="#disaster-will-happen" class="headerlink" title="disaster will happen."></a>disaster will happen.</h1><h1 id="-32"><a href="#-32" class="headerlink" title></a></h1><h1 id="If-the-background-saving-process-will-start-working-again-Redis-will"><a href="#If-the-background-saving-process-will-start-working-again-Redis-will" class="headerlink" title="If the background saving process will start working again Redis will"></a>If the background saving process will start working again Redis will</h1><h1 id="automatically-allow-writes-again"><a href="#automatically-allow-writes-again" class="headerlink" title="automatically allow writes again."></a>automatically allow writes again.</h1><h1 id="-33"><a href="#-33" class="headerlink" title></a></h1><h1 id="However-if-you-have-setup-your-proper-monitoring-of-the-Redis-server"><a href="#However-if-you-have-setup-your-proper-monitoring-of-the-Redis-server" class="headerlink" title="However if you have setup your proper monitoring of the Redis server"></a>However if you have setup your proper monitoring of the Redis server</h1><h1 id="and-persistence-you-may-want-to-disable-this-feature-so-that-Redis-will"><a href="#and-persistence-you-may-want-to-disable-this-feature-so-that-Redis-will" class="headerlink" title="and persistence, you may want to disable this feature so that Redis will"></a>and persistence, you may want to disable this feature so that Redis will</h1><h1 id="continue-to-work-as-usual-even-if-there-are-problems-with-disk"><a href="#continue-to-work-as-usual-even-if-there-are-problems-with-disk" class="headerlink" title="continue to work as usual even if there are problems with disk,"></a>continue to work as usual even if there are problems with disk,</h1><h1 id="permissions-and-so-forth"><a href="#permissions-and-so-forth" class="headerlink" title="permissions, and so forth."></a>permissions, and so forth.</h1><p>stop-writes-on-bgsave-error yes  </p>
<h1 id="Compress-string-objects-using-LZF-when-dump-rdb-databases"><a href="#Compress-string-objects-using-LZF-when-dump-rdb-databases" class="headerlink" title="Compress string objects using LZF when dump .rdb databases?"></a>Compress string objects using LZF when dump .rdb databases?</h1><h1 id="For-default-that’s-set-to’yes’as-it’s-almost-always-a-win"><a href="#For-default-that’s-set-to’yes’as-it’s-almost-always-a-win" class="headerlink" title="For default that’s set to’yes’as it’s almost always a win."></a>For default that’s set to’yes’as it’s almost always a win.</h1><h1 id="If-you-want-to-save-some-CPU-in-the-saving-child-set-it-to-‘no’-but"><a href="#If-you-want-to-save-some-CPU-in-the-saving-child-set-it-to-‘no’-but" class="headerlink" title="If you want to save some CPU in the saving child set it to ‘no’ but"></a>If you want to save some CPU in the saving child set it to ‘no’ but</h1><h1 id="the-dataset-will-likely-be-bigger-if-you-have-compressible-values-or-keys"><a href="#the-dataset-will-likely-be-bigger-if-you-have-compressible-values-or-keys" class="headerlink" title="the dataset will likely be bigger if you have compressible values or keys."></a>the dataset will likely be bigger if you have compressible values or keys.</h1><p>rdbcompression yes  </p>
<h1 id="Since-version-5-of-RDB-a-CRC64-checksum-is-placed-at-the-end-of-the-file"><a href="#Since-version-5-of-RDB-a-CRC64-checksum-is-placed-at-the-end-of-the-file" class="headerlink" title="Since version 5 of RDB a CRC64 checksum is placed at the end of the file."></a>Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</h1><h1 id="This-makes-the-format-more-resistant-to-corruption-but-there-is-a-performance"><a href="#This-makes-the-format-more-resistant-to-corruption-but-there-is-a-performance" class="headerlink" title="This makes the format more resistant to corruption but there is a performance"></a>This makes the format more resistant to corruption but there is a performance</h1><h1 id="hit-to-pay-around-10-when-saving-and-loading-RDB-files-so-you-can-disable-it"><a href="#hit-to-pay-around-10-when-saving-and-loading-RDB-files-so-you-can-disable-it" class="headerlink" title="hit to pay (around 10%) when saving and loading RDB files, so you can disable it"></a>hit to pay (around 10%) when saving and loading RDB files, so you can disable it</h1><h1 id="for-maximum-performances"><a href="#for-maximum-performances" class="headerlink" title="for maximum performances."></a>for maximum performances.</h1><h1 id="-34"><a href="#-34" class="headerlink" title></a></h1><h1 id="RDB-files-created-with-checksum-disabled-have-a-checksum-of-zero-that-will"><a href="#RDB-files-created-with-checksum-disabled-have-a-checksum-of-zero-that-will" class="headerlink" title="RDB files created with checksum disabled have a checksum of zero that will"></a>RDB files created with checksum disabled have a checksum of zero that will</h1><h1 id="tell-the-loading-code-to-skip-the-check"><a href="#tell-the-loading-code-to-skip-the-check" class="headerlink" title="tell the loading code to skip the check."></a>tell the loading code to skip the check.</h1><p>rdbchecksum yes  </p>
<h1 id="The-filename-where-to-dump-the-DB"><a href="#The-filename-where-to-dump-the-DB" class="headerlink" title="The filename where to dump the DB"></a>The filename where to dump the DB</h1><p>dbfilename dump.rdb  </p>
<h1 id="The-working-directory"><a href="#The-working-directory" class="headerlink" title="The working directory."></a>The working directory.</h1><h1 id="-35"><a href="#-35" class="headerlink" title></a></h1><h1 id="The-DB-will-be-written-inside-this-directory-with-the-filename-specified"><a href="#The-DB-will-be-written-inside-this-directory-with-the-filename-specified" class="headerlink" title="The DB will be written inside this directory, with the filename specified"></a>The DB will be written inside this directory, with the filename specified</h1><h1 id="above-using-the-‘dbfilename’-configuration-directive"><a href="#above-using-the-‘dbfilename’-configuration-directive" class="headerlink" title="above using the ‘dbfilename’ configuration directive."></a>above using the ‘dbfilename’ configuration directive.</h1><h1 id="-36"><a href="#-36" class="headerlink" title></a></h1><h1 id="The-Append-Only-File-will-also-be-created-inside-this-directory"><a href="#The-Append-Only-File-will-also-be-created-inside-this-directory" class="headerlink" title="The Append Only File will also be created inside this directory."></a>The Append Only File will also be created inside this directory.</h1><h1 id="-37"><a href="#-37" class="headerlink" title></a></h1><h1 id="Note-that-you-must-specify-a-directory-here-not-a-file-name"><a href="#Note-that-you-must-specify-a-directory-here-not-a-file-name" class="headerlink" title="Note that you must specify a directory here, not a file name."></a>Note that you must specify a directory here, not a file name.</h1><p>dir ./  </p>
<p>################################# REPLICATION #################################  </p>
<h1 id="Master-Slave-replication-Use-slaveof-to-make-a-Redis-instance-a-copy-of"><a href="#Master-Slave-replication-Use-slaveof-to-make-a-Redis-instance-a-copy-of" class="headerlink" title="Master-Slave replication. Use slaveof to make a Redis instance a copy of"></a>Master-Slave replication. Use slaveof to make a Redis instance a copy of</h1><h1 id="another-Redis-server-A-few-things-to-understand-ASAP-about-Redis-replication"><a href="#another-Redis-server-A-few-things-to-understand-ASAP-about-Redis-replication" class="headerlink" title="another Redis server. A few things to understand ASAP about Redis replication."></a>another Redis server. A few things to understand ASAP about Redis replication.</h1><h1 id="-38"><a href="#-38" class="headerlink" title></a></h1><h1 id="1-Redis-replication-is-asynchronous-but-you-can-configure-a-master-to"><a href="#1-Redis-replication-is-asynchronous-but-you-can-configure-a-master-to" class="headerlink" title="1) Redis replication is asynchronous, but you can configure a master to"></a>1) Redis replication is asynchronous, but you can configure a master to</h1><h1 id="stop-accepting-writes-if-it-appears-to-be-not-connected-with-at-least"><a href="#stop-accepting-writes-if-it-appears-to-be-not-connected-with-at-least" class="headerlink" title="stop accepting writes if it appears to be not connected with at least"></a>stop accepting writes if it appears to be not connected with at least</h1><h1 id="a-given-number-of-slaves"><a href="#a-given-number-of-slaves" class="headerlink" title="a given number of slaves."></a>a given number of slaves.</h1><h1 id="2-Redis-slaves-are-able-to-perform-a-partial-resynchronization-with-the"><a href="#2-Redis-slaves-are-able-to-perform-a-partial-resynchronization-with-the" class="headerlink" title="2) Redis slaves are able to perform a partial resynchronization with the"></a>2) Redis slaves are able to perform a partial resynchronization with the</h1><h1 id="master-if-the-replication-link-is-lost-for-a-relatively-small-amount-of"><a href="#master-if-the-replication-link-is-lost-for-a-relatively-small-amount-of" class="headerlink" title="master if the replication link is lost for a relatively small amount of"></a>master if the replication link is lost for a relatively small amount of</h1><h1 id="time-You-may-want-to-configure-the-replication-backlog-size-see-the-next"><a href="#time-You-may-want-to-configure-the-replication-backlog-size-see-the-next" class="headerlink" title="time. You may want to configure the replication backlog size (see the next"></a>time. You may want to configure the replication backlog size (see the next</h1><h1 id="sections-of-this-file-with-a-sensible-value-depending-on-your-needs"><a href="#sections-of-this-file-with-a-sensible-value-depending-on-your-needs" class="headerlink" title="sections of this file) with a sensible value depending on your needs."></a>sections of this file) with a sensible value depending on your needs.</h1><h1 id="3-Replication-is-automatic-and-does-not-need-user-intervention-After-a"><a href="#3-Replication-is-automatic-and-does-not-need-user-intervention-After-a" class="headerlink" title="3) Replication is automatic and does not need user intervention. After a"></a>3) Replication is automatic and does not need user intervention. After a</h1><h1 id="network-partition-slaves-automatically-try-to-reconnect-to-masters"><a href="#network-partition-slaves-automatically-try-to-reconnect-to-masters" class="headerlink" title="network partition slaves automatically try to reconnect to masters"></a>network partition slaves automatically try to reconnect to masters</h1><h1 id="and-resynchronize-with-them"><a href="#and-resynchronize-with-them" class="headerlink" title="and resynchronize with them."></a>and resynchronize with them.</h1><h1 id="-39"><a href="#-39" class="headerlink" title></a></h1><h1 id="slaveof"><a href="#slaveof" class="headerlink" title="slaveof  "></a>slaveof <masterip> <masterport></masterport></masterip></h1><h1 id="If-the-master-is-password-protected-using-the-“requirepass”-configuration"><a href="#If-the-master-is-password-protected-using-the-“requirepass”-configuration" class="headerlink" title="If the master is password protected (using the “requirepass” configuration"></a>If the master is password protected (using the “requirepass” configuration</h1><h1 id="directive-below-it-is-possible-to-tell-the-slave-to-authenticate-before"><a href="#directive-below-it-is-possible-to-tell-the-slave-to-authenticate-before" class="headerlink" title="directive below) it is possible to tell the slave to authenticate before"></a>directive below) it is possible to tell the slave to authenticate before</h1><h1 id="starting-the-replication-synchronization-process-otherwise-the-master-will"><a href="#starting-the-replication-synchronization-process-otherwise-the-master-will" class="headerlink" title="starting the replication synchronization process, otherwise the master will"></a>starting the replication synchronization process, otherwise the master will</h1><h1 id="refuse-the-slave-request"><a href="#refuse-the-slave-request" class="headerlink" title="refuse the slave request."></a>refuse the slave request.</h1><h1 id="-40"><a href="#-40" class="headerlink" title></a></h1><h1 id="masterauth"><a href="#masterauth" class="headerlink" title="masterauth "></a>masterauth <master-password></master-password></h1><h1 id="When-a-slave-loses-its-connection-with-the-master-or-when-the-replication"><a href="#When-a-slave-loses-its-connection-with-the-master-or-when-the-replication" class="headerlink" title="When a slave loses its connection with the master, or when the replication"></a>When a slave loses its connection with the master, or when the replication</h1><h1 id="is-still-in-progress-the-slave-can-act-in-two-different-ways"><a href="#is-still-in-progress-the-slave-can-act-in-two-different-ways" class="headerlink" title="is still in progress, the slave can act in two different ways:"></a>is still in progress, the slave can act in two different ways:</h1><h1 id="-41"><a href="#-41" class="headerlink" title></a></h1><h1 id="1-if-slave-serve-stale-data-is-set-to-‘yes’-the-default-the-slave-will"><a href="#1-if-slave-serve-stale-data-is-set-to-‘yes’-the-default-the-slave-will" class="headerlink" title="1) if slave-serve-stale-data is set to ‘yes’ (the default) the slave will"></a>1) if slave-serve-stale-data is set to ‘yes’ (the default) the slave will</h1><h1 id="still-reply-to-client-requests-possibly-with-out-of-date-data-or-the"><a href="#still-reply-to-client-requests-possibly-with-out-of-date-data-or-the" class="headerlink" title="still reply to client requests, possibly with out of date data, or the"></a>still reply to client requests, possibly with out of date data, or the</h1><h1 id="data-set-may-just-be-empty-if-this-is-the-first-synchronization"><a href="#data-set-may-just-be-empty-if-this-is-the-first-synchronization" class="headerlink" title="data set may just be empty if this is the first synchronization."></a>data set may just be empty if this is the first synchronization.</h1><h1 id="-42"><a href="#-42" class="headerlink" title></a></h1><h1 id="2-if-slave-serve-stale-data-is-set-to-‘no’-the-slave-will-reply-with"><a href="#2-if-slave-serve-stale-data-is-set-to-‘no’-the-slave-will-reply-with" class="headerlink" title="2) if slave-serve-stale-data is set to ‘no’ the slave will reply with"></a>2) if slave-serve-stale-data is set to ‘no’ the slave will reply with</h1><h1 id="an-error-“SYNC-with-master-in-progress”-to-all-the-kind-of-commands"><a href="#an-error-“SYNC-with-master-in-progress”-to-all-the-kind-of-commands" class="headerlink" title="an error “SYNC with master in progress” to all the kind of commands"></a>an error “SYNC with master in progress” to all the kind of commands</h1><h1 id="but-to-INFO-and-SLAVEOF"><a href="#but-to-INFO-and-SLAVEOF" class="headerlink" title="but to INFO and SLAVEOF."></a>but to INFO and SLAVEOF.</h1><h1 id="-43"><a href="#-43" class="headerlink" title></a></h1><p>slave-serve-stale-data yes  </p>
<h1 id="You-can-configure-a-slave-instance-to-accept-writes-or-not-Writing-against"><a href="#You-can-configure-a-slave-instance-to-accept-writes-or-not-Writing-against" class="headerlink" title="You can configure a slave instance to accept writes or not. Writing against"></a>You can configure a slave instance to accept writes or not. Writing against</h1><h1 id="a-slave-instance-may-be-useful-to-store-some-ephemeral-data-because-data"><a href="#a-slave-instance-may-be-useful-to-store-some-ephemeral-data-because-data" class="headerlink" title="a slave instance may be useful to store some ephemeral data (because data"></a>a slave instance may be useful to store some ephemeral data (because data</h1><h1 id="written-on-a-slave-will-be-easily-deleted-after-resync-with-the-master-but"><a href="#written-on-a-slave-will-be-easily-deleted-after-resync-with-the-master-but" class="headerlink" title="written on a slave will be easily deleted after resync with the master) but"></a>written on a slave will be easily deleted after resync with the master) but</h1><h1 id="may-also-cause-problems-if-clients-are-writing-to-it-because-of-a"><a href="#may-also-cause-problems-if-clients-are-writing-to-it-because-of-a" class="headerlink" title="may also cause problems if clients are writing to it because of a"></a>may also cause problems if clients are writing to it because of a</h1><h1 id="misconfiguration"><a href="#misconfiguration" class="headerlink" title="misconfiguration."></a>misconfiguration.</h1><h1 id="-44"><a href="#-44" class="headerlink" title></a></h1><h1 id="Since-Redis-2-6-by-default-slaves-are-read-only"><a href="#Since-Redis-2-6-by-default-slaves-are-read-only" class="headerlink" title="Since Redis 2.6 by default slaves are read-only."></a>Since Redis 2.6 by default slaves are read-only.</h1><h1 id="-45"><a href="#-45" class="headerlink" title></a></h1><h1 id="Note-read-only-slaves-are-not-designed-to-be-exposed-to-untrusted-clients"><a href="#Note-read-only-slaves-are-not-designed-to-be-exposed-to-untrusted-clients" class="headerlink" title="Note: read only slaves are not designed to be exposed to untrusted clients"></a>Note: read only slaves are not designed to be exposed to untrusted clients</h1><h1 id="on-the-internet-It’s-just-a-protection-layer-against-misuse-of-the-instance"><a href="#on-the-internet-It’s-just-a-protection-layer-against-misuse-of-the-instance" class="headerlink" title="on the internet. It’s just a protection layer against misuse of the instance."></a>on the internet. It’s just a protection layer against misuse of the instance.</h1><h1 id="Still-a-read-only-slave-exports-by-default-all-the-administrative-commands"><a href="#Still-a-read-only-slave-exports-by-default-all-the-administrative-commands" class="headerlink" title="Still a read only slave exports by default all the administrative commands"></a>Still a read only slave exports by default all the administrative commands</h1><h1 id="such-as-CONFIG-DEBUG-and-so-forth-To-a-limited-extent-you-can-improve"><a href="#such-as-CONFIG-DEBUG-and-so-forth-To-a-limited-extent-you-can-improve" class="headerlink" title="such as CONFIG, DEBUG, and so forth. To a limited extent you can improve"></a>such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</h1><h1 id="security-of-read-only-slaves-using-‘rename-command’-to-shadow-all-the"><a href="#security-of-read-only-slaves-using-‘rename-command’-to-shadow-all-the" class="headerlink" title="security of read only slaves using ‘rename-command’ to shadow all the"></a>security of read only slaves using ‘rename-command’ to shadow all the</h1><h1 id="administrative-dangerous-commands"><a href="#administrative-dangerous-commands" class="headerlink" title="administrative / dangerous commands."></a>administrative / dangerous commands.</h1><p>slave-read-only yes  </p>
<h1 id="Replication-SYNC-strategy-disk-or-socket"><a href="#Replication-SYNC-strategy-disk-or-socket" class="headerlink" title="Replication SYNC strategy: disk or socket."></a>Replication SYNC strategy: disk or socket.</h1><h1 id="-46"><a href="#-46" class="headerlink" title></a></h1><h1 id="——————————————————"><a href="#——————————————————" class="headerlink" title="——————————————————-"></a>——————————————————-</h1><h1 id="WARNING-DISKLESS-REPLICATION-IS-EXPERIMENTAL-CURRENTLY"><a href="#WARNING-DISKLESS-REPLICATION-IS-EXPERIMENTAL-CURRENTLY" class="headerlink" title="WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY"></a>WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY</h1><h1 id="——————————————————-1"><a href="#——————————————————-1" class="headerlink" title="——————————————————-"></a>——————————————————-</h1><h1 id="-47"><a href="#-47" class="headerlink" title></a></h1><h1 id="New-slaves-and-reconnecting-slaves-that-are-not-able-to-continue-the-replication"><a href="#New-slaves-and-reconnecting-slaves-that-are-not-able-to-continue-the-replication" class="headerlink" title="New slaves and reconnecting slaves that are not able to continue the replication"></a>New slaves and reconnecting slaves that are not able to continue the replication</h1><h1 id="process-just-receiving-differences-need-to-do-what-is-called-a-“full"><a href="#process-just-receiving-differences-need-to-do-what-is-called-a-“full" class="headerlink" title="process just receiving differences, need to do what is called a “full"></a>process just receiving differences, need to do what is called a “full</h1><h1 id="synchronization”-An-RDB-file-is-transmitted-from-the-master-to-the-slaves"><a href="#synchronization”-An-RDB-file-is-transmitted-from-the-master-to-the-slaves" class="headerlink" title="synchronization”. An RDB file is transmitted from the master to the slaves."></a>synchronization”. An RDB file is transmitted from the master to the slaves.</h1><h1 id="The-transmission-can-happen-in-two-different-ways"><a href="#The-transmission-can-happen-in-two-different-ways" class="headerlink" title="The transmission can happen in two different ways:"></a>The transmission can happen in two different ways:</h1><h1 id="-48"><a href="#-48" class="headerlink" title></a></h1><h1 id="1-Disk-backed-The-Redis-master-creates-a-new-process-that-writes-the-RDB"><a href="#1-Disk-backed-The-Redis-master-creates-a-new-process-that-writes-the-RDB" class="headerlink" title="1) Disk-backed: The Redis master creates a new process that writes the RDB"></a>1) Disk-backed: The Redis master creates a new process that writes the RDB</h1><h1 id="file-on-disk-Later-the-file-is-transferred-by-the-parent"><a href="#file-on-disk-Later-the-file-is-transferred-by-the-parent" class="headerlink" title="file on disk. Later the file is transferred by the parent"></a>file on disk. Later the file is transferred by the parent</h1><h1 id="process-to-the-slaves-incrementally"><a href="#process-to-the-slaves-incrementally" class="headerlink" title="process to the slaves incrementally."></a>process to the slaves incrementally.</h1><h1 id="2-Diskless-The-Redis-master-creates-a-new-process-that-directly-writes-the"><a href="#2-Diskless-The-Redis-master-creates-a-new-process-that-directly-writes-the" class="headerlink" title="2) Diskless: The Redis master creates a new process that directly writes the"></a>2) Diskless: The Redis master creates a new process that directly writes the</h1><h1 id="RDB-file-to-slave-sockets-without-touching-the-disk-at-all"><a href="#RDB-file-to-slave-sockets-without-touching-the-disk-at-all" class="headerlink" title="RDB file to slave sockets, without touching the disk at all."></a>RDB file to slave sockets, without touching the disk at all.</h1><h1 id="-49"><a href="#-49" class="headerlink" title></a></h1><h1 id="With-disk-backed-replication-while-the-RDB-file-is-generated-more-slaves"><a href="#With-disk-backed-replication-while-the-RDB-file-is-generated-more-slaves" class="headerlink" title="With disk-backed replication, while the RDB file is generated, more slaves"></a>With disk-backed replication, while the RDB file is generated, more slaves</h1><h1 id="can-be-queued-and-served-with-the-RDB-file-as-soon-as-the-current-child-producing"><a href="#can-be-queued-and-served-with-the-RDB-file-as-soon-as-the-current-child-producing" class="headerlink" title="can be queued and served with the RDB file as soon as the current child producing"></a>can be queued and served with the RDB file as soon as the current child producing</h1><h1 id="the-RDB-file-finishes-its-work-With-diskless-replication-instead-once"><a href="#the-RDB-file-finishes-its-work-With-diskless-replication-instead-once" class="headerlink" title="the RDB file finishes its work. With diskless replication instead once"></a>the RDB file finishes its work. With diskless replication instead once</h1><h1 id="the-transfer-starts-new-slaves-arriving-will-be-queued-and-a-new-transfer"><a href="#the-transfer-starts-new-slaves-arriving-will-be-queued-and-a-new-transfer" class="headerlink" title="the transfer starts, new slaves arriving will be queued and a new transfer"></a>the transfer starts, new slaves arriving will be queued and a new transfer</h1><h1 id="will-start-when-the-current-one-terminates"><a href="#will-start-when-the-current-one-terminates" class="headerlink" title="will start when the current one terminates."></a>will start when the current one terminates.</h1><h1 id="-50"><a href="#-50" class="headerlink" title></a></h1><h1 id="When-diskless-replication-is-used-the-master-waits-a-configurable-amount-of"><a href="#When-diskless-replication-is-used-the-master-waits-a-configurable-amount-of" class="headerlink" title="When diskless replication is used, the master waits a configurable amount of"></a>When diskless replication is used, the master waits a configurable amount of</h1><h1 id="time-in-seconds-before-starting-the-transfer-in-the-hope-that-multiple-slaves"><a href="#time-in-seconds-before-starting-the-transfer-in-the-hope-that-multiple-slaves" class="headerlink" title="time (in seconds) before starting the transfer in the hope that multiple slaves"></a>time (in seconds) before starting the transfer in the hope that multiple slaves</h1><h1 id="will-arrive-and-the-transfer-can-be-parallelized"><a href="#will-arrive-and-the-transfer-can-be-parallelized" class="headerlink" title="will arrive and the transfer can be parallelized."></a>will arrive and the transfer can be parallelized.</h1><h1 id="-51"><a href="#-51" class="headerlink" title></a></h1><h1 id="With-slow-disks-and-fast-large-bandwidth-networks-diskless-replication"><a href="#With-slow-disks-and-fast-large-bandwidth-networks-diskless-replication" class="headerlink" title="With slow disks and fast (large bandwidth) networks, diskless replication"></a>With slow disks and fast (large bandwidth) networks, diskless replication</h1><h1 id="works-better"><a href="#works-better" class="headerlink" title="works better."></a>works better.</h1><p>repl-diskless-sync no  </p>
<h1 id="When-diskless-replication-is-enabled-it-is-possible-to-configure-the-delay"><a href="#When-diskless-replication-is-enabled-it-is-possible-to-configure-the-delay" class="headerlink" title="When diskless replication is enabled, it is possible to configure the delay"></a>When diskless replication is enabled, it is possible to configure the delay</h1><h1 id="the-server-waits-in-order-to-spawn-the-child-that-transfers-the-RDB-via-socket"><a href="#the-server-waits-in-order-to-spawn-the-child-that-transfers-the-RDB-via-socket" class="headerlink" title="the server waits in order to spawn the child that transfers the RDB via socket"></a>the server waits in order to spawn the child that transfers the RDB via socket</h1><h1 id="to-the-slaves"><a href="#to-the-slaves" class="headerlink" title="to the slaves."></a>to the slaves.</h1><h1 id="-52"><a href="#-52" class="headerlink" title></a></h1><h1 id="This-is-important-since-once-the-transfer-starts-it-is-not-possible-to-serve"><a href="#This-is-important-since-once-the-transfer-starts-it-is-not-possible-to-serve" class="headerlink" title="This is important since once the transfer starts, it is not possible to serve"></a>This is important since once the transfer starts, it is not possible to serve</h1><h1 id="new-slaves-arriving-that-will-be-queued-for-the-next-RDB-transfer-so-the-server"><a href="#new-slaves-arriving-that-will-be-queued-for-the-next-RDB-transfer-so-the-server" class="headerlink" title="new slaves arriving, that will be queued for the next RDB transfer, so the server"></a>new slaves arriving, that will be queued for the next RDB transfer, so the server</h1><h1 id="waits-a-delay-in-order-to-let-more-slaves-arrive"><a href="#waits-a-delay-in-order-to-let-more-slaves-arrive" class="headerlink" title="waits a delay in order to let more slaves arrive."></a>waits a delay in order to let more slaves arrive.</h1><h1 id="-53"><a href="#-53" class="headerlink" title></a></h1><h1 id="The-delay-is-specified-in-seconds-and-by-default-is-5-seconds-To-disable"><a href="#The-delay-is-specified-in-seconds-and-by-default-is-5-seconds-To-disable" class="headerlink" title="The delay is specified in seconds, and by default is 5 seconds. To disable"></a>The delay is specified in seconds, and by default is 5 seconds. To disable</h1><h1 id="it-entirely-just-set-it-to-0-seconds-and-the-transfer-will-start-ASAP"><a href="#it-entirely-just-set-it-to-0-seconds-and-the-transfer-will-start-ASAP" class="headerlink" title="it entirely just set it to 0 seconds and the transfer will start ASAP."></a>it entirely just set it to 0 seconds and the transfer will start ASAP.</h1><p>repl-diskless-sync-delay 5  </p>
<h1 id="Slaves-send-PINGs-to-server-in-a-predefined-interval-It’s-possible-to-change"><a href="#Slaves-send-PINGs-to-server-in-a-predefined-interval-It’s-possible-to-change" class="headerlink" title="Slaves send PINGs to server in a predefined interval. It’s possible to change"></a>Slaves send PINGs to server in a predefined interval. It’s possible to change</h1><h1 id="this-interval-with-the-repl-ping-slave-period-option-The-default-value-is-10"><a href="#this-interval-with-the-repl-ping-slave-period-option-The-default-value-is-10" class="headerlink" title="this interval with the repl_ping_slave_period option. The default value is 10"></a>this interval with the repl_ping_slave_period option. The default value is 10</h1><h1 id="seconds"><a href="#seconds" class="headerlink" title="seconds."></a>seconds.</h1><h1 id="-54"><a href="#-54" class="headerlink" title></a></h1><h1 id="repl-ping-slave-period-10"><a href="#repl-ping-slave-period-10" class="headerlink" title="repl-ping-slave-period 10"></a>repl-ping-slave-period 10</h1><h1 id="The-following-option-sets-the-replication-timeout-for"><a href="#The-following-option-sets-the-replication-timeout-for" class="headerlink" title="The following option sets the replication timeout for:"></a>The following option sets the replication timeout for:</h1><h1 id="-55"><a href="#-55" class="headerlink" title></a></h1><h1 id="1-Bulk-transfer-I-O-during-SYNC-from-the-point-of-view-of-slave"><a href="#1-Bulk-transfer-I-O-during-SYNC-from-the-point-of-view-of-slave" class="headerlink" title="1) Bulk transfer I/O during SYNC, from the point of view of slave."></a>1) Bulk transfer I/O during SYNC, from the point of view of slave.</h1><h1 id="2-Master-timeout-from-the-point-of-view-of-slaves-data-pings"><a href="#2-Master-timeout-from-the-point-of-view-of-slaves-data-pings" class="headerlink" title="2) Master timeout from the point of view of slaves (data, pings)."></a>2) Master timeout from the point of view of slaves (data, pings).</h1><h1 id="3-Slave-timeout-from-the-point-of-view-of-masters-REPLCONF-ACK-pings"><a href="#3-Slave-timeout-from-the-point-of-view-of-masters-REPLCONF-ACK-pings" class="headerlink" title="3) Slave timeout from the point of view of masters (REPLCONF ACK pings)."></a>3) Slave timeout from the point of view of masters (REPLCONF ACK pings).</h1><h1 id="-56"><a href="#-56" class="headerlink" title></a></h1><h1 id="It-is-important-to-make-sure-that-this-value-is-greater-than-the-value"><a href="#It-is-important-to-make-sure-that-this-value-is-greater-than-the-value" class="headerlink" title="It is important to make sure that this value is greater than the value"></a>It is important to make sure that this value is greater than the value</h1><h1 id="specified-for-repl-ping-slave-period-otherwise-a-timeout-will-be-detected"><a href="#specified-for-repl-ping-slave-period-otherwise-a-timeout-will-be-detected" class="headerlink" title="specified for repl-ping-slave-period otherwise a timeout will be detected"></a>specified for repl-ping-slave-period otherwise a timeout will be detected</h1><h1 id="every-time-there-is-low-traffic-between-the-master-and-the-slave"><a href="#every-time-there-is-low-traffic-between-the-master-and-the-slave" class="headerlink" title="every time there is low traffic between the master and the slave."></a>every time there is low traffic between the master and the slave.</h1><h1 id="-57"><a href="#-57" class="headerlink" title></a></h1><h1 id="repl-timeout-60"><a href="#repl-timeout-60" class="headerlink" title="repl-timeout 60"></a>repl-timeout 60</h1><h1 id="Disable-TCP-NODELAY-on-the-slave-socket-after-SYNC"><a href="#Disable-TCP-NODELAY-on-the-slave-socket-after-SYNC" class="headerlink" title="Disable TCP_NODELAY on the slave socket after SYNC?"></a>Disable TCP_NODELAY on the slave socket after SYNC?</h1><h1 id="-58"><a href="#-58" class="headerlink" title></a></h1><h1 id="If-you-select-“yes”-Redis-will-use-a-smaller-number-of-TCP-packets-and"><a href="#If-you-select-“yes”-Redis-will-use-a-smaller-number-of-TCP-packets-and" class="headerlink" title="If you select “yes” Redis will use a smaller number of TCP packets and"></a>If you select “yes” Redis will use a smaller number of TCP packets and</h1><h1 id="less-bandwidth-to-send-data-to-slaves-But-this-can-add-a-delay-for"><a href="#less-bandwidth-to-send-data-to-slaves-But-this-can-add-a-delay-for" class="headerlink" title="less bandwidth to send data to slaves. But this can add a delay for"></a>less bandwidth to send data to slaves. But this can add a delay for</h1><h1 id="the-data-to-appear-on-the-slave-side-up-to-40-milliseconds-with"><a href="#the-data-to-appear-on-the-slave-side-up-to-40-milliseconds-with" class="headerlink" title="the data to appear on the slave side, up to 40 milliseconds with"></a>the data to appear on the slave side, up to 40 milliseconds with</h1><h1 id="Linux-kernels-using-a-default-configuration"><a href="#Linux-kernels-using-a-default-configuration" class="headerlink" title="Linux kernels using a default configuration."></a>Linux kernels using a default configuration.</h1><h1 id="-59"><a href="#-59" class="headerlink" title></a></h1><h1 id="If-you-select-“no”-the-delay-for-data-to-appear-on-the-slave-side-will"><a href="#If-you-select-“no”-the-delay-for-data-to-appear-on-the-slave-side-will" class="headerlink" title="If you select “no” the delay for data to appear on the slave side will"></a>If you select “no” the delay for data to appear on the slave side will</h1><h1 id="be-reduced-but-more-bandwidth-will-be-used-for-replication"><a href="#be-reduced-but-more-bandwidth-will-be-used-for-replication" class="headerlink" title="be reduced but more bandwidth will be used for replication."></a>be reduced but more bandwidth will be used for replication.</h1><h1 id="-60"><a href="#-60" class="headerlink" title></a></h1><h1 id="By-default-we-optimize-for-low-latency-but-in-very-high-traffic-conditions"><a href="#By-default-we-optimize-for-low-latency-but-in-very-high-traffic-conditions" class="headerlink" title="By default we optimize for low latency, but in very high traffic conditions"></a>By default we optimize for low latency, but in very high traffic conditions</h1><h1 id="or-when-the-master-and-slaves-are-many-hops-away-turning-this-to-“yes”-may"><a href="#or-when-the-master-and-slaves-are-many-hops-away-turning-this-to-“yes”-may" class="headerlink" title="or when the master and slaves are many hops away, turning this to “yes” may"></a>or when the master and slaves are many hops away, turning this to “yes” may</h1><h1 id="be-a-good-idea"><a href="#be-a-good-idea" class="headerlink" title="be a good idea."></a>be a good idea.</h1><p>repl-disable-tcp-nodelay no  </p>
<h1 id="Set-the-replication-backlog-size-The-backlog-is-a-buffer-that-accumulates"><a href="#Set-the-replication-backlog-size-The-backlog-is-a-buffer-that-accumulates" class="headerlink" title="Set the replication backlog size. The backlog is a buffer that accumulates"></a>Set the replication backlog size. The backlog is a buffer that accumulates</h1><h1 id="slave-data-when-slaves-are-disconnected-for-some-time-so-that-when-a-slave"><a href="#slave-data-when-slaves-are-disconnected-for-some-time-so-that-when-a-slave" class="headerlink" title="slave data when slaves are disconnected for some time, so that when a slave"></a>slave data when slaves are disconnected for some time, so that when a slave</h1><h1 id="wants-to-reconnect-again-often-a-full-resync-is-not-needed-but-a-partial"><a href="#wants-to-reconnect-again-often-a-full-resync-is-not-needed-but-a-partial" class="headerlink" title="wants to reconnect again, often a full resync is not needed, but a partial"></a>wants to reconnect again, often a full resync is not needed, but a partial</h1><h1 id="resync-is-enough-just-passing-the-portion-of-data-the-slave-missed-while"><a href="#resync-is-enough-just-passing-the-portion-of-data-the-slave-missed-while" class="headerlink" title="resync is enough, just passing the portion of data the slave missed while"></a>resync is enough, just passing the portion of data the slave missed while</h1><h1 id="disconnected"><a href="#disconnected" class="headerlink" title="disconnected."></a>disconnected.</h1><h1 id="-61"><a href="#-61" class="headerlink" title></a></h1><h1 id="The-bigger-the-replication-backlog-the-longer-the-time-the-slave-can-be"><a href="#The-bigger-the-replication-backlog-the-longer-the-time-the-slave-can-be" class="headerlink" title="The bigger the replication backlog, the longer the time the slave can be"></a>The bigger the replication backlog, the longer the time the slave can be</h1><h1 id="disconnected-and-later-be-able-to-perform-a-partial-resynchronization"><a href="#disconnected-and-later-be-able-to-perform-a-partial-resynchronization" class="headerlink" title="disconnected and later be able to perform a partial resynchronization."></a>disconnected and later be able to perform a partial resynchronization.</h1><h1 id="-62"><a href="#-62" class="headerlink" title></a></h1><h1 id="The-backlog-is-only-allocated-once-there-is-at-least-a-slave-connected"><a href="#The-backlog-is-only-allocated-once-there-is-at-least-a-slave-connected" class="headerlink" title="The backlog is only allocated once there is at least a slave connected."></a>The backlog is only allocated once there is at least a slave connected.</h1><h1 id="-63"><a href="#-63" class="headerlink" title></a></h1><h1 id="repl-backlog-size-1mb"><a href="#repl-backlog-size-1mb" class="headerlink" title="repl-backlog-size 1mb"></a>repl-backlog-size 1mb</h1><h1 id="After-a-master-has-no-longer-connected-slaves-for-some-time-the-backlog"><a href="#After-a-master-has-no-longer-connected-slaves-for-some-time-the-backlog" class="headerlink" title="After a master has no longer connected slaves for some time, the backlog"></a>After a master has no longer connected slaves for some time, the backlog</h1><h1 id="will-be-freed-The-following-option-configures-the-amount-of-seconds-that"><a href="#will-be-freed-The-following-option-configures-the-amount-of-seconds-that" class="headerlink" title="will be freed. The following option configures the amount of seconds that"></a>will be freed. The following option configures the amount of seconds that</h1><h1 id="need-to-elapse-starting-from-the-time-the-last-slave-disconnected-for"><a href="#need-to-elapse-starting-from-the-time-the-last-slave-disconnected-for" class="headerlink" title="need to elapse, starting from the time the last slave disconnected, for"></a>need to elapse, starting from the time the last slave disconnected, for</h1><h1 id="the-backlog-buffer-to-be-freed"><a href="#the-backlog-buffer-to-be-freed" class="headerlink" title="the backlog buffer to be freed."></a>the backlog buffer to be freed.</h1><h1 id="-64"><a href="#-64" class="headerlink" title></a></h1><h1 id="A-value-of-0-means-to-never-release-the-backlog"><a href="#A-value-of-0-means-to-never-release-the-backlog" class="headerlink" title="A value of 0 means to never release the backlog."></a>A value of 0 means to never release the backlog.</h1><h1 id="-65"><a href="#-65" class="headerlink" title></a></h1><h1 id="repl-backlog-ttl-3600"><a href="#repl-backlog-ttl-3600" class="headerlink" title="repl-backlog-ttl 3600"></a>repl-backlog-ttl 3600</h1><h1 id="The-slave-priority-is-an-integer-number-published-by-Redis-in-the-INFO-output"><a href="#The-slave-priority-is-an-integer-number-published-by-Redis-in-the-INFO-output" class="headerlink" title="The slave priority is an integer number published by Redis in the INFO output."></a>The slave priority is an integer number published by Redis in the INFO output.</h1><h1 id="It-is-used-by-Redis-Sentinel-in-order-to-select-a-slave-to-promote-into-a"><a href="#It-is-used-by-Redis-Sentinel-in-order-to-select-a-slave-to-promote-into-a" class="headerlink" title="It is used by Redis Sentinel in order to select a slave to promote into a"></a>It is used by Redis Sentinel in order to select a slave to promote into a</h1><h1 id="master-if-the-master-is-no-longer-working-correctly"><a href="#master-if-the-master-is-no-longer-working-correctly" class="headerlink" title="master if the master is no longer working correctly."></a>master if the master is no longer working correctly.</h1><h1 id="-66"><a href="#-66" class="headerlink" title></a></h1><h1 id="A-slave-with-a-low-priority-number-is-considered-better-for-promotion-so"><a href="#A-slave-with-a-low-priority-number-is-considered-better-for-promotion-so" class="headerlink" title="A slave with a low priority number is considered better for promotion, so"></a>A slave with a low priority number is considered better for promotion, so</h1><h1 id="for-instance-if-there-are-three-slaves-with-priority-10-100-25-Sentinel-will"><a href="#for-instance-if-there-are-three-slaves-with-priority-10-100-25-Sentinel-will" class="headerlink" title="for instance if there are three slaves with priority 10, 100, 25 Sentinel will"></a>for instance if there are three slaves with priority 10, 100, 25 Sentinel will</h1><h1 id="pick-the-one-with-priority-10-that-is-the-lowest"><a href="#pick-the-one-with-priority-10-that-is-the-lowest" class="headerlink" title="pick the one with priority 10, that is the lowest."></a>pick the one with priority 10, that is the lowest.</h1><h1 id="-67"><a href="#-67" class="headerlink" title></a></h1><h1 id="However-a-special-priority-of-0-marks-the-slave-as-not-able-to-perform-the"><a href="#However-a-special-priority-of-0-marks-the-slave-as-not-able-to-perform-the" class="headerlink" title="However a special priority of 0 marks the slave as not able to perform the"></a>However a special priority of 0 marks the slave as not able to perform the</h1><h1 id="role-of-master-so-a-slave-with-priority-of-0-will-never-be-selected-by"><a href="#role-of-master-so-a-slave-with-priority-of-0-will-never-be-selected-by" class="headerlink" title="role of master, so a slave with priority of 0 will never be selected by"></a>role of master, so a slave with priority of 0 will never be selected by</h1><h1 id="Redis-Sentinel-for-promotion"><a href="#Redis-Sentinel-for-promotion" class="headerlink" title="Redis Sentinel for promotion."></a>Redis Sentinel for promotion.</h1><h1 id="-68"><a href="#-68" class="headerlink" title></a></h1><h1 id="By-default-the-priority-is-100"><a href="#By-default-the-priority-is-100" class="headerlink" title="By default the priority is 100."></a>By default the priority is 100.</h1><p>slave-priority 100  </p>
<h1 id="It-is-possible-for-a-master-to-stop-accepting-writes-if-there-are-less-than"><a href="#It-is-possible-for-a-master-to-stop-accepting-writes-if-there-are-less-than" class="headerlink" title="It is possible for a master to stop accepting writes if there are less than"></a>It is possible for a master to stop accepting writes if there are less than</h1><h1 id="N-slaves-connected-having-a-lag-less-or-equal-than-M-seconds"><a href="#N-slaves-connected-having-a-lag-less-or-equal-than-M-seconds" class="headerlink" title="N slaves connected, having a lag less or equal than M seconds."></a>N slaves connected, having a lag less or equal than M seconds.</h1><h1 id="-69"><a href="#-69" class="headerlink" title></a></h1><h1 id="The-N-slaves-need-to-be-in-“online”-state"><a href="#The-N-slaves-need-to-be-in-“online”-state" class="headerlink" title="The N slaves need to be in “online” state."></a>The N slaves need to be in “online” state.</h1><h1 id="-70"><a href="#-70" class="headerlink" title></a></h1><h1 id="The-lag-in-seconds-that-must-be-lt-the-specified-value-is-calculated-from"><a href="#The-lag-in-seconds-that-must-be-lt-the-specified-value-is-calculated-from" class="headerlink" title="The lag in seconds, that must be &lt;= the specified value, is calculated from"></a>The lag in seconds, that must be &lt;= the specified value, is calculated from</h1><h1 id="the-last-ping-received-from-the-slave-that-is-usually-sent-every-second"><a href="#the-last-ping-received-from-the-slave-that-is-usually-sent-every-second" class="headerlink" title="the last ping received from the slave, that is usually sent every second."></a>the last ping received from the slave, that is usually sent every second.</h1><h1 id="-71"><a href="#-71" class="headerlink" title></a></h1><h1 id="This-option-does-not-GUARANTEE-that-N-replicas-will-accept-the-write-but"><a href="#This-option-does-not-GUARANTEE-that-N-replicas-will-accept-the-write-but" class="headerlink" title="This option does not GUARANTEE that N replicas will accept the write, but"></a>This option does not GUARANTEE that N replicas will accept the write, but</h1><h1 id="will-limit-the-window-of-exposure-for-lost-writes-in-case-not-enough-slaves"><a href="#will-limit-the-window-of-exposure-for-lost-writes-in-case-not-enough-slaves" class="headerlink" title="will limit the window of exposure for lost writes in case not enough slaves"></a>will limit the window of exposure for lost writes in case not enough slaves</h1><h1 id="are-available-to-the-specified-number-of-seconds"><a href="#are-available-to-the-specified-number-of-seconds" class="headerlink" title="are available, to the specified number of seconds."></a>are available, to the specified number of seconds.</h1><h1 id="-72"><a href="#-72" class="headerlink" title></a></h1><h1 id="For-example-to-require-at-least-3-slaves-with-a-lag-lt-10-seconds-use"><a href="#For-example-to-require-at-least-3-slaves-with-a-lag-lt-10-seconds-use" class="headerlink" title="For example to require at least 3 slaves with a lag &lt;= 10 seconds use:"></a>For example to require at least 3 slaves with a lag &lt;= 10 seconds use:</h1><h1 id="-73"><a href="#-73" class="headerlink" title></a></h1><h1 id="min-slaves-to-write-3"><a href="#min-slaves-to-write-3" class="headerlink" title="min-slaves-to-write 3"></a>min-slaves-to-write 3</h1><h1 id="min-slaves-max-lag-10"><a href="#min-slaves-max-lag-10" class="headerlink" title="min-slaves-max-lag 10"></a>min-slaves-max-lag 10</h1><h1 id="-74"><a href="#-74" class="headerlink" title></a></h1><h1 id="Setting-one-or-the-other-to-0-disables-the-feature"><a href="#Setting-one-or-the-other-to-0-disables-the-feature" class="headerlink" title="Setting one or the other to 0 disables the feature."></a>Setting one or the other to 0 disables the feature.</h1><h1 id="-75"><a href="#-75" class="headerlink" title></a></h1><h1 id="By-default-min-slaves-to-write-is-set-to-0-feature-disabled-and"><a href="#By-default-min-slaves-to-write-is-set-to-0-feature-disabled-and" class="headerlink" title="By default min-slaves-to-write is set to 0 (feature disabled) and"></a>By default min-slaves-to-write is set to 0 (feature disabled) and</h1><h1 id="min-slaves-max-lag-is-set-to-10"><a href="#min-slaves-max-lag-is-set-to-10" class="headerlink" title="min-slaves-max-lag is set to 10."></a>min-slaves-max-lag is set to 10.</h1><h1 id="A-Redis-master-is-able-to-list-the-address-and-port-of-the-attached"><a href="#A-Redis-master-is-able-to-list-the-address-and-port-of-the-attached" class="headerlink" title="A Redis master is able to list the address and port of the attached"></a>A Redis master is able to list the address and port of the attached</h1><h1 id="slaves-in-different-ways-For-example-the-“INFO-replication”-section"><a href="#slaves-in-different-ways-For-example-the-“INFO-replication”-section" class="headerlink" title="slaves in different ways. For example the “INFO replication” section"></a>slaves in different ways. For example the “INFO replication” section</h1><h1 id="offers-this-information-which-is-used-among-other-tools-by"><a href="#offers-this-information-which-is-used-among-other-tools-by" class="headerlink" title="offers this information, which is used, among other tools, by"></a>offers this information, which is used, among other tools, by</h1><h1 id="Redis-Sentinel-in-order-to-discover-slave-instances"><a href="#Redis-Sentinel-in-order-to-discover-slave-instances" class="headerlink" title="Redis Sentinel in order to discover slave instances."></a>Redis Sentinel in order to discover slave instances.</h1><h1 id="Another-place-where-this-info-is-available-is-in-the-output-of-the"><a href="#Another-place-where-this-info-is-available-is-in-the-output-of-the" class="headerlink" title="Another place where this info is available is in the output of the"></a>Another place where this info is available is in the output of the</h1><h1 id="“ROLE”-command-of-a-masteer"><a href="#“ROLE”-command-of-a-masteer" class="headerlink" title="“ROLE” command of a masteer."></a>“ROLE” command of a masteer.</h1><h1 id="-76"><a href="#-76" class="headerlink" title></a></h1><h1 id="The-listed-IP-and-address-normally-reported-by-a-slave-is-obtained"><a href="#The-listed-IP-and-address-normally-reported-by-a-slave-is-obtained" class="headerlink" title="The listed IP and address normally reported by a slave is obtained"></a>The listed IP and address normally reported by a slave is obtained</h1><h1 id="in-the-following-way"><a href="#in-the-following-way" class="headerlink" title="in the following way:"></a>in the following way:</h1><h1 id="-77"><a href="#-77" class="headerlink" title></a></h1><h1 id="IP-The-address-is-auto-detected-by-checking-the-peer-address"><a href="#IP-The-address-is-auto-detected-by-checking-the-peer-address" class="headerlink" title="IP: The address is auto detected by checking the peer address"></a>IP: The address is auto detected by checking the peer address</h1><h1 id="of-the-socket-used-by-the-slave-to-connect-with-the-master"><a href="#of-the-socket-used-by-the-slave-to-connect-with-the-master" class="headerlink" title="of the socket used by the slave to connect with the master."></a>of the socket used by the slave to connect with the master.</h1><h1 id="-78"><a href="#-78" class="headerlink" title></a></h1><h1 id="Port-The-port-is-communicated-by-the-slave-during-the-replication"><a href="#Port-The-port-is-communicated-by-the-slave-during-the-replication" class="headerlink" title="Port: The port is communicated by the slave during the replication"></a>Port: The port is communicated by the slave during the replication</h1><h1 id="handshake-and-is-normally-the-port-that-the-slave-is-using-to"><a href="#handshake-and-is-normally-the-port-that-the-slave-is-using-to" class="headerlink" title="handshake, and is normally the port that the slave is using to"></a>handshake, and is normally the port that the slave is using to</h1><h1 id="list-for-connections"><a href="#list-for-connections" class="headerlink" title="list for connections."></a>list for connections.</h1><h1 id="-79"><a href="#-79" class="headerlink" title></a></h1><h1 id="However-when-port-forwarding-or-Network-Address-Translation-NAT-is"><a href="#However-when-port-forwarding-or-Network-Address-Translation-NAT-is" class="headerlink" title="However when port forwarding or Network Address Translation (NAT) is"></a>However when port forwarding or Network Address Translation (NAT) is</h1><h1 id="used-the-slave-may-be-actually-reachable-via-different-IP-and-port"><a href="#used-the-slave-may-be-actually-reachable-via-different-IP-and-port" class="headerlink" title="used, the slave may be actually reachable via different IP and port"></a>used, the slave may be actually reachable via different IP and port</h1><h1 id="pairs-The-following-two-options-can-be-used-by-a-slave-in-order-to"><a href="#pairs-The-following-two-options-can-be-used-by-a-slave-in-order-to" class="headerlink" title="pairs. The following two options can be used by a slave in order to"></a>pairs. The following two options can be used by a slave in order to</h1><h1 id="report-to-its-master-a-specific-set-of-IP-and-port-so-that-both-INFO"><a href="#report-to-its-master-a-specific-set-of-IP-and-port-so-that-both-INFO" class="headerlink" title="report to its master a specific set of IP and port, so that both INFO"></a>report to its master a specific set of IP and port, so that both INFO</h1><h1 id="and-ROLE-will-report-those-values"><a href="#and-ROLE-will-report-those-values" class="headerlink" title="and ROLE will report those values."></a>and ROLE will report those values.</h1><h1 id="-80"><a href="#-80" class="headerlink" title></a></h1><h1 id="There-is-no-need-to-use-both-the-options-if-you-need-to-override-just"><a href="#There-is-no-need-to-use-both-the-options-if-you-need-to-override-just" class="headerlink" title="There is no need to use both the options if you need to override just"></a>There is no need to use both the options if you need to override just</h1><h1 id="the-port-or-the-IP-address"><a href="#the-port-or-the-IP-address" class="headerlink" title="the port or the IP address."></a>the port or the IP address.</h1><h1 id="-81"><a href="#-81" class="headerlink" title></a></h1><h1 id="slave-announce-ip-5-5-5-5"><a href="#slave-announce-ip-5-5-5-5" class="headerlink" title="slave-announce-ip 5.5.5.5"></a>slave-announce-ip 5.5.5.5</h1><h1 id="slave-announce-port-1234"><a href="#slave-announce-port-1234" class="headerlink" title="slave-announce-port 1234"></a>slave-announce-port 1234</h1><p>################################## SECURITY ###################################  </p>
<h1 id="Require-clients-to-issue-AUTH-before-processing-any-other"><a href="#Require-clients-to-issue-AUTH-before-processing-any-other" class="headerlink" title="Require clients to issue AUTH  before processing any other"></a>Require clients to issue AUTH <password> before processing any other</password></h1><h1 id="commands-This-might-be-useful-in-environments-in-which-you-do-not-trust"><a href="#commands-This-might-be-useful-in-environments-in-which-you-do-not-trust" class="headerlink" title="commands.  This might be useful in environments in which you do not trust"></a>commands.  This might be useful in environments in which you do not trust</h1><h1 id="others-with-access-to-the-host-running-redis-server"><a href="#others-with-access-to-the-host-running-redis-server" class="headerlink" title="others with access to the host running redis-server."></a>others with access to the host running redis-server.</h1><h1 id="-82"><a href="#-82" class="headerlink" title></a></h1><h1 id="This-should-stay-commented-out-for-backward-compatibility-and-because-most"><a href="#This-should-stay-commented-out-for-backward-compatibility-and-because-most" class="headerlink" title="This should stay commented out for backward compatibility and because most"></a>This should stay commented out for backward compatibility and because most</h1><h1 id="people-do-not-need-auth-e-g-they-run-their-own-servers"><a href="#people-do-not-need-auth-e-g-they-run-their-own-servers" class="headerlink" title="people do not need auth (e.g. they run their own servers)."></a>people do not need auth (e.g. they run their own servers).</h1><h1 id="-83"><a href="#-83" class="headerlink" title></a></h1><h1 id="Warning-since-Redis-is-pretty-fast-an-outside-user-can-try-up-to"><a href="#Warning-since-Redis-is-pretty-fast-an-outside-user-can-try-up-to" class="headerlink" title="Warning: since Redis is pretty fast an outside user can try up to"></a>Warning: since Redis is pretty fast an outside user can try up to</h1><h1 id="150k-passwords-per-second-against-a-good-box-This-means-that-you-should"><a href="#150k-passwords-per-second-against-a-good-box-This-means-that-you-should" class="headerlink" title="150k passwords per second against a good box. This means that you should"></a>150k passwords per second against a good box. This means that you should</h1><h1 id="use-a-very-strong-password-otherwise-it-will-be-very-easy-to-break"><a href="#use-a-very-strong-password-otherwise-it-will-be-very-easy-to-break" class="headerlink" title="use a very strong password otherwise it will be very easy to break."></a>use a very strong password otherwise it will be very easy to break.</h1><h1 id="-84"><a href="#-84" class="headerlink" title></a></h1><h1 id="requirepass-foobared"><a href="#requirepass-foobared" class="headerlink" title="requirepass foobared"></a>requirepass foobared</h1><h1 id="Command-renaming"><a href="#Command-renaming" class="headerlink" title="Command renaming."></a>Command renaming.</h1><h1 id="-85"><a href="#-85" class="headerlink" title></a></h1><h1 id="It-is-possible-to-change-the-name-of-dangerous-commands-in-a-shared"><a href="#It-is-possible-to-change-the-name-of-dangerous-commands-in-a-shared" class="headerlink" title="It is possible to change the name of dangerous commands in a shared"></a>It is possible to change the name of dangerous commands in a shared</h1><h1 id="environment-For-instance-the-CONFIG-command-may-be-renamed-into-something"><a href="#environment-For-instance-the-CONFIG-command-may-be-renamed-into-something" class="headerlink" title="environment. For instance the CONFIG command may be renamed into something"></a>environment. For instance the CONFIG command may be renamed into something</h1><h1 id="hard-to-guess-so-that-it-will-still-be-available-for-internal-use-tools"><a href="#hard-to-guess-so-that-it-will-still-be-available-for-internal-use-tools" class="headerlink" title="hard to guess so that it will still be available for internal-use tools"></a>hard to guess so that it will still be available for internal-use tools</h1><h1 id="but-not-available-for-general-clients"><a href="#but-not-available-for-general-clients" class="headerlink" title="but not available for general clients."></a>but not available for general clients.</h1><h1 id="-86"><a href="#-86" class="headerlink" title></a></h1><h1 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h1><h1 id="-87"><a href="#-87" class="headerlink" title></a></h1><h1 id="rename-command-CONFIG-b840fc02d524045429941cc15f59e41cb7be6c52"><a href="#rename-command-CONFIG-b840fc02d524045429941cc15f59e41cb7be6c52" class="headerlink" title="rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52"></a>rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</h1><h1 id="-88"><a href="#-88" class="headerlink" title></a></h1><h1 id="It-is-also-possible-to-completely-kill-a-command-by-renaming-it-into"><a href="#It-is-also-possible-to-completely-kill-a-command-by-renaming-it-into" class="headerlink" title="It is also possible to completely kill a command by renaming it into"></a>It is also possible to completely kill a command by renaming it into</h1><h1 id="an-empty-string"><a href="#an-empty-string" class="headerlink" title="an empty string:"></a>an empty string:</h1><h1 id="-89"><a href="#-89" class="headerlink" title></a></h1><h1 id="rename-command-CONFIG-“”"><a href="#rename-command-CONFIG-“”" class="headerlink" title="rename-command CONFIG “”"></a>rename-command CONFIG “”</h1><h1 id="-90"><a href="#-90" class="headerlink" title></a></h1><h1 id="Please-note-that-changing-the-name-of-commands-that-are-logged-into-the"><a href="#Please-note-that-changing-the-name-of-commands-that-are-logged-into-the" class="headerlink" title="Please note that changing the name of commands that are logged into the"></a>Please note that changing the name of commands that are logged into the</h1><h1 id="AOF-file-or-transmitted-to-slaves-may-cause-problems"><a href="#AOF-file-or-transmitted-to-slaves-may-cause-problems" class="headerlink" title="AOF file or transmitted to slaves may cause problems."></a>AOF file or transmitted to slaves may cause problems.</h1><p>################################### LIMITS ####################################  </p>
<h1 id="Set-the-max-number-of-connected-clients-at-the-same-time-By-default"><a href="#Set-the-max-number-of-connected-clients-at-the-same-time-By-default" class="headerlink" title="Set the max number of connected clients at the same time. By default"></a>Set the max number of connected clients at the same time. By default</h1><h1 id="this-limit-is-set-to-10000-clients-however-if-the-Redis-server-is-not"><a href="#this-limit-is-set-to-10000-clients-however-if-the-Redis-server-is-not" class="headerlink" title="this limit is set to 10000 clients, however if the Redis server is not"></a>this limit is set to 10000 clients, however if the Redis server is not</h1><h1 id="able-to-configure-the-process-file-limit-to-allow-for-the-specified-limit"><a href="#able-to-configure-the-process-file-limit-to-allow-for-the-specified-limit" class="headerlink" title="able to configure the process file limit to allow for the specified limit"></a>able to configure the process file limit to allow for the specified limit</h1><h1 id="the-max-number-of-allowed-clients-is-set-to-the-current-file-limit"><a href="#the-max-number-of-allowed-clients-is-set-to-the-current-file-limit" class="headerlink" title="the max number of allowed clients is set to the current file limit"></a>the max number of allowed clients is set to the current file limit</h1><h1 id="minus-32-as-Redis-reserves-a-few-file-descriptors-for-internal-uses"><a href="#minus-32-as-Redis-reserves-a-few-file-descriptors-for-internal-uses" class="headerlink" title="minus 32 (as Redis reserves a few file descriptors for internal uses)."></a>minus 32 (as Redis reserves a few file descriptors for internal uses).</h1><h1 id="-91"><a href="#-91" class="headerlink" title></a></h1><h1 id="Once-the-limit-is-reached-Redis-will-close-all-the-new-connections-sending"><a href="#Once-the-limit-is-reached-Redis-will-close-all-the-new-connections-sending" class="headerlink" title="Once the limit is reached Redis will close all the new connections sending"></a>Once the limit is reached Redis will close all the new connections sending</h1><h1 id="an-error-‘max-number-of-clients-reached’"><a href="#an-error-‘max-number-of-clients-reached’" class="headerlink" title="an error ‘max number of clients reached’."></a>an error ‘max number of clients reached’.</h1><h1 id="-92"><a href="#-92" class="headerlink" title></a></h1><h1 id="maxclients-10000"><a href="#maxclients-10000" class="headerlink" title="maxclients 10000"></a>maxclients 10000</h1><h1 id="Don’t-use-more-memory-than-the-specified-amount-of-bytes"><a href="#Don’t-use-more-memory-than-the-specified-amount-of-bytes" class="headerlink" title="Don’t use more memory than the specified amount of bytes."></a>Don’t use more memory than the specified amount of bytes.</h1><h1 id="When-the-memory-limit-is-reached-Redis-will-try-to-remove-keys"><a href="#When-the-memory-limit-is-reached-Redis-will-try-to-remove-keys" class="headerlink" title="When the memory limit is reached Redis will try to remove keys"></a>When the memory limit is reached Redis will try to remove keys</h1><h1 id="according-to-the-eviction-policy-selected-see-maxmemory-policy"><a href="#according-to-the-eviction-policy-selected-see-maxmemory-policy" class="headerlink" title="according to the eviction policy selected (see maxmemory-policy)."></a>according to the eviction policy selected (see maxmemory-policy).</h1><h1 id="-93"><a href="#-93" class="headerlink" title></a></h1><h1 id="If-Redis-can’t-remove-keys-according-to-the-policy-or-if-the-policy-is"><a href="#If-Redis-can’t-remove-keys-according-to-the-policy-or-if-the-policy-is" class="headerlink" title="If Redis can’t remove keys according to the policy, or if the policy is"></a>If Redis can’t remove keys according to the policy, or if the policy is</h1><h1 id="set-to-‘noeviction’-Redis-will-start-to-reply-with-errors-to-commands"><a href="#set-to-‘noeviction’-Redis-will-start-to-reply-with-errors-to-commands" class="headerlink" title="set to ‘noeviction’, Redis will start to reply with errors to commands"></a>set to ‘noeviction’, Redis will start to reply with errors to commands</h1><h1 id="that-would-use-more-memory-like-SET-LPUSH-and-so-on-and-will-continue"><a href="#that-would-use-more-memory-like-SET-LPUSH-and-so-on-and-will-continue" class="headerlink" title="that would use more memory, like SET, LPUSH, and so on, and will continue"></a>that would use more memory, like SET, LPUSH, and so on, and will continue</h1><h1 id="to-reply-to-read-only-commands-like-GET"><a href="#to-reply-to-read-only-commands-like-GET" class="headerlink" title="to reply to read-only commands like GET."></a>to reply to read-only commands like GET.</h1><h1 id="-94"><a href="#-94" class="headerlink" title></a></h1><h1 id="This-option-is-usually-useful-when-using-Redis-as-an-LRU-cache-or-to-set"><a href="#This-option-is-usually-useful-when-using-Redis-as-an-LRU-cache-or-to-set" class="headerlink" title="This option is usually useful when using Redis as an LRU cache, or to set"></a>This option is usually useful when using Redis as an LRU cache, or to set</h1><h1 id="a-hard-memory-limit-for-an-instance-using-the-‘noeviction’-policy"><a href="#a-hard-memory-limit-for-an-instance-using-the-‘noeviction’-policy" class="headerlink" title="a hard memory limit for an instance (using the ‘noeviction’ policy)."></a>a hard memory limit for an instance (using the ‘noeviction’ policy).</h1><h1 id="-95"><a href="#-95" class="headerlink" title></a></h1><h1 id="WARNING-If-you-have-slaves-attached-to-an-instance-with-maxmemory-on"><a href="#WARNING-If-you-have-slaves-attached-to-an-instance-with-maxmemory-on" class="headerlink" title="WARNING: If you have slaves attached to an instance with maxmemory on,"></a>WARNING: If you have slaves attached to an instance with maxmemory on,</h1><h1 id="the-size-of-the-output-buffers-needed-to-feed-the-slaves-are-subtracted"><a href="#the-size-of-the-output-buffers-needed-to-feed-the-slaves-are-subtracted" class="headerlink" title="the size of the output buffers needed to feed the slaves are subtracted"></a>the size of the output buffers needed to feed the slaves are subtracted</h1><h1 id="from-the-used-memory-count-so-that-network-problems-resyncs-will"><a href="#from-the-used-memory-count-so-that-network-problems-resyncs-will" class="headerlink" title="from the used memory count, so that network problems / resyncs will"></a>from the used memory count, so that network problems / resyncs will</h1><h1 id="not-trigger-a-loop-where-keys-are-evicted-and-in-turn-the-output"><a href="#not-trigger-a-loop-where-keys-are-evicted-and-in-turn-the-output" class="headerlink" title="not trigger a loop where keys are evicted, and in turn the output"></a>not trigger a loop where keys are evicted, and in turn the output</h1><h1 id="buffer-of-slaves-is-full-with-DELs-of-keys-evicted-triggering-the-deletion"><a href="#buffer-of-slaves-is-full-with-DELs-of-keys-evicted-triggering-the-deletion" class="headerlink" title="buffer of slaves is full with DELs of keys evicted triggering the deletion"></a>buffer of slaves is full with DELs of keys evicted triggering the deletion</h1><h1 id="of-more-keys-and-so-forth-until-the-database-is-completely-emptied"><a href="#of-more-keys-and-so-forth-until-the-database-is-completely-emptied" class="headerlink" title="of more keys, and so forth until the database is completely emptied."></a>of more keys, and so forth until the database is completely emptied.</h1><h1 id="-96"><a href="#-96" class="headerlink" title></a></h1><h1 id="In-short…-if-you-have-slaves-attached-it-is-suggested-that-you-set-a-lower"><a href="#In-short…-if-you-have-slaves-attached-it-is-suggested-that-you-set-a-lower" class="headerlink" title="In short… if you have slaves attached it is suggested that you set a lower"></a>In short… if you have slaves attached it is suggested that you set a lower</h1><h1 id="limit-for-maxmemory-so-that-there-is-some-free-RAM-on-the-system-for-slave"><a href="#limit-for-maxmemory-so-that-there-is-some-free-RAM-on-the-system-for-slave" class="headerlink" title="limit for maxmemory so that there is some free RAM on the system for slave"></a>limit for maxmemory so that there is some free RAM on the system for slave</h1><h1 id="output-buffers-but-this-is-not-needed-if-the-policy-is-‘noeviction’"><a href="#output-buffers-but-this-is-not-needed-if-the-policy-is-‘noeviction’" class="headerlink" title="output buffers (but this is not needed if the policy is ‘noeviction’)."></a>output buffers (but this is not needed if the policy is ‘noeviction’).</h1><h1 id="-97"><a href="#-97" class="headerlink" title></a></h1><h1 id="maxmemory"><a href="#maxmemory" class="headerlink" title="maxmemory "></a>maxmemory <bytes></bytes></h1><h1 id="MAXMEMORY-POLICY-how-Redis-will-select-what-to-remove-when-maxmemory"><a href="#MAXMEMORY-POLICY-how-Redis-will-select-what-to-remove-when-maxmemory" class="headerlink" title="MAXMEMORY POLICY: how Redis will select what to remove when maxmemory"></a>MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</h1><h1 id="is-reached-You-can-select-among-five-behaviors"><a href="#is-reached-You-can-select-among-five-behaviors" class="headerlink" title="is reached. You can select among five behaviors:"></a>is reached. You can select among five behaviors:</h1><h1 id="-98"><a href="#-98" class="headerlink" title></a></h1><h1 id="volatile-lru-gt-remove-the-key-with-an-expire-set-using-an-LRU-algorithm"><a href="#volatile-lru-gt-remove-the-key-with-an-expire-set-using-an-LRU-algorithm" class="headerlink" title="volatile-lru -&gt; remove the key with an expire set using an LRU algorithm"></a>volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</h1><h1 id="allkeys-lru-gt-remove-any-key-according-to-the-LRU-algorithm"><a href="#allkeys-lru-gt-remove-any-key-according-to-the-LRU-algorithm" class="headerlink" title="allkeys-lru -&gt; remove any key according to the LRU algorithm"></a>allkeys-lru -&gt; remove any key according to the LRU algorithm</h1><h1 id="volatile-random-gt-remove-a-random-key-with-an-expire-set"><a href="#volatile-random-gt-remove-a-random-key-with-an-expire-set" class="headerlink" title="volatile-random -&gt; remove a random key with an expire set"></a>volatile-random -&gt; remove a random key with an expire set</h1><h1 id="allkeys-random-gt-remove-a-random-key-any-key"><a href="#allkeys-random-gt-remove-a-random-key-any-key" class="headerlink" title="allkeys-random -&gt; remove a random key, any key"></a>allkeys-random -&gt; remove a random key, any key</h1><h1 id="volatile-ttl-gt-remove-the-key-with-the-nearest-expire-time-minor-TTL"><a href="#volatile-ttl-gt-remove-the-key-with-the-nearest-expire-time-minor-TTL" class="headerlink" title="volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)"></a>volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</h1><h1 id="noeviction-gt-don’t-expire-at-all-just-return-an-error-on-write-operations"><a href="#noeviction-gt-don’t-expire-at-all-just-return-an-error-on-write-operations" class="headerlink" title="noeviction -&gt; don’t expire at all, just return an error on write operations"></a>noeviction -&gt; don’t expire at all, just return an error on write operations</h1><h1 id="-99"><a href="#-99" class="headerlink" title></a></h1><h1 id="Note-with-any-of-the-above-policies-Redis-will-return-an-error-on-write"><a href="#Note-with-any-of-the-above-policies-Redis-will-return-an-error-on-write" class="headerlink" title="Note: with any of the above policies, Redis will return an error on write"></a>Note: with any of the above policies, Redis will return an error on write</h1><h1 id="operations-when-there-are-no-suitable-keys-for-eviction"><a href="#operations-when-there-are-no-suitable-keys-for-eviction" class="headerlink" title="operations, when there are no suitable keys for eviction."></a>operations, when there are no suitable keys for eviction.</h1><h1 id="-100"><a href="#-100" class="headerlink" title></a></h1><h1 id="At-the-date-of-writing-these-commands-are-set-setnx-setex-append"><a href="#At-the-date-of-writing-these-commands-are-set-setnx-setex-append" class="headerlink" title="At the date of writing these commands are: set setnx setex append"></a>At the date of writing these commands are: set setnx setex append</h1><h1 id="incr-decr-rpush-lpush-rpushx-lpushx-linsert-lset-rpoplpush-sadd"><a href="#incr-decr-rpush-lpush-rpushx-lpushx-linsert-lset-rpoplpush-sadd" class="headerlink" title="incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd"></a>incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</h1><h1 id="sinter-sinterstore-sunion-sunionstore-sdiff-sdiffstore-zadd-zincrby"><a href="#sinter-sinterstore-sunion-sunionstore-sdiff-sdiffstore-zadd-zincrby" class="headerlink" title="sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby"></a>sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</h1><h1 id="zunionstore-zinterstore-hset-hsetnx-hmset-hincrby-incrby-decrby"><a href="#zunionstore-zinterstore-hset-hsetnx-hmset-hincrby-incrby-decrby" class="headerlink" title="zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby"></a>zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</h1><h1 id="getset-mset-msetnx-exec-sort"><a href="#getset-mset-msetnx-exec-sort" class="headerlink" title="getset mset msetnx exec sort"></a>getset mset msetnx exec sort</h1><h1 id="-101"><a href="#-101" class="headerlink" title></a></h1><h1 id="The-default-is"><a href="#The-default-is" class="headerlink" title="The default is:"></a>The default is:</h1><h1 id="-102"><a href="#-102" class="headerlink" title></a></h1><h1 id="maxmemory-policy-noeviction"><a href="#maxmemory-policy-noeviction" class="headerlink" title="maxmemory-policy noeviction"></a>maxmemory-policy noeviction</h1><h1 id="LRU-and-minimal-TTL-algorithms-are-not-precise-algorithms-but-approximated"><a href="#LRU-and-minimal-TTL-algorithms-are-not-precise-algorithms-but-approximated" class="headerlink" title="LRU and minimal TTL algorithms are not precise algorithms but approximated"></a>LRU and minimal TTL algorithms are not precise algorithms but approximated</h1><h1 id="algorithms-in-order-to-save-memory-so-you-can-tune-it-for-speed-or"><a href="#algorithms-in-order-to-save-memory-so-you-can-tune-it-for-speed-or" class="headerlink" title="algorithms (in order to save memory), so you can tune it for speed or"></a>algorithms (in order to save memory), so you can tune it for speed or</h1><h1 id="accuracy-For-default-Redis-will-check-five-keys-and-pick-the-one-that-was"><a href="#accuracy-For-default-Redis-will-check-five-keys-and-pick-the-one-that-was" class="headerlink" title="accuracy. For default Redis will check five keys and pick the one that was"></a>accuracy. For default Redis will check five keys and pick the one that was</h1><h1 id="used-less-recently-you-can-change-the-sample-size-using-the-following"><a href="#used-less-recently-you-can-change-the-sample-size-using-the-following" class="headerlink" title="used less recently, you can change the sample size using the following"></a>used less recently, you can change the sample size using the following</h1><h1 id="configuration-directive"><a href="#configuration-directive" class="headerlink" title="configuration directive."></a>configuration directive.</h1><h1 id="-103"><a href="#-103" class="headerlink" title></a></h1><h1 id="The-default-of-5-produces-good-enough-results-10-Approximates-very-closely"><a href="#The-default-of-5-produces-good-enough-results-10-Approximates-very-closely" class="headerlink" title="The default of 5 produces good enough results. 10 Approximates very closely"></a>The default of 5 produces good enough results. 10 Approximates very closely</h1><h1 id="true-LRU-but-costs-a-bit-more-CPU-3-is-very-fast-but-not-very-accurate"><a href="#true-LRU-but-costs-a-bit-more-CPU-3-is-very-fast-but-not-very-accurate" class="headerlink" title="true LRU but costs a bit more CPU. 3 is very fast but not very accurate."></a>true LRU but costs a bit more CPU. 3 is very fast but not very accurate.</h1><h1 id="-104"><a href="#-104" class="headerlink" title></a></h1><h1 id="maxmemory-samples-5"><a href="#maxmemory-samples-5" class="headerlink" title="maxmemory-samples 5"></a>maxmemory-samples 5</h1><p>############################## APPEND ONLY MODE ###############################  </p>
<h1 id="By-default-Redis-asynchronously-dumps-the-dataset-on-disk-This-mode-is"><a href="#By-default-Redis-asynchronously-dumps-the-dataset-on-disk-This-mode-is" class="headerlink" title="By default Redis asynchronously dumps the dataset on disk. This mode is"></a>By default Redis asynchronously dumps the dataset on disk. This mode is</h1><h1 id="good-enough-in-many-applications-but-an-issue-with-the-Redis-process-or"><a href="#good-enough-in-many-applications-but-an-issue-with-the-Redis-process-or" class="headerlink" title="good enough in many applications, but an issue with the Redis process or"></a>good enough in many applications, but an issue with the Redis process or</h1><h1 id="a-power-outage-may-result-into-a-few-minutes-of-writes-lost-depending-on"><a href="#a-power-outage-may-result-into-a-few-minutes-of-writes-lost-depending-on" class="headerlink" title="a power outage may result into a few minutes of writes lost (depending on"></a>a power outage may result into a few minutes of writes lost (depending on</h1><h1 id="the-configured-save-points"><a href="#the-configured-save-points" class="headerlink" title="the configured save points)."></a>the configured save points).</h1><h1 id="-105"><a href="#-105" class="headerlink" title></a></h1><h1 id="The-Append-Only-File-is-an-alternative-persistence-mode-that-provides"><a href="#The-Append-Only-File-is-an-alternative-persistence-mode-that-provides" class="headerlink" title="The Append Only File is an alternative persistence mode that provides"></a>The Append Only File is an alternative persistence mode that provides</h1><h1 id="much-better-durability-For-instance-using-the-default-data-fsync-policy"><a href="#much-better-durability-For-instance-using-the-default-data-fsync-policy" class="headerlink" title="much better durability. For instance using the default data fsync policy"></a>much better durability. For instance using the default data fsync policy</h1><h1 id="see-later-in-the-config-file-Redis-can-lose-just-one-second-of-writes-in-a"><a href="#see-later-in-the-config-file-Redis-can-lose-just-one-second-of-writes-in-a" class="headerlink" title="(see later in the config file) Redis can lose just one second of writes in a"></a>(see later in the config file) Redis can lose just one second of writes in a</h1><h1 id="dramatic-event-like-a-server-power-outage-or-a-single-write-if-something"><a href="#dramatic-event-like-a-server-power-outage-or-a-single-write-if-something" class="headerlink" title="dramatic event like a server power outage, or a single write if something"></a>dramatic event like a server power outage, or a single write if something</h1><h1 id="wrong-with-the-Redis-process-itself-happens-but-the-operating-system-is"><a href="#wrong-with-the-Redis-process-itself-happens-but-the-operating-system-is" class="headerlink" title="wrong with the Redis process itself happens, but the operating system is"></a>wrong with the Redis process itself happens, but the operating system is</h1><h1 id="still-running-correctly"><a href="#still-running-correctly" class="headerlink" title="still running correctly."></a>still running correctly.</h1><h1 id="-106"><a href="#-106" class="headerlink" title></a></h1><h1 id="AOF-and-RDB-persistence-can-be-enabled-at-the-same-time-without-problems"><a href="#AOF-and-RDB-persistence-can-be-enabled-at-the-same-time-without-problems" class="headerlink" title="AOF and RDB persistence can be enabled at the same time without problems."></a>AOF and RDB persistence can be enabled at the same time without problems.</h1><h1 id="If-the-AOF-is-enabled-on-startup-Redis-will-load-the-AOF-that-is-the-file"><a href="#If-the-AOF-is-enabled-on-startup-Redis-will-load-the-AOF-that-is-the-file" class="headerlink" title="If the AOF is enabled on startup Redis will load the AOF, that is the file"></a>If the AOF is enabled on startup Redis will load the AOF, that is the file</h1><h1 id="with-the-better-durability-guarantees"><a href="#with-the-better-durability-guarantees" class="headerlink" title="with the better durability guarantees."></a>with the better durability guarantees.</h1><h1 id="-107"><a href="#-107" class="headerlink" title></a></h1><h1 id="Please-check-http-redis-io-topics-persistence-for-more-information"><a href="#Please-check-http-redis-io-topics-persistence-for-more-information" class="headerlink" title="Please check http://redis.io/topics/persistence for more information."></a>Please check <a href="http://redis.io/topics/persistence" target="_blank" rel="noopener">http://redis.io/topics/persistence</a> for more information.</h1><p>appendonly no  </p>
<h1 id="The-name-of-the-append-only-file-default-“appendonly-aof”"><a href="#The-name-of-the-append-only-file-default-“appendonly-aof”" class="headerlink" title="The name of the append only file (default: “appendonly.aof”)"></a>The name of the append only file (default: “appendonly.aof”)</h1><p>appendfilename “appendonly.aof”  </p>
<h1 id="The-fsync-call-tells-the-Operating-System-to-actually-write-data-on-disk"><a href="#The-fsync-call-tells-the-Operating-System-to-actually-write-data-on-disk" class="headerlink" title="The fsync() call tells the Operating System to actually write data on disk"></a>The fsync() call tells the Operating System to actually write data on disk</h1><h1 id="instead-of-waiting-for-more-data-in-the-output-buffer-Some-OS-will-really-flush"><a href="#instead-of-waiting-for-more-data-in-the-output-buffer-Some-OS-will-really-flush" class="headerlink" title="instead of waiting for more data in the output buffer. Some OS will really flush"></a>instead of waiting for more data in the output buffer. Some OS will really flush</h1><h1 id="data-on-disk-some-other-OS-will-just-try-to-do-it-ASAP"><a href="#data-on-disk-some-other-OS-will-just-try-to-do-it-ASAP" class="headerlink" title="data on disk, some other OS will just try to do it ASAP."></a>data on disk, some other OS will just try to do it ASAP.</h1><h1 id="-108"><a href="#-108" class="headerlink" title></a></h1><h1 id="Redis-supports-three-different-modes"><a href="#Redis-supports-three-different-modes" class="headerlink" title="Redis supports three different modes:"></a>Redis supports three different modes:</h1><h1 id="-109"><a href="#-109" class="headerlink" title></a></h1><h1 id="no-don’t-fsync-just-let-the-OS-flush-the-data-when-it-wants-Faster"><a href="#no-don’t-fsync-just-let-the-OS-flush-the-data-when-it-wants-Faster" class="headerlink" title="no: don’t fsync, just let the OS flush the data when it wants. Faster."></a>no: don’t fsync, just let the OS flush the data when it wants. Faster.</h1><h1 id="always-fsync-after-every-write-to-the-append-only-log-Slow-Safest"><a href="#always-fsync-after-every-write-to-the-append-only-log-Slow-Safest" class="headerlink" title="always: fsync after every write to the append only log. Slow, Safest."></a>always: fsync after every write to the append only log. Slow, Safest.</h1><h1 id="everysec-fsync-only-one-time-every-second-Compromise"><a href="#everysec-fsync-only-one-time-every-second-Compromise" class="headerlink" title="everysec: fsync only one time every second. Compromise."></a>everysec: fsync only one time every second. Compromise.</h1><h1 id="-110"><a href="#-110" class="headerlink" title></a></h1><h1 id="The-default-is-“everysec”-as-that’s-usually-the-right-compromise-between"><a href="#The-default-is-“everysec”-as-that’s-usually-the-right-compromise-between" class="headerlink" title="The default is “everysec”, as that’s usually the right compromise between"></a>The default is “everysec”, as that’s usually the right compromise between</h1><h1 id="speed-and-data-safety-It’s-up-to-you-to-understand-if-you-can-relax-this-to"><a href="#speed-and-data-safety-It’s-up-to-you-to-understand-if-you-can-relax-this-to" class="headerlink" title="speed and data safety. It’s up to you to understand if you can relax this to"></a>speed and data safety. It’s up to you to understand if you can relax this to</h1><h1 id="“no”-that-will-let-the-operating-system-flush-the-output-buffer-when"><a href="#“no”-that-will-let-the-operating-system-flush-the-output-buffer-when" class="headerlink" title="“no” that will let the operating system flush the output buffer when"></a>“no” that will let the operating system flush the output buffer when</h1><h1 id="it-wants-for-better-performances-but-if-you-can-live-with-the-idea-of"><a href="#it-wants-for-better-performances-but-if-you-can-live-with-the-idea-of" class="headerlink" title="it wants, for better performances (but if you can live with the idea of"></a>it wants, for better performances (but if you can live with the idea of</h1><h1 id="some-data-loss-consider-the-default-persistence-mode-that’s-snapshotting"><a href="#some-data-loss-consider-the-default-persistence-mode-that’s-snapshotting" class="headerlink" title="some data loss consider the default persistence mode that’s snapshotting),"></a>some data loss consider the default persistence mode that’s snapshotting),</h1><h1 id="or-on-the-contrary-use-“always”-that’s-very-slow-but-a-bit-safer-than"><a href="#or-on-the-contrary-use-“always”-that’s-very-slow-but-a-bit-safer-than" class="headerlink" title="or on the contrary, use “always” that’s very slow but a bit safer than"></a>or on the contrary, use “always” that’s very slow but a bit safer than</h1><h1 id="everysec"><a href="#everysec" class="headerlink" title="everysec."></a>everysec.</h1><h1 id="-111"><a href="#-111" class="headerlink" title></a></h1><h1 id="More-details-please-check-the-following-article"><a href="#More-details-please-check-the-following-article" class="headerlink" title="More details please check the following article:"></a>More details please check the following article:</h1><h1 id="http-antirez-com-post-redis-persistence-demystified-html"><a href="#http-antirez-com-post-redis-persistence-demystified-html" class="headerlink" title="http://antirez.com/post/redis-persistence-demystified.html"></a><a href="http://antirez.com/post/redis-persistence-demystified.html" target="_blank" rel="noopener">http://antirez.com/post/redis-persistence-demystified.html</a></h1><h1 id="-112"><a href="#-112" class="headerlink" title></a></h1><h1 id="If-unsure-use-“everysec”"><a href="#If-unsure-use-“everysec”" class="headerlink" title="If unsure, use “everysec”."></a>If unsure, use “everysec”.</h1><h1 id="appendfsync-always"><a href="#appendfsync-always" class="headerlink" title="appendfsync always"></a>appendfsync always</h1><p>appendfsync everysec  </p>
<h1 id="appendfsync-no"><a href="#appendfsync-no" class="headerlink" title="appendfsync no"></a>appendfsync no</h1><h1 id="When-the-AOF-fsync-policy-is-set-to-always-or-everysec-and-a-background"><a href="#When-the-AOF-fsync-policy-is-set-to-always-or-everysec-and-a-background" class="headerlink" title="When the AOF fsync policy is set to always or everysec, and a background"></a>When the AOF fsync policy is set to always or everysec, and a background</h1><h1 id="saving-process-a-background-save-or-AOF-log-background-rewriting-is"><a href="#saving-process-a-background-save-or-AOF-log-background-rewriting-is" class="headerlink" title="saving process (a background save or AOF log background rewriting) is"></a>saving process (a background save or AOF log background rewriting) is</h1><h1 id="performing-a-lot-of-I-O-against-the-disk-in-some-Linux-configurations"><a href="#performing-a-lot-of-I-O-against-the-disk-in-some-Linux-configurations" class="headerlink" title="performing a lot of I/O against the disk, in some Linux configurations"></a>performing a lot of I/O against the disk, in some Linux configurations</h1><h1 id="Redis-may-block-too-long-on-the-fsync-call-Note-that-there-is-no-fix-for"><a href="#Redis-may-block-too-long-on-the-fsync-call-Note-that-there-is-no-fix-for" class="headerlink" title="Redis may block too long on the fsync() call. Note that there is no fix for"></a>Redis may block too long on the fsync() call. Note that there is no fix for</h1><h1 id="this-currently-as-even-performing-fsync-in-a-different-thread-will-block"><a href="#this-currently-as-even-performing-fsync-in-a-different-thread-will-block" class="headerlink" title="this currently, as even performing fsync in a different thread will block"></a>this currently, as even performing fsync in a different thread will block</h1><h1 id="our-synchronous-write-2-call"><a href="#our-synchronous-write-2-call" class="headerlink" title="our synchronous write(2) call."></a>our synchronous write(2) call.</h1><h1 id="-113"><a href="#-113" class="headerlink" title></a></h1><h1 id="In-order-to-mitigate-this-problem-it’s-possible-to-use-the-following-option"><a href="#In-order-to-mitigate-this-problem-it’s-possible-to-use-the-following-option" class="headerlink" title="In order to mitigate this problem it’s possible to use the following option"></a>In order to mitigate this problem it’s possible to use the following option</h1><h1 id="that-will-prevent-fsync-from-being-called-in-the-main-process-while-a"><a href="#that-will-prevent-fsync-from-being-called-in-the-main-process-while-a" class="headerlink" title="that will prevent fsync() from being called in the main process while a"></a>that will prevent fsync() from being called in the main process while a</h1><h1 id="BGSAVE-or-BGREWRITEAOF-is-in-progress"><a href="#BGSAVE-or-BGREWRITEAOF-is-in-progress" class="headerlink" title="BGSAVE or BGREWRITEAOF is in progress."></a>BGSAVE or BGREWRITEAOF is in progress.</h1><h1 id="-114"><a href="#-114" class="headerlink" title></a></h1><h1 id="This-means-that-while-another-child-is-saving-the-durability-of-Redis-is"><a href="#This-means-that-while-another-child-is-saving-the-durability-of-Redis-is" class="headerlink" title="This means that while another child is saving, the durability of Redis is"></a>This means that while another child is saving, the durability of Redis is</h1><h1 id="the-same-as-“appendfsync-none”-In-practical-terms-this-means-that-it-is"><a href="#the-same-as-“appendfsync-none”-In-practical-terms-this-means-that-it-is" class="headerlink" title="the same as “appendfsync none”. In practical terms, this means that it is"></a>the same as “appendfsync none”. In practical terms, this means that it is</h1><h1 id="possible-to-lose-up-to-30-seconds-of-log-in-the-worst-scenario-with-the"><a href="#possible-to-lose-up-to-30-seconds-of-log-in-the-worst-scenario-with-the" class="headerlink" title="possible to lose up to 30 seconds of log in the worst scenario (with the"></a>possible to lose up to 30 seconds of log in the worst scenario (with the</h1><h1 id="default-Linux-settings"><a href="#default-Linux-settings" class="headerlink" title="default Linux settings)."></a>default Linux settings).</h1><h1 id="-115"><a href="#-115" class="headerlink" title></a></h1><h1 id="If-you-have-latency-problems-turn-this-to-“yes”-Otherwise-leave-it-as"><a href="#If-you-have-latency-problems-turn-this-to-“yes”-Otherwise-leave-it-as" class="headerlink" title="If you have latency problems turn this to “yes”. Otherwise leave it as"></a>If you have latency problems turn this to “yes”. Otherwise leave it as</h1><h1 id="“no”-that-is-the-safest-pick-from-the-point-of-view-of-durability"><a href="#“no”-that-is-the-safest-pick-from-the-point-of-view-of-durability" class="headerlink" title="“no” that is the safest pick from the point of view of durability."></a>“no” that is the safest pick from the point of view of durability.</h1><p>no-appendfsync-on-rewrite no  </p>
<h1 id="Automatic-rewrite-of-the-append-only-file"><a href="#Automatic-rewrite-of-the-append-only-file" class="headerlink" title="Automatic rewrite of the append only file."></a>Automatic rewrite of the append only file.</h1><h1 id="Redis-is-able-to-automatically-rewrite-the-log-file-implicitly-calling"><a href="#Redis-is-able-to-automatically-rewrite-the-log-file-implicitly-calling" class="headerlink" title="Redis is able to automatically rewrite the log file implicitly calling"></a>Redis is able to automatically rewrite the log file implicitly calling</h1><h1 id="BGREWRITEAOF-when-the-AOF-log-size-grows-by-the-specified-percentage"><a href="#BGREWRITEAOF-when-the-AOF-log-size-grows-by-the-specified-percentage" class="headerlink" title="BGREWRITEAOF when the AOF log size grows by the specified percentage."></a>BGREWRITEAOF when the AOF log size grows by the specified percentage.</h1><h1 id="-116"><a href="#-116" class="headerlink" title></a></h1><h1 id="This-is-how-it-works-Redis-remembers-the-size-of-the-AOF-file-after-the"><a href="#This-is-how-it-works-Redis-remembers-the-size-of-the-AOF-file-after-the" class="headerlink" title="This is how it works: Redis remembers the size of the AOF file after the"></a>This is how it works: Redis remembers the size of the AOF file after the</h1><h1 id="latest-rewrite-if-no-rewrite-has-happened-since-the-restart-the-size-of"><a href="#latest-rewrite-if-no-rewrite-has-happened-since-the-restart-the-size-of" class="headerlink" title="latest rewrite (if no rewrite has happened since the restart, the size of"></a>latest rewrite (if no rewrite has happened since the restart, the size of</h1><h1 id="the-AOF-at-startup-is-used"><a href="#the-AOF-at-startup-is-used" class="headerlink" title="the AOF at startup is used)."></a>the AOF at startup is used).</h1><h1 id="-117"><a href="#-117" class="headerlink" title></a></h1><h1 id="This-base-size-is-compared-to-the-current-size-If-the-current-size-is"><a href="#This-base-size-is-compared-to-the-current-size-If-the-current-size-is" class="headerlink" title="This base size is compared to the current size. If the current size is"></a>This base size is compared to the current size. If the current size is</h1><h1 id="bigger-than-the-specified-percentage-the-rewrite-is-triggered-Also"><a href="#bigger-than-the-specified-percentage-the-rewrite-is-triggered-Also" class="headerlink" title="bigger than the specified percentage, the rewrite is triggered. Also"></a>bigger than the specified percentage, the rewrite is triggered. Also</h1><h1 id="you-need-to-specify-a-minimal-size-for-the-AOF-file-to-be-rewritten-this"><a href="#you-need-to-specify-a-minimal-size-for-the-AOF-file-to-be-rewritten-this" class="headerlink" title="you need to specify a minimal size for the AOF file to be rewritten, this"></a>you need to specify a minimal size for the AOF file to be rewritten, this</h1><h1 id="is-useful-to-avoid-rewriting-the-AOF-file-even-if-the-percentage-increase"><a href="#is-useful-to-avoid-rewriting-the-AOF-file-even-if-the-percentage-increase" class="headerlink" title="is useful to avoid rewriting the AOF file even if the percentage increase"></a>is useful to avoid rewriting the AOF file even if the percentage increase</h1><h1 id="is-reached-but-it-is-still-pretty-small"><a href="#is-reached-but-it-is-still-pretty-small" class="headerlink" title="is reached but it is still pretty small."></a>is reached but it is still pretty small.</h1><h1 id="-118"><a href="#-118" class="headerlink" title></a></h1><h1 id="Specify-a-percentage-of-zero-in-order-to-disable-the-automatic-AOF"><a href="#Specify-a-percentage-of-zero-in-order-to-disable-the-automatic-AOF" class="headerlink" title="Specify a percentage of zero in order to disable the automatic AOF"></a>Specify a percentage of zero in order to disable the automatic AOF</h1><h1 id="rewrite-feature"><a href="#rewrite-feature" class="headerlink" title="rewrite feature."></a>rewrite feature.</h1><p>auto-aof-rewrite-percentage 100<br>auto-aof-rewrite-min-size 64mb  </p>
<h1 id="An-AOF-file-may-be-found-to-be-truncated-at-the-end-during-the-Redis"><a href="#An-AOF-file-may-be-found-to-be-truncated-at-the-end-during-the-Redis" class="headerlink" title="An AOF file may be found to be truncated at the end during the Redis"></a>An AOF file may be found to be truncated at the end during the Redis</h1><h1 id="startup-process-when-the-AOF-data-gets-loaded-back-into-memory"><a href="#startup-process-when-the-AOF-data-gets-loaded-back-into-memory" class="headerlink" title="startup process, when the AOF data gets loaded back into memory."></a>startup process, when the AOF data gets loaded back into memory.</h1><h1 id="This-may-happen-when-the-system-where-Redis-is-running"><a href="#This-may-happen-when-the-system-where-Redis-is-running" class="headerlink" title="This may happen when the system where Redis is running"></a>This may happen when the system where Redis is running</h1><h1 id="crashes-especially-when-an-ext4-filesystem-is-mounted-without-the"><a href="#crashes-especially-when-an-ext4-filesystem-is-mounted-without-the" class="headerlink" title="crashes, especially when an ext4 filesystem is mounted without the"></a>crashes, especially when an ext4 filesystem is mounted without the</h1><h1 id="data-ordered-option-however-this-can’t-happen-when-Redis-itself"><a href="#data-ordered-option-however-this-can’t-happen-when-Redis-itself" class="headerlink" title="data=ordered option (however this can’t happen when Redis itself"></a>data=ordered option (however this can’t happen when Redis itself</h1><h1 id="crashes-or-aborts-but-the-operating-system-still-works-correctly"><a href="#crashes-or-aborts-but-the-operating-system-still-works-correctly" class="headerlink" title="crashes or aborts but the operating system still works correctly)."></a>crashes or aborts but the operating system still works correctly).</h1><h1 id="-119"><a href="#-119" class="headerlink" title></a></h1><h1 id="Redis-can-either-exit-with-an-error-when-this-happens-or-load-as-much"><a href="#Redis-can-either-exit-with-an-error-when-this-happens-or-load-as-much" class="headerlink" title="Redis can either exit with an error when this happens, or load as much"></a>Redis can either exit with an error when this happens, or load as much</h1><h1 id="data-as-possible-the-default-now-and-start-if-the-AOF-file-is-found"><a href="#data-as-possible-the-default-now-and-start-if-the-AOF-file-is-found" class="headerlink" title="data as possible (the default now) and start if the AOF file is found"></a>data as possible (the default now) and start if the AOF file is found</h1><h1 id="to-be-truncated-at-the-end-The-following-option-controls-this-behavior"><a href="#to-be-truncated-at-the-end-The-following-option-controls-this-behavior" class="headerlink" title="to be truncated at the end. The following option controls this behavior."></a>to be truncated at the end. The following option controls this behavior.</h1><h1 id="-120"><a href="#-120" class="headerlink" title></a></h1><h1 id="If-aof-load-truncated-is-set-to-yes-a-truncated-AOF-file-is-loaded-and"><a href="#If-aof-load-truncated-is-set-to-yes-a-truncated-AOF-file-is-loaded-and" class="headerlink" title="If aof-load-truncated is set to yes, a truncated AOF file is loaded and"></a>If aof-load-truncated is set to yes, a truncated AOF file is loaded and</h1><h1 id="the-Redis-server-starts-emitting-a-log-to-inform-the-user-of-the-event"><a href="#the-Redis-server-starts-emitting-a-log-to-inform-the-user-of-the-event" class="headerlink" title="the Redis server starts emitting a log to inform the user of the event."></a>the Redis server starts emitting a log to inform the user of the event.</h1><h1 id="Otherwise-if-the-option-is-set-to-no-the-server-aborts-with-an-error"><a href="#Otherwise-if-the-option-is-set-to-no-the-server-aborts-with-an-error" class="headerlink" title="Otherwise if the option is set to no, the server aborts with an error"></a>Otherwise if the option is set to no, the server aborts with an error</h1><h1 id="and-refuses-to-start-When-the-option-is-set-to-no-the-user-requires"><a href="#and-refuses-to-start-When-the-option-is-set-to-no-the-user-requires" class="headerlink" title="and refuses to start. When the option is set to no, the user requires"></a>and refuses to start. When the option is set to no, the user requires</h1><h1 id="to-fix-the-AOF-file-using-the-“redis-check-aof”-utility-before-to-restart"><a href="#to-fix-the-AOF-file-using-the-“redis-check-aof”-utility-before-to-restart" class="headerlink" title="to fix the AOF file using the “redis-check-aof” utility before to restart"></a>to fix the AOF file using the “redis-check-aof” utility before to restart</h1><h1 id="the-server"><a href="#the-server" class="headerlink" title="the server."></a>the server.</h1><h1 id="-121"><a href="#-121" class="headerlink" title></a></h1><h1 id="Note-that-if-the-AOF-file-will-be-found-to-be-corrupted-in-the-middle"><a href="#Note-that-if-the-AOF-file-will-be-found-to-be-corrupted-in-the-middle" class="headerlink" title="Note that if the AOF file will be found to be corrupted in the middle"></a>Note that if the AOF file will be found to be corrupted in the middle</h1><h1 id="the-server-will-still-exit-with-an-error-This-option-only-applies-when"><a href="#the-server-will-still-exit-with-an-error-This-option-only-applies-when" class="headerlink" title="the server will still exit with an error. This option only applies when"></a>the server will still exit with an error. This option only applies when</h1><h1 id="Redis-will-try-to-read-more-data-from-the-AOF-file-but-not-enough-bytes"><a href="#Redis-will-try-to-read-more-data-from-the-AOF-file-but-not-enough-bytes" class="headerlink" title="Redis will try to read more data from the AOF file but not enough bytes"></a>Redis will try to read more data from the AOF file but not enough bytes</h1><h1 id="will-be-found"><a href="#will-be-found" class="headerlink" title="will be found."></a>will be found.</h1><p>aof-load-truncated yes  </p>
<p>################################ LUA SCRIPTING  ###############################  </p>
<h1 id="Max-execution-time-of-a-Lua-script-in-milliseconds"><a href="#Max-execution-time-of-a-Lua-script-in-milliseconds" class="headerlink" title="Max execution time of a Lua script in milliseconds."></a>Max execution time of a Lua script in milliseconds.</h1><h1 id="-122"><a href="#-122" class="headerlink" title></a></h1><h1 id="If-the-maximum-execution-time-is-reached-Redis-will-log-that-a-script-is"><a href="#If-the-maximum-execution-time-is-reached-Redis-will-log-that-a-script-is" class="headerlink" title="If the maximum execution time is reached Redis will log that a script is"></a>If the maximum execution time is reached Redis will log that a script is</h1><h1 id="still-in-execution-after-the-maximum-allowed-time-and-will-start-to"><a href="#still-in-execution-after-the-maximum-allowed-time-and-will-start-to" class="headerlink" title="still in execution after the maximum allowed time and will start to"></a>still in execution after the maximum allowed time and will start to</h1><h1 id="reply-to-queries-with-an-error"><a href="#reply-to-queries-with-an-error" class="headerlink" title="reply to queries with an error."></a>reply to queries with an error.</h1><h1 id="-123"><a href="#-123" class="headerlink" title></a></h1><h1 id="When-a-long-running-script-exceeds-the-maximum-execution-time-only-the"><a href="#When-a-long-running-script-exceeds-the-maximum-execution-time-only-the" class="headerlink" title="When a long running script exceeds the maximum execution time only the"></a>When a long running script exceeds the maximum execution time only the</h1><h1 id="SCRIPT-KILL-and-SHUTDOWN-NOSAVE-commands-are-available-The-first-can-be"><a href="#SCRIPT-KILL-and-SHUTDOWN-NOSAVE-commands-are-available-The-first-can-be" class="headerlink" title="SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be"></a>SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</h1><h1 id="used-to-stop-a-script-that-did-not-yet-called-write-commands-The-second"><a href="#used-to-stop-a-script-that-did-not-yet-called-write-commands-The-second" class="headerlink" title="used to stop a script that did not yet called write commands. The second"></a>used to stop a script that did not yet called write commands. The second</h1><h1 id="is-the-only-way-to-shut-down-the-server-in-the-case-a-write-command-was"><a href="#is-the-only-way-to-shut-down-the-server-in-the-case-a-write-command-was" class="headerlink" title="is the only way to shut down the server in the case a write command was"></a>is the only way to shut down the server in the case a write command was</h1><h1 id="already-issued-by-the-script-but-the-user-doesn’t-want-to-wait-for-the-natural"><a href="#already-issued-by-the-script-but-the-user-doesn’t-want-to-wait-for-the-natural" class="headerlink" title="already issued by the script but the user doesn’t want to wait for the natural"></a>already issued by the script but the user doesn’t want to wait for the natural</h1><h1 id="termination-of-the-script"><a href="#termination-of-the-script" class="headerlink" title="termination of the script."></a>termination of the script.</h1><h1 id="-124"><a href="#-124" class="headerlink" title></a></h1><h1 id="Set-it-to-0-or-a-negative-value-for-unlimited-execution-without-warnings"><a href="#Set-it-to-0-or-a-negative-value-for-unlimited-execution-without-warnings" class="headerlink" title="Set it to 0 or a negative value for unlimited execution without warnings."></a>Set it to 0 or a negative value for unlimited execution without warnings.</h1><p>lua-time-limit 5000  </p>
<p>################################ REDIS CLUSTER  ###############################  </p>
<h1 id="-125"><a href="#-125" class="headerlink" title></a></h1><h1 id="-126"><a href="#-126" class="headerlink" title="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"></a>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</h1><h1 id="WARNING-EXPERIMENTAL-Redis-Cluster-is-considered-to-be-stable-code-however"><a href="#WARNING-EXPERIMENTAL-Redis-Cluster-is-considered-to-be-stable-code-however" class="headerlink" title="WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however"></a>WARNING EXPERIMENTAL: Redis Cluster is considered to be stable code, however</h1><h1 id="in-order-to-mark-it-as-“mature”-we-need-to-wait-for-a-non-trivial-percentage"><a href="#in-order-to-mark-it-as-“mature”-we-need-to-wait-for-a-non-trivial-percentage" class="headerlink" title="in order to mark it as “mature” we need to wait for a non trivial percentage"></a>in order to mark it as “mature” we need to wait for a non trivial percentage</h1><h1 id="of-users-to-deploy-it-in-production"><a href="#of-users-to-deploy-it-in-production" class="headerlink" title="of users to deploy it in production."></a>of users to deploy it in production.</h1><h1 id="-127"><a href="#-127" class="headerlink" title="++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"></a>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</h1><h1 id="-128"><a href="#-128" class="headerlink" title></a></h1><h1 id="Normal-Redis-instances-can’t-be-part-of-a-Redis-Cluster-only-nodes-that-are"><a href="#Normal-Redis-instances-can’t-be-part-of-a-Redis-Cluster-only-nodes-that-are" class="headerlink" title="Normal Redis instances can’t be part of a Redis Cluster; only nodes that are"></a>Normal Redis instances can’t be part of a Redis Cluster; only nodes that are</h1><h1 id="started-as-cluster-nodes-can-In-order-to-start-a-Redis-instance-as-a"><a href="#started-as-cluster-nodes-can-In-order-to-start-a-Redis-instance-as-a" class="headerlink" title="started as cluster nodes can. In order to start a Redis instance as a"></a>started as cluster nodes can. In order to start a Redis instance as a</h1><h1 id="cluster-node-enable-the-cluster-support-uncommenting-the-following"><a href="#cluster-node-enable-the-cluster-support-uncommenting-the-following" class="headerlink" title="cluster node enable the cluster support uncommenting the following:"></a>cluster node enable the cluster support uncommenting the following:</h1><h1 id="-129"><a href="#-129" class="headerlink" title></a></h1><h1 id="cluster-enabled-yes"><a href="#cluster-enabled-yes" class="headerlink" title="cluster-enabled yes"></a>cluster-enabled yes</h1><h1 id="Every-cluster-node-has-a-cluster-configuration-file-This-file-is-not"><a href="#Every-cluster-node-has-a-cluster-configuration-file-This-file-is-not" class="headerlink" title="Every cluster node has a cluster configuration file. This file is not"></a>Every cluster node has a cluster configuration file. This file is not</h1><h1 id="intended-to-be-edited-by-hand-It-is-created-and-updated-by-Redis-nodes"><a href="#intended-to-be-edited-by-hand-It-is-created-and-updated-by-Redis-nodes" class="headerlink" title="intended to be edited by hand. It is created and updated by Redis nodes."></a>intended to be edited by hand. It is created and updated by Redis nodes.</h1><h1 id="Every-Redis-Cluster-node-requires-a-different-cluster-configuration-file"><a href="#Every-Redis-Cluster-node-requires-a-different-cluster-configuration-file" class="headerlink" title="Every Redis Cluster node requires a different cluster configuration file."></a>Every Redis Cluster node requires a different cluster configuration file.</h1><h1 id="Make-sure-that-instances-running-in-the-same-system-do-not-have"><a href="#Make-sure-that-instances-running-in-the-same-system-do-not-have" class="headerlink" title="Make sure that instances running in the same system do not have"></a>Make sure that instances running in the same system do not have</h1><h1 id="overlapping-cluster-configuration-file-names"><a href="#overlapping-cluster-configuration-file-names" class="headerlink" title="overlapping cluster configuration file names."></a>overlapping cluster configuration file names.</h1><h1 id="-130"><a href="#-130" class="headerlink" title></a></h1><h1 id="cluster-config-file-nodes-6379-conf"><a href="#cluster-config-file-nodes-6379-conf" class="headerlink" title="cluster-config-file nodes-6379.conf"></a>cluster-config-file nodes-6379.conf</h1><h1 id="Cluster-node-timeout-is-the-amount-of-milliseconds-a-node-must-be-unreachable"><a href="#Cluster-node-timeout-is-the-amount-of-milliseconds-a-node-must-be-unreachable" class="headerlink" title="Cluster node timeout is the amount of milliseconds a node must be unreachable"></a>Cluster node timeout is the amount of milliseconds a node must be unreachable</h1><h1 id="for-it-to-be-considered-in-failure-state"><a href="#for-it-to-be-considered-in-failure-state" class="headerlink" title="for it to be considered in failure state."></a>for it to be considered in failure state.</h1><h1 id="Most-other-internal-time-limits-are-multiple-of-the-node-timeout"><a href="#Most-other-internal-time-limits-are-multiple-of-the-node-timeout" class="headerlink" title="Most other internal time limits are multiple of the node timeout."></a>Most other internal time limits are multiple of the node timeout.</h1><h1 id="-131"><a href="#-131" class="headerlink" title></a></h1><h1 id="cluster-node-timeout-15000"><a href="#cluster-node-timeout-15000" class="headerlink" title="cluster-node-timeout 15000"></a>cluster-node-timeout 15000</h1><h1 id="A-slave-of-a-failing-master-will-avoid-to-start-a-failover-if-its-data"><a href="#A-slave-of-a-failing-master-will-avoid-to-start-a-failover-if-its-data" class="headerlink" title="A slave of a failing master will avoid to start a failover if its data"></a>A slave of a failing master will avoid to start a failover if its data</h1><h1 id="looks-too-old"><a href="#looks-too-old" class="headerlink" title="looks too old."></a>looks too old.</h1><h1 id="-132"><a href="#-132" class="headerlink" title></a></h1><h1 id="There-is-no-simple-way-for-a-slave-to-actually-have-a-exact-measure-of"><a href="#There-is-no-simple-way-for-a-slave-to-actually-have-a-exact-measure-of" class="headerlink" title="There is no simple way for a slave to actually have a exact measure of"></a>There is no simple way for a slave to actually have a exact measure of</h1><h1 id="its-“data-age”-so-the-following-two-checks-are-performed"><a href="#its-“data-age”-so-the-following-two-checks-are-performed" class="headerlink" title="its “data age”, so the following two checks are performed:"></a>its “data age”, so the following two checks are performed:</h1><h1 id="-133"><a href="#-133" class="headerlink" title></a></h1><h1 id="1-If-there-are-multiple-slaves-able-to-failover-they-exchange-messages"><a href="#1-If-there-are-multiple-slaves-able-to-failover-they-exchange-messages" class="headerlink" title="1) If there are multiple slaves able to failover, they exchange messages"></a>1) If there are multiple slaves able to failover, they exchange messages</h1><h1 id="in-order-to-try-to-give-an-advantage-to-the-slave-with-the-best"><a href="#in-order-to-try-to-give-an-advantage-to-the-slave-with-the-best" class="headerlink" title="in order to try to give an advantage to the slave with the best"></a>in order to try to give an advantage to the slave with the best</h1><h1 id="replication-offset-more-data-from-the-master-processed"><a href="#replication-offset-more-data-from-the-master-processed" class="headerlink" title="replication offset (more data from the master processed)."></a>replication offset (more data from the master processed).</h1><h1 id="Slaves-will-try-to-get-their-rank-by-offset-and-apply-to-the-start"><a href="#Slaves-will-try-to-get-their-rank-by-offset-and-apply-to-the-start" class="headerlink" title="Slaves will try to get their rank by offset, and apply to the start"></a>Slaves will try to get their rank by offset, and apply to the start</h1><h1 id="of-the-failover-a-delay-proportional-to-their-rank"><a href="#of-the-failover-a-delay-proportional-to-their-rank" class="headerlink" title="of the failover a delay proportional to their rank."></a>of the failover a delay proportional to their rank.</h1><h1 id="-134"><a href="#-134" class="headerlink" title></a></h1><h1 id="2-Every-single-slave-computes-the-time-of-the-last-interaction-with"><a href="#2-Every-single-slave-computes-the-time-of-the-last-interaction-with" class="headerlink" title="2) Every single slave computes the time of the last interaction with"></a>2) Every single slave computes the time of the last interaction with</h1><h1 id="its-master-This-can-be-the-last-ping-or-command-received-if-the-master"><a href="#its-master-This-can-be-the-last-ping-or-command-received-if-the-master" class="headerlink" title="its master. This can be the last ping or command received (if the master"></a>its master. This can be the last ping or command received (if the master</h1><h1 id="is-still-in-the-“connected”-state-or-the-time-that-elapsed-since-the"><a href="#is-still-in-the-“connected”-state-or-the-time-that-elapsed-since-the" class="headerlink" title="is still in the “connected” state), or the time that elapsed since the"></a>is still in the “connected” state), or the time that elapsed since the</h1><h1 id="disconnection-with-the-master-if-the-replication-link-is-currently-down"><a href="#disconnection-with-the-master-if-the-replication-link-is-currently-down" class="headerlink" title="disconnection with the master (if the replication link is currently down)."></a>disconnection with the master (if the replication link is currently down).</h1><h1 id="If-the-last-interaction-is-too-old-the-slave-will-not-try-to-failover"><a href="#If-the-last-interaction-is-too-old-the-slave-will-not-try-to-failover" class="headerlink" title="If the last interaction is too old, the slave will not try to failover"></a>If the last interaction is too old, the slave will not try to failover</h1><h1 id="at-all"><a href="#at-all" class="headerlink" title="at all."></a>at all.</h1><h1 id="-135"><a href="#-135" class="headerlink" title></a></h1><h1 id="The-point-“2”-can-be-tuned-by-user-Specifically-a-slave-will-not-perform"><a href="#The-point-“2”-can-be-tuned-by-user-Specifically-a-slave-will-not-perform" class="headerlink" title="The point “2” can be tuned by user. Specifically a slave will not perform"></a>The point “2” can be tuned by user. Specifically a slave will not perform</h1><h1 id="the-failover-if-since-the-last-interaction-with-the-master-the-time"><a href="#the-failover-if-since-the-last-interaction-with-the-master-the-time" class="headerlink" title="the failover if, since the last interaction with the master, the time"></a>the failover if, since the last interaction with the master, the time</h1><h1 id="elapsed-is-greater-than"><a href="#elapsed-is-greater-than" class="headerlink" title="elapsed is greater than:"></a>elapsed is greater than:</h1><h1 id="-136"><a href="#-136" class="headerlink" title></a></h1><h1 id="node-timeout-slave-validity-factor-repl-ping-slave-period"><a href="#node-timeout-slave-validity-factor-repl-ping-slave-period" class="headerlink" title="(node-timeout * slave-validity-factor) + repl-ping-slave-period"></a>(node-timeout * slave-validity-factor) + repl-ping-slave-period</h1><h1 id="-137"><a href="#-137" class="headerlink" title></a></h1><h1 id="So-for-example-if-node-timeout-is-30-seconds-and-the-slave-validity-factor"><a href="#So-for-example-if-node-timeout-is-30-seconds-and-the-slave-validity-factor" class="headerlink" title="So for example if node-timeout is 30 seconds, and the slave-validity-factor"></a>So for example if node-timeout is 30 seconds, and the slave-validity-factor</h1><h1 id="is-10-and-assuming-a-default-repl-ping-slave-period-of-10-seconds-the"><a href="#is-10-and-assuming-a-default-repl-ping-slave-period-of-10-seconds-the" class="headerlink" title="is 10, and assuming a default repl-ping-slave-period of 10 seconds, the"></a>is 10, and assuming a default repl-ping-slave-period of 10 seconds, the</h1><h1 id="slave-will-not-try-to-failover-if-it-was-not-able-to-talk-with-the-master"><a href="#slave-will-not-try-to-failover-if-it-was-not-able-to-talk-with-the-master" class="headerlink" title="slave will not try to failover if it was not able to talk with the master"></a>slave will not try to failover if it was not able to talk with the master</h1><h1 id="for-longer-than-310-seconds"><a href="#for-longer-than-310-seconds" class="headerlink" title="for longer than 310 seconds."></a>for longer than 310 seconds.</h1><h1 id="-138"><a href="#-138" class="headerlink" title></a></h1><h1 id="A-large-slave-validity-factor-may-allow-slaves-with-too-old-data-to-failover"><a href="#A-large-slave-validity-factor-may-allow-slaves-with-too-old-data-to-failover" class="headerlink" title="A large slave-validity-factor may allow slaves with too old data to failover"></a>A large slave-validity-factor may allow slaves with too old data to failover</h1><h1 id="a-master-while-a-too-small-value-may-prevent-the-cluster-from-being-able-to"><a href="#a-master-while-a-too-small-value-may-prevent-the-cluster-from-being-able-to" class="headerlink" title="a master, while a too small value may prevent the cluster from being able to"></a>a master, while a too small value may prevent the cluster from being able to</h1><h1 id="elect-a-slave-at-all"><a href="#elect-a-slave-at-all" class="headerlink" title="elect a slave at all."></a>elect a slave at all.</h1><h1 id="-139"><a href="#-139" class="headerlink" title></a></h1><h1 id="For-maximum-availability-it-is-possible-to-set-the-slave-validity-factor"><a href="#For-maximum-availability-it-is-possible-to-set-the-slave-validity-factor" class="headerlink" title="For maximum availability, it is possible to set the slave-validity-factor"></a>For maximum availability, it is possible to set the slave-validity-factor</h1><h1 id="to-a-value-of-0-which-means-that-slaves-will-always-try-to-failover-the"><a href="#to-a-value-of-0-which-means-that-slaves-will-always-try-to-failover-the" class="headerlink" title="to a value of 0, which means, that slaves will always try to failover the"></a>to a value of 0, which means, that slaves will always try to failover the</h1><h1 id="master-regardless-of-the-last-time-they-interacted-with-the-master"><a href="#master-regardless-of-the-last-time-they-interacted-with-the-master" class="headerlink" title="master regardless of the last time they interacted with the master."></a>master regardless of the last time they interacted with the master.</h1><h1 id="However-they’ll-always-try-to-apply-a-delay-proportional-to-their"><a href="#However-they’ll-always-try-to-apply-a-delay-proportional-to-their" class="headerlink" title="(However they’ll always try to apply a delay proportional to their"></a>(However they’ll always try to apply a delay proportional to their</h1><h1 id="offset-rank"><a href="#offset-rank" class="headerlink" title="offset rank)."></a>offset rank).</h1><h1 id="-140"><a href="#-140" class="headerlink" title></a></h1><h1 id="Zero-is-the-only-value-able-to-guarantee-that-when-all-the-partitions-heal"><a href="#Zero-is-the-only-value-able-to-guarantee-that-when-all-the-partitions-heal" class="headerlink" title="Zero is the only value able to guarantee that when all the partitions heal"></a>Zero is the only value able to guarantee that when all the partitions heal</h1><h1 id="the-cluster-will-always-be-able-to-continue"><a href="#the-cluster-will-always-be-able-to-continue" class="headerlink" title="the cluster will always be able to continue."></a>the cluster will always be able to continue.</h1><h1 id="-141"><a href="#-141" class="headerlink" title></a></h1><h1 id="cluster-slave-validity-factor-10"><a href="#cluster-slave-validity-factor-10" class="headerlink" title="cluster-slave-validity-factor 10"></a>cluster-slave-validity-factor 10</h1><h1 id="Cluster-slaves-are-able-to-migrate-to-orphaned-masters-that-are-masters"><a href="#Cluster-slaves-are-able-to-migrate-to-orphaned-masters-that-are-masters" class="headerlink" title="Cluster slaves are able to migrate to orphaned masters, that are masters"></a>Cluster slaves are able to migrate to orphaned masters, that are masters</h1><h1 id="that-are-left-without-working-slaves-This-improves-the-cluster-ability"><a href="#that-are-left-without-working-slaves-This-improves-the-cluster-ability" class="headerlink" title="that are left without working slaves. This improves the cluster ability"></a>that are left without working slaves. This improves the cluster ability</h1><h1 id="to-resist-to-failures-as-otherwise-an-orphaned-master-can’t-be-failed-over"><a href="#to-resist-to-failures-as-otherwise-an-orphaned-master-can’t-be-failed-over" class="headerlink" title="to resist to failures as otherwise an orphaned master can’t be failed over"></a>to resist to failures as otherwise an orphaned master can’t be failed over</h1><h1 id="in-case-of-failure-if-it-has-no-working-slaves"><a href="#in-case-of-failure-if-it-has-no-working-slaves" class="headerlink" title="in case of failure if it has no working slaves."></a>in case of failure if it has no working slaves.</h1><h1 id="-142"><a href="#-142" class="headerlink" title></a></h1><h1 id="Slaves-migrate-to-orphaned-masters-only-if-there-are-still-at-least-a"><a href="#Slaves-migrate-to-orphaned-masters-only-if-there-are-still-at-least-a" class="headerlink" title="Slaves migrate to orphaned masters only if there are still at least a"></a>Slaves migrate to orphaned masters only if there are still at least a</h1><h1 id="given-number-of-other-working-slaves-for-their-old-master-This-number"><a href="#given-number-of-other-working-slaves-for-their-old-master-This-number" class="headerlink" title="given number of other working slaves for their old master. This number"></a>given number of other working slaves for their old master. This number</h1><h1 id="is-the-“migration-barrier”-A-migration-barrier-of-1-means-that-a-slave"><a href="#is-the-“migration-barrier”-A-migration-barrier-of-1-means-that-a-slave" class="headerlink" title="is the “migration barrier”. A migration barrier of 1 means that a slave"></a>is the “migration barrier”. A migration barrier of 1 means that a slave</h1><h1 id="will-migrate-only-if-there-is-at-least-1-other-working-slave-for-its-master"><a href="#will-migrate-only-if-there-is-at-least-1-other-working-slave-for-its-master" class="headerlink" title="will migrate only if there is at least 1 other working slave for its master"></a>will migrate only if there is at least 1 other working slave for its master</h1><h1 id="and-so-forth-It-usually-reflects-the-number-of-slaves-you-want-for-every"><a href="#and-so-forth-It-usually-reflects-the-number-of-slaves-you-want-for-every" class="headerlink" title="and so forth. It usually reflects the number of slaves you want for every"></a>and so forth. It usually reflects the number of slaves you want for every</h1><h1 id="master-in-your-cluster"><a href="#master-in-your-cluster" class="headerlink" title="master in your cluster."></a>master in your cluster.</h1><h1 id="-143"><a href="#-143" class="headerlink" title></a></h1><h1 id="Default-is-1-slaves-migrate-only-if-their-masters-remain-with-at-least"><a href="#Default-is-1-slaves-migrate-only-if-their-masters-remain-with-at-least" class="headerlink" title="Default is 1 (slaves migrate only if their masters remain with at least"></a>Default is 1 (slaves migrate only if their masters remain with at least</h1><h1 id="one-slave-To-disable-migration-just-set-it-to-a-very-large-value"><a href="#one-slave-To-disable-migration-just-set-it-to-a-very-large-value" class="headerlink" title="one slave). To disable migration just set it to a very large value."></a>one slave). To disable migration just set it to a very large value.</h1><h1 id="A-value-of-0-can-be-set-but-is-useful-only-for-debugging-and-dangerous"><a href="#A-value-of-0-can-be-set-but-is-useful-only-for-debugging-and-dangerous" class="headerlink" title="A value of 0 can be set but is useful only for debugging and dangerous"></a>A value of 0 can be set but is useful only for debugging and dangerous</h1><h1 id="in-production"><a href="#in-production" class="headerlink" title="in production."></a>in production.</h1><h1 id="-144"><a href="#-144" class="headerlink" title></a></h1><h1 id="cluster-migration-barrier-1"><a href="#cluster-migration-barrier-1" class="headerlink" title="cluster-migration-barrier 1"></a>cluster-migration-barrier 1</h1><h1 id="By-default-Redis-Cluster-nodes-stop-accepting-queries-if-they-detect-there"><a href="#By-default-Redis-Cluster-nodes-stop-accepting-queries-if-they-detect-there" class="headerlink" title="By default Redis Cluster nodes stop accepting queries if they detect there"></a>By default Redis Cluster nodes stop accepting queries if they detect there</h1><h1 id="is-at-least-an-hash-slot-uncovered-no-available-node-is-serving-it"><a href="#is-at-least-an-hash-slot-uncovered-no-available-node-is-serving-it" class="headerlink" title="is at least an hash slot uncovered (no available node is serving it)."></a>is at least an hash slot uncovered (no available node is serving it).</h1><h1 id="This-way-if-the-cluster-is-partially-down-for-example-a-range-of-hash-slots"><a href="#This-way-if-the-cluster-is-partially-down-for-example-a-range-of-hash-slots" class="headerlink" title="This way if the cluster is partially down (for example a range of hash slots"></a>This way if the cluster is partially down (for example a range of hash slots</h1><h1 id="are-no-longer-covered-all-the-cluster-becomes-eventually-unavailable"><a href="#are-no-longer-covered-all-the-cluster-becomes-eventually-unavailable" class="headerlink" title="are no longer covered) all the cluster becomes, eventually, unavailable."></a>are no longer covered) all the cluster becomes, eventually, unavailable.</h1><h1 id="It-automatically-returns-available-as-soon-as-all-the-slots-are-covered-again"><a href="#It-automatically-returns-available-as-soon-as-all-the-slots-are-covered-again" class="headerlink" title="It automatically returns available as soon as all the slots are covered again."></a>It automatically returns available as soon as all the slots are covered again.</h1><h1 id="-145"><a href="#-145" class="headerlink" title></a></h1><h1 id="However-sometimes-you-want-the-subset-of-the-cluster-which-is-working"><a href="#However-sometimes-you-want-the-subset-of-the-cluster-which-is-working" class="headerlink" title="However sometimes you want the subset of the cluster which is working,"></a>However sometimes you want the subset of the cluster which is working,</h1><h1 id="to-continue-to-accept-queries-for-the-part-of-the-key-space-that-is-still"><a href="#to-continue-to-accept-queries-for-the-part-of-the-key-space-that-is-still" class="headerlink" title="to continue to accept queries for the part of the key space that is still"></a>to continue to accept queries for the part of the key space that is still</h1><h1 id="covered-In-order-to-do-so-just-set-the-cluster-require-full-coverage"><a href="#covered-In-order-to-do-so-just-set-the-cluster-require-full-coverage" class="headerlink" title="covered. In order to do so, just set the cluster-require-full-coverage"></a>covered. In order to do so, just set the cluster-require-full-coverage</h1><h1 id="option-to-no"><a href="#option-to-no" class="headerlink" title="option to no."></a>option to no.</h1><h1 id="-146"><a href="#-146" class="headerlink" title></a></h1><h1 id="cluster-require-full-coverage-yes"><a href="#cluster-require-full-coverage-yes" class="headerlink" title="cluster-require-full-coverage yes"></a>cluster-require-full-coverage yes</h1><h1 id="In-order-to-setup-your-cluster-make-sure-to-read-the-documentation"><a href="#In-order-to-setup-your-cluster-make-sure-to-read-the-documentation" class="headerlink" title="In order to setup your cluster make sure to read the documentation"></a>In order to setup your cluster make sure to read the documentation</h1><h1 id="available-at-http-redis-io-web-site"><a href="#available-at-http-redis-io-web-site" class="headerlink" title="available at http://redis.io web site."></a>available at <a href="http://redis.io" target="_blank" rel="noopener">http://redis.io</a> web site.</h1><p>################################## SLOW LOG ###################################  </p>
<h1 id="The-Redis-Slow-Log-is-a-system-to-log-queries-that-exceeded-a-specified"><a href="#The-Redis-Slow-Log-is-a-system-to-log-queries-that-exceeded-a-specified" class="headerlink" title="The Redis Slow Log is a system to log queries that exceeded a specified"></a>The Redis Slow Log is a system to log queries that exceeded a specified</h1><h1 id="execution-time-The-execution-time-does-not-include-the-I-O-operations"><a href="#execution-time-The-execution-time-does-not-include-the-I-O-operations" class="headerlink" title="execution time. The execution time does not include the I/O operations"></a>execution time. The execution time does not include the I/O operations</h1><h1 id="like-talking-with-the-client-sending-the-reply-and-so-forth"><a href="#like-talking-with-the-client-sending-the-reply-and-so-forth" class="headerlink" title="like talking with the client, sending the reply and so forth,"></a>like talking with the client, sending the reply and so forth,</h1><h1 id="but-just-the-time-needed-to-actually-execute-the-command-this-is-the-only"><a href="#but-just-the-time-needed-to-actually-execute-the-command-this-is-the-only" class="headerlink" title="but just the time needed to actually execute the command (this is the only"></a>but just the time needed to actually execute the command (this is the only</h1><h1 id="stage-of-command-execution-where-the-thread-is-blocked-and-can-not-serve"><a href="#stage-of-command-execution-where-the-thread-is-blocked-and-can-not-serve" class="headerlink" title="stage of command execution where the thread is blocked and can not serve"></a>stage of command execution where the thread is blocked and can not serve</h1><h1 id="other-requests-in-the-meantime"><a href="#other-requests-in-the-meantime" class="headerlink" title="other requests in the meantime)."></a>other requests in the meantime).</h1><h1 id="-147"><a href="#-147" class="headerlink" title></a></h1><h1 id="You-can-configure-the-slow-log-with-two-parameters-one-tells-Redis"><a href="#You-can-configure-the-slow-log-with-two-parameters-one-tells-Redis" class="headerlink" title="You can configure the slow log with two parameters: one tells Redis"></a>You can configure the slow log with two parameters: one tells Redis</h1><h1 id="what-is-the-execution-time-in-microseconds-to-exceed-in-order-for-the"><a href="#what-is-the-execution-time-in-microseconds-to-exceed-in-order-for-the" class="headerlink" title="what is the execution time, in microseconds, to exceed in order for the"></a>what is the execution time, in microseconds, to exceed in order for the</h1><h1 id="command-to-get-logged-and-the-other-parameter-is-the-length-of-the"><a href="#command-to-get-logged-and-the-other-parameter-is-the-length-of-the" class="headerlink" title="command to get logged, and the other parameter is the length of the"></a>command to get logged, and the other parameter is the length of the</h1><h1 id="slow-log-When-a-new-command-is-logged-the-oldest-one-is-removed-from-the"><a href="#slow-log-When-a-new-command-is-logged-the-oldest-one-is-removed-from-the" class="headerlink" title="slow log. When a new command is logged the oldest one is removed from the"></a>slow log. When a new command is logged the oldest one is removed from the</h1><h1 id="queue-of-logged-commands"><a href="#queue-of-logged-commands" class="headerlink" title="queue of logged commands."></a>queue of logged commands.</h1><h1 id="The-following-time-is-expressed-in-microseconds-so-1000000-is-equivalent"><a href="#The-following-time-is-expressed-in-microseconds-so-1000000-is-equivalent" class="headerlink" title="The following time is expressed in microseconds, so 1000000 is equivalent"></a>The following time is expressed in microseconds, so 1000000 is equivalent</h1><h1 id="to-one-second-Note-that-a-negative-number-disables-the-slow-log-while"><a href="#to-one-second-Note-that-a-negative-number-disables-the-slow-log-while" class="headerlink" title="to one second. Note that a negative number disables the slow log, while"></a>to one second. Note that a negative number disables the slow log, while</h1><h1 id="a-value-of-zero-forces-the-logging-of-every-command"><a href="#a-value-of-zero-forces-the-logging-of-every-command" class="headerlink" title="a value of zero forces the logging of every command."></a>a value of zero forces the logging of every command.</h1><p>slowlog-log-slower-than 10000  </p>
<h1 id="There-is-no-limit-to-this-length-Just-be-aware-that-it-will-consume-memory"><a href="#There-is-no-limit-to-this-length-Just-be-aware-that-it-will-consume-memory" class="headerlink" title="There is no limit to this length. Just be aware that it will consume memory."></a>There is no limit to this length. Just be aware that it will consume memory.</h1><h1 id="You-can-reclaim-memory-used-by-the-slow-log-with-SLOWLOG-RESET"><a href="#You-can-reclaim-memory-used-by-the-slow-log-with-SLOWLOG-RESET" class="headerlink" title="You can reclaim memory used by the slow log with SLOWLOG RESET."></a>You can reclaim memory used by the slow log with SLOWLOG RESET.</h1><p>slowlog-max-len 128  </p>
<p>################################ LATENCY MONITOR ##############################  </p>
<h1 id="The-Redis-latency-monitoring-subsystem-samples-different-operations"><a href="#The-Redis-latency-monitoring-subsystem-samples-different-operations" class="headerlink" title="The Redis latency monitoring subsystem samples different operations"></a>The Redis latency monitoring subsystem samples different operations</h1><h1 id="at-runtime-in-order-to-collect-data-related-to-possible-sources-of"><a href="#at-runtime-in-order-to-collect-data-related-to-possible-sources-of" class="headerlink" title="at runtime in order to collect data related to possible sources of"></a>at runtime in order to collect data related to possible sources of</h1><h1 id="latency-of-a-Redis-instance"><a href="#latency-of-a-Redis-instance" class="headerlink" title="latency of a Redis instance."></a>latency of a Redis instance.</h1><h1 id="-148"><a href="#-148" class="headerlink" title></a></h1><h1 id="Via-the-LATENCY-command-this-information-is-available-to-the-user-that-can"><a href="#Via-the-LATENCY-command-this-information-is-available-to-the-user-that-can" class="headerlink" title="Via the LATENCY command this information is available to the user that can"></a>Via the LATENCY command this information is available to the user that can</h1><h1 id="print-graphs-and-obtain-reports"><a href="#print-graphs-and-obtain-reports" class="headerlink" title="print graphs and obtain reports."></a>print graphs and obtain reports.</h1><h1 id="-149"><a href="#-149" class="headerlink" title></a></h1><h1 id="The-system-only-logs-operations-that-were-performed-in-a-time-equal-or"><a href="#The-system-only-logs-operations-that-were-performed-in-a-time-equal-or" class="headerlink" title="The system only logs operations that were performed in a time equal or"></a>The system only logs operations that were performed in a time equal or</h1><h1 id="greater-than-the-amount-of-milliseconds-specified-via-the"><a href="#greater-than-the-amount-of-milliseconds-specified-via-the" class="headerlink" title="greater than the amount of milliseconds specified via the"></a>greater than the amount of milliseconds specified via the</h1><h1 id="latency-monitor-threshold-configuration-directive-When-its-value-is-set"><a href="#latency-monitor-threshold-configuration-directive-When-its-value-is-set" class="headerlink" title="latency-monitor-threshold configuration directive. When its value is set"></a>latency-monitor-threshold configuration directive. When its value is set</h1><h1 id="to-zero-the-latency-monitor-is-turned-off"><a href="#to-zero-the-latency-monitor-is-turned-off" class="headerlink" title="to zero, the latency monitor is turned off."></a>to zero, the latency monitor is turned off.</h1><h1 id="-150"><a href="#-150" class="headerlink" title></a></h1><h1 id="By-default-latency-monitoring-is-disabled-since-it-is-mostly-not-needed"><a href="#By-default-latency-monitoring-is-disabled-since-it-is-mostly-not-needed" class="headerlink" title="By default latency monitoring is disabled since it is mostly not needed"></a>By default latency monitoring is disabled since it is mostly not needed</h1><h1 id="if-you-don’t-have-latency-issues-and-collecting-data-has-a-performance"><a href="#if-you-don’t-have-latency-issues-and-collecting-data-has-a-performance" class="headerlink" title="if you don’t have latency issues, and collecting data has a performance"></a>if you don’t have latency issues, and collecting data has a performance</h1><h1 id="impact-that-while-very-small-can-be-measured-under-big-load-Latency"><a href="#impact-that-while-very-small-can-be-measured-under-big-load-Latency" class="headerlink" title="impact, that while very small, can be measured under big load. Latency"></a>impact, that while very small, can be measured under big load. Latency</h1><h1 id="monitoring-can-easily-be-enabled-at-runtime-using-the-command"><a href="#monitoring-can-easily-be-enabled-at-runtime-using-the-command" class="headerlink" title="monitoring can easily be enabled at runtime using the command"></a>monitoring can easily be enabled at runtime using the command</h1><h1 id="“CONFIG-SET-latency-monitor-threshold-“-if-needed"><a href="#“CONFIG-SET-latency-monitor-threshold-“-if-needed" class="headerlink" title="“CONFIG SET latency-monitor-threshold “ if needed."></a>“CONFIG SET latency-monitor-threshold <milliseconds>“ if needed.</milliseconds></h1><p>latency-monitor-threshold 0  </p>
<p>############################# EVENT NOTIFICATION ##############################  </p>
<h1 id="Redis-can-notify-Pub-Sub-clients-about-events-happening-in-the-key-space"><a href="#Redis-can-notify-Pub-Sub-clients-about-events-happening-in-the-key-space" class="headerlink" title="Redis can notify Pub/Sub clients about events happening in the key space."></a>Redis can notify Pub/Sub clients about events happening in the key space.</h1><h1 id="This-feature-is-documented-at-http-redis-io-topics-notifications"><a href="#This-feature-is-documented-at-http-redis-io-topics-notifications" class="headerlink" title="This feature is documented at http://redis.io/topics/notifications"></a>This feature is documented at <a href="http://redis.io/topics/notifications" target="_blank" rel="noopener">http://redis.io/topics/notifications</a></h1><h1 id="-151"><a href="#-151" class="headerlink" title></a></h1><h1 id="For-instance-if-keyspace-events-notification-is-enabled-and-a-client"><a href="#For-instance-if-keyspace-events-notification-is-enabled-and-a-client" class="headerlink" title="For instance if keyspace events notification is enabled, and a client"></a>For instance if keyspace events notification is enabled, and a client</h1><h1 id="performs-a-DEL-operation-on-key-“foo”-stored-in-the-Database-0-two"><a href="#performs-a-DEL-operation-on-key-“foo”-stored-in-the-Database-0-two" class="headerlink" title="performs a DEL operation on key “foo” stored in the Database 0, two"></a>performs a DEL operation on key “foo” stored in the Database 0, two</h1><h1 id="messages-will-be-published-via-Pub-Sub"><a href="#messages-will-be-published-via-Pub-Sub" class="headerlink" title="messages will be published via Pub/Sub:"></a>messages will be published via Pub/Sub:</h1><h1 id="-152"><a href="#-152" class="headerlink" title></a></h1><h1 id="PUBLISH-keyspace-0-foo-del"><a href="#PUBLISH-keyspace-0-foo-del" class="headerlink" title="PUBLISH keyspace@0:foo del"></a>PUBLISH <strong>keyspace@0</strong>:foo del</h1><h1 id="PUBLISH-keyevent-0-del-foo"><a href="#PUBLISH-keyevent-0-del-foo" class="headerlink" title="PUBLISH keyevent@0:del foo"></a>PUBLISH <strong>keyevent@0</strong>:del foo</h1><h1 id="-153"><a href="#-153" class="headerlink" title></a></h1><h1 id="It-is-possible-to-select-the-events-that-Redis-will-notify-among-a-set"><a href="#It-is-possible-to-select-the-events-that-Redis-will-notify-among-a-set" class="headerlink" title="It is possible to select the events that Redis will notify among a set"></a>It is possible to select the events that Redis will notify among a set</h1><h1 id="of-classes-Every-class-is-identified-by-a-single-character"><a href="#of-classes-Every-class-is-identified-by-a-single-character" class="headerlink" title="of classes. Every class is identified by a single character:"></a>of classes. Every class is identified by a single character:</h1><h1 id="-154"><a href="#-154" class="headerlink" title></a></h1><h1 id="K-Keyspace-events-published-with-keyspace-prefix"><a href="#K-Keyspace-events-published-with-keyspace-prefix" class="headerlink" title="K     Keyspace events, published with keyspace@ prefix."></a>K     Keyspace events, published with <strong>keyspace@<db></db></strong> prefix.</h1><h1 id="E-Keyevent-events-published-with-keyevent-prefix"><a href="#E-Keyevent-events-published-with-keyevent-prefix" class="headerlink" title="E     Keyevent events, published with keyevent@ prefix."></a>E     Keyevent events, published with <strong>keyevent@<db></db></strong> prefix.</h1><h1 id="g-Generic-commands-non-type-specific-like-DEL-EXPIRE-RENAME-…"><a href="#g-Generic-commands-non-type-specific-like-DEL-EXPIRE-RENAME-…" class="headerlink" title="g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, …"></a>g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, …</h1><h1 id="String-commands"><a href="#String-commands" class="headerlink" title="$     String commands"></a>$     String commands</h1><h1 id="l-List-commands"><a href="#l-List-commands" class="headerlink" title="l     List commands"></a>l     List commands</h1><h1 id="s-Set-commands"><a href="#s-Set-commands" class="headerlink" title="s     Set commands"></a>s     Set commands</h1><h1 id="h-Hash-commands"><a href="#h-Hash-commands" class="headerlink" title="h     Hash commands"></a>h     Hash commands</h1><h1 id="z-Sorted-set-commands"><a href="#z-Sorted-set-commands" class="headerlink" title="z     Sorted set commands"></a>z     Sorted set commands</h1><h1 id="x-Expired-events-events-generated-every-time-a-key-expires"><a href="#x-Expired-events-events-generated-every-time-a-key-expires" class="headerlink" title="x     Expired events (events generated every time a key expires)"></a>x     Expired events (events generated every time a key expires)</h1><h1 id="e-Evicted-events-events-generated-when-a-key-is-evicted-for-maxmemory"><a href="#e-Evicted-events-events-generated-when-a-key-is-evicted-for-maxmemory" class="headerlink" title="e     Evicted events (events generated when a key is evicted for maxmemory)"></a>e     Evicted events (events generated when a key is evicted for maxmemory)</h1><h1 id="A-Alias-for-g-lshzxe-so-that-the-“AKE”-string-means-all-the-events"><a href="#A-Alias-for-g-lshzxe-so-that-the-“AKE”-string-means-all-the-events" class="headerlink" title="A     Alias for g$lshzxe, so that the “AKE” string means all the events."></a>A     Alias for g$lshzxe, so that the “AKE” string means all the events.</h1><h1 id="-155"><a href="#-155" class="headerlink" title></a></h1><h1 id="The-“notify-keyspace-events”-takes-as-argument-a-string-that-is-composed"><a href="#The-“notify-keyspace-events”-takes-as-argument-a-string-that-is-composed" class="headerlink" title="The “notify-keyspace-events” takes as argument a string that is composed"></a>The “notify-keyspace-events” takes as argument a string that is composed</h1><h1 id="of-zero-or-multiple-characters-The-empty-string-means-that-notifications"><a href="#of-zero-or-multiple-characters-The-empty-string-means-that-notifications" class="headerlink" title="of zero or multiple characters. The empty string means that notifications"></a>of zero or multiple characters. The empty string means that notifications</h1><h1 id="are-disabled"><a href="#are-disabled" class="headerlink" title="are disabled."></a>are disabled.</h1><h1 id="-156"><a href="#-156" class="headerlink" title></a></h1><h1 id="Example-to-enable-list-and-generic-events-from-the-point-of-view-of-the"><a href="#Example-to-enable-list-and-generic-events-from-the-point-of-view-of-the" class="headerlink" title="Example: to enable list and generic events, from the point of view of the"></a>Example: to enable list and generic events, from the point of view of the</h1><h1 id="event-name-use"><a href="#event-name-use" class="headerlink" title="event name, use:"></a>event name, use:</h1><h1 id="-157"><a href="#-157" class="headerlink" title></a></h1><h1 id="notify-keyspace-events-Elg"><a href="#notify-keyspace-events-Elg" class="headerlink" title="notify-keyspace-events Elg"></a>notify-keyspace-events Elg</h1><h1 id="-158"><a href="#-158" class="headerlink" title></a></h1><h1 id="Example-2-to-get-the-stream-of-the-expired-keys-subscribing-to-channel"><a href="#Example-2-to-get-the-stream-of-the-expired-keys-subscribing-to-channel" class="headerlink" title="Example 2: to get the stream of the expired keys subscribing to channel"></a>Example 2: to get the stream of the expired keys subscribing to channel</h1><h1 id="name-keyevent-0-expired-use"><a href="#name-keyevent-0-expired-use" class="headerlink" title="name keyevent@0:expired use:"></a>name <strong>keyevent@0</strong>:expired use:</h1><h1 id="-159"><a href="#-159" class="headerlink" title></a></h1><h1 id="notify-keyspace-events-Ex"><a href="#notify-keyspace-events-Ex" class="headerlink" title="notify-keyspace-events Ex"></a>notify-keyspace-events Ex</h1><h1 id="-160"><a href="#-160" class="headerlink" title></a></h1><h1 id="By-default-all-notifications-are-disabled-because-most-users-don’t-need"><a href="#By-default-all-notifications-are-disabled-because-most-users-don’t-need" class="headerlink" title="By default all notifications are disabled because most users don’t need"></a>By default all notifications are disabled because most users don’t need</h1><h1 id="this-feature-and-the-feature-has-some-overhead-Note-that-if-you-don’t"><a href="#this-feature-and-the-feature-has-some-overhead-Note-that-if-you-don’t" class="headerlink" title="this feature and the feature has some overhead. Note that if you don’t"></a>this feature and the feature has some overhead. Note that if you don’t</h1><h1 id="specify-at-least-one-of-K-or-E-no-events-will-be-delivered"><a href="#specify-at-least-one-of-K-or-E-no-events-will-be-delivered" class="headerlink" title="specify at least one of K or E, no events will be delivered."></a>specify at least one of K or E, no events will be delivered.</h1><p>notify-keyspace-events “”  </p>
<p>############################### ADVANCED CONFIG ###############################  </p>
<h1 id="Hashes-are-encoded-using-a-memory-efficient-data-structure-when-they-have-a"><a href="#Hashes-are-encoded-using-a-memory-efficient-data-structure-when-they-have-a" class="headerlink" title="Hashes are encoded using a memory efficient data structure when they have a"></a>Hashes are encoded using a memory efficient data structure when they have a</h1><h1 id="small-number-of-entries-and-the-biggest-entry-does-not-exceed-a-given"><a href="#small-number-of-entries-and-the-biggest-entry-does-not-exceed-a-given" class="headerlink" title="small number of entries, and the biggest entry does not exceed a given"></a>small number of entries, and the biggest entry does not exceed a given</h1><h1 id="threshold-These-thresholds-can-be-configured-using-the-following-directives"><a href="#threshold-These-thresholds-can-be-configured-using-the-following-directives" class="headerlink" title="threshold. These thresholds can be configured using the following directives."></a>threshold. These thresholds can be configured using the following directives.</h1><p>hash-max-ziplist-entries 512<br>hash-max-ziplist-value 64  </p>
<h1 id="Lists-are-also-encoded-in-a-special-way-to-save-a-lot-of-space"><a href="#Lists-are-also-encoded-in-a-special-way-to-save-a-lot-of-space" class="headerlink" title="Lists are also encoded in a special way to save a lot of space."></a>Lists are also encoded in a special way to save a lot of space.</h1><h1 id="The-number-of-entries-allowed-per-internal-list-node-can-be-specified"><a href="#The-number-of-entries-allowed-per-internal-list-node-can-be-specified" class="headerlink" title="The number of entries allowed per internal list node can be specified"></a>The number of entries allowed per internal list node can be specified</h1><h1 id="as-a-fixed-maximum-size-or-a-maximum-number-of-elements"><a href="#as-a-fixed-maximum-size-or-a-maximum-number-of-elements" class="headerlink" title="as a fixed maximum size or a maximum number of elements."></a>as a fixed maximum size or a maximum number of elements.</h1><h1 id="For-a-fixed-maximum-size-use-5-through-1-meaning"><a href="#For-a-fixed-maximum-size-use-5-through-1-meaning" class="headerlink" title="For a fixed maximum size, use -5 through -1, meaning:"></a>For a fixed maximum size, use -5 through -1, meaning:</h1><h1 id="5-max-size-64-Kb-lt-–-not-recommended-for-normal-workloads"><a href="#5-max-size-64-Kb-lt-–-not-recommended-for-normal-workloads" class="headerlink" title="-5: max size: 64 Kb  &lt;– not recommended for normal workloads"></a>-5: max size: 64 Kb  &lt;– not recommended for normal workloads</h1><h1 id="4-max-size-32-Kb-lt-–-not-recommended"><a href="#4-max-size-32-Kb-lt-–-not-recommended" class="headerlink" title="-4: max size: 32 Kb  &lt;– not recommended"></a>-4: max size: 32 Kb  &lt;– not recommended</h1><h1 id="3-max-size-16-Kb-lt-–-probably-not-recommended"><a href="#3-max-size-16-Kb-lt-–-probably-not-recommended" class="headerlink" title="-3: max size: 16 Kb  &lt;– probably not recommended"></a>-3: max size: 16 Kb  &lt;– probably not recommended</h1><h1 id="2-max-size-8-Kb-lt-–-good"><a href="#2-max-size-8-Kb-lt-–-good" class="headerlink" title="-2: max size: 8 Kb   &lt;– good"></a>-2: max size: 8 Kb   &lt;– good</h1><h1 id="1-max-size-4-Kb-lt-–-good"><a href="#1-max-size-4-Kb-lt-–-good" class="headerlink" title="-1: max size: 4 Kb   &lt;– good"></a>-1: max size: 4 Kb   &lt;– good</h1><h1 id="Positive-numbers-mean-store-up-to-exactly-that-number-of-elements"><a href="#Positive-numbers-mean-store-up-to-exactly-that-number-of-elements" class="headerlink" title="Positive numbers mean store up to exactly that number of elements"></a>Positive numbers mean store up to <em>exactly</em> that number of elements</h1><h1 id="per-list-node"><a href="#per-list-node" class="headerlink" title="per list node."></a>per list node.</h1><h1 id="The-highest-performing-option-is-usually-2-8-Kb-size-or-1-4-Kb-size"><a href="#The-highest-performing-option-is-usually-2-8-Kb-size-or-1-4-Kb-size" class="headerlink" title="The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),"></a>The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</h1><h1 id="but-if-your-use-case-is-unique-adjust-the-settings-as-necessary"><a href="#but-if-your-use-case-is-unique-adjust-the-settings-as-necessary" class="headerlink" title="but if your use case is unique, adjust the settings as necessary."></a>but if your use case is unique, adjust the settings as necessary.</h1><p>list-max-ziplist-size -2  </p>
<h1 id="Lists-may-also-be-compressed"><a href="#Lists-may-also-be-compressed" class="headerlink" title="Lists may also be compressed."></a>Lists may also be compressed.</h1><h1 id="Compress-depth-is-the-number-of-quicklist-ziplist-nodes-from-each-side-of"><a href="#Compress-depth-is-the-number-of-quicklist-ziplist-nodes-from-each-side-of" class="headerlink" title="Compress depth is the number of quicklist ziplist nodes from each side of"></a>Compress depth is the number of quicklist ziplist nodes from <em>each</em> side of</h1><h1 id="the-list-to-exclude-from-compression-The-head-and-tail-of-the-list"><a href="#the-list-to-exclude-from-compression-The-head-and-tail-of-the-list" class="headerlink" title="the list to exclude from compression.  The head and tail of the list"></a>the list to <em>exclude</em> from compression.  The head and tail of the list</h1><h1 id="are-always-uncompressed-for-fast-push-pop-operations-Settings-are"><a href="#are-always-uncompressed-for-fast-push-pop-operations-Settings-are" class="headerlink" title="are always uncompressed for fast push/pop operations.  Settings are:"></a>are always uncompressed for fast push/pop operations.  Settings are:</h1><h1 id="0-disable-all-list-compression"><a href="#0-disable-all-list-compression" class="headerlink" title="0: disable all list compression"></a>0: disable all list compression</h1><h1 id="1-depth-1-means-“don’t-start-compressing-until-after-1-node-into-the-list"><a href="#1-depth-1-means-“don’t-start-compressing-until-after-1-node-into-the-list" class="headerlink" title="1: depth 1 means “don’t start compressing until after 1 node into the list,"></a>1: depth 1 means “don’t start compressing until after 1 node into the list,</h1><h1 id="going-from-either-the-head-or-tail”"><a href="#going-from-either-the-head-or-tail”" class="headerlink" title="going from either the head or tail”"></a>going from either the head or tail”</h1><h1 id="So-head-gt-node-gt-node-gt-…-gt-node-gt-tail"><a href="#So-head-gt-node-gt-node-gt-…-gt-node-gt-tail" class="headerlink" title="So: [head]-&gt;node-&gt;node-&gt;…-&gt;node-&gt;[tail]"></a>So: [head]-&gt;node-&gt;node-&gt;…-&gt;node-&gt;[tail]</h1><h1 id="head-tail-will-always-be-uncompressed-inner-nodes-will-compress"><a href="#head-tail-will-always-be-uncompressed-inner-nodes-will-compress" class="headerlink" title="[head], [tail] will always be uncompressed; inner nodes will compress."></a>[head], [tail] will always be uncompressed; inner nodes will compress.</h1><h1 id="2-head-gt-next-gt-node-gt-node-gt-…-gt-node-gt-prev-gt-tail"><a href="#2-head-gt-next-gt-node-gt-node-gt-…-gt-node-gt-prev-gt-tail" class="headerlink" title="2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;…-&gt;node-&gt;[prev]-&gt;[tail]"></a>2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;…-&gt;node-&gt;[prev]-&gt;[tail]</h1><h1 id="2-here-means-don’t-compress-head-or-head-gt-next-or-tail-gt-prev-or-tail"><a href="#2-here-means-don’t-compress-head-or-head-gt-next-or-tail-gt-prev-or-tail" class="headerlink" title="2 here means: don’t compress head or head-&gt;next or tail-&gt;prev or tail,"></a>2 here means: don’t compress head or head-&gt;next or tail-&gt;prev or tail,</h1><h1 id="but-compress-all-nodes-between-them"><a href="#but-compress-all-nodes-between-them" class="headerlink" title="but compress all nodes between them."></a>but compress all nodes between them.</h1><h1 id="3-head-gt-next-gt-next-gt-node-gt-node-gt-…-gt-node-gt-prev-gt-prev-gt-tail"><a href="#3-head-gt-next-gt-next-gt-node-gt-node-gt-…-gt-node-gt-prev-gt-prev-gt-tail" class="headerlink" title="3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;…-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]"></a>3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;…-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</h1><h1 id="etc"><a href="#etc" class="headerlink" title="etc."></a>etc.</h1><p>list-compress-depth 0  </p>
<h1 id="Sets-have-a-special-encoding-in-just-one-case-when-a-set-is-composed"><a href="#Sets-have-a-special-encoding-in-just-one-case-when-a-set-is-composed" class="headerlink" title="Sets have a special encoding in just one case: when a set is composed"></a>Sets have a special encoding in just one case: when a set is composed</h1><h1 id="of-just-strings-that-happen-to-be-integers-in-radix-10-in-the-range"><a href="#of-just-strings-that-happen-to-be-integers-in-radix-10-in-the-range" class="headerlink" title="of just strings that happen to be integers in radix 10 in the range"></a>of just strings that happen to be integers in radix 10 in the range</h1><h1 id="of-64-bit-signed-integers"><a href="#of-64-bit-signed-integers" class="headerlink" title="of 64 bit signed integers."></a>of 64 bit signed integers.</h1><h1 id="The-following-configuration-setting-sets-the-limit-in-the-size-of-the"><a href="#The-following-configuration-setting-sets-the-limit-in-the-size-of-the" class="headerlink" title="The following configuration setting sets the limit in the size of the"></a>The following configuration setting sets the limit in the size of the</h1><h1 id="set-in-order-to-use-this-special-memory-saving-encoding"><a href="#set-in-order-to-use-this-special-memory-saving-encoding" class="headerlink" title="set in order to use this special memory saving encoding."></a>set in order to use this special memory saving encoding.</h1><p>set-max-intset-entries 512  </p>
<h1 id="Similarly-to-hashes-and-lists-sorted-sets-are-also-specially-encoded-in"><a href="#Similarly-to-hashes-and-lists-sorted-sets-are-also-specially-encoded-in" class="headerlink" title="Similarly to hashes and lists, sorted sets are also specially encoded in"></a>Similarly to hashes and lists, sorted sets are also specially encoded in</h1><h1 id="order-to-save-a-lot-of-space-This-encoding-is-only-used-when-the-length-and"><a href="#order-to-save-a-lot-of-space-This-encoding-is-only-used-when-the-length-and" class="headerlink" title="order to save a lot of space. This encoding is only used when the length and"></a>order to save a lot of space. This encoding is only used when the length and</h1><h1 id="elements-of-a-sorted-set-are-below-the-following-limits"><a href="#elements-of-a-sorted-set-are-below-the-following-limits" class="headerlink" title="elements of a sorted set are below the following limits:"></a>elements of a sorted set are below the following limits:</h1><p>zset-max-ziplist-entries 128<br>zset-max-ziplist-value 64  </p>
<h1 id="HyperLogLog-sparse-representation-bytes-limit-The-limit-includes-the"><a href="#HyperLogLog-sparse-representation-bytes-limit-The-limit-includes-the" class="headerlink" title="HyperLogLog sparse representation bytes limit. The limit includes the"></a>HyperLogLog sparse representation bytes limit. The limit includes the</h1><h1 id="16-bytes-header-When-an-HyperLogLog-using-the-sparse-representation-crosses"><a href="#16-bytes-header-When-an-HyperLogLog-using-the-sparse-representation-crosses" class="headerlink" title="16 bytes header. When an HyperLogLog using the sparse representation crosses"></a>16 bytes header. When an HyperLogLog using the sparse representation crosses</h1><h1 id="this-limit-it-is-converted-into-the-dense-representation"><a href="#this-limit-it-is-converted-into-the-dense-representation" class="headerlink" title="this limit, it is converted into the dense representation."></a>this limit, it is converted into the dense representation.</h1><h1 id="-161"><a href="#-161" class="headerlink" title></a></h1><h1 id="A-value-greater-than-16000-is-totally-useless-since-at-that-point-the"><a href="#A-value-greater-than-16000-is-totally-useless-since-at-that-point-the" class="headerlink" title="A value greater than 16000 is totally useless, since at that point the"></a>A value greater than 16000 is totally useless, since at that point the</h1><h1 id="dense-representation-is-more-memory-efficient"><a href="#dense-representation-is-more-memory-efficient" class="headerlink" title="dense representation is more memory efficient."></a>dense representation is more memory efficient.</h1><h1 id="-162"><a href="#-162" class="headerlink" title></a></h1><h1 id="The-suggested-value-is-3000-in-order-to-have-the-benefits-of"><a href="#The-suggested-value-is-3000-in-order-to-have-the-benefits-of" class="headerlink" title="The suggested value is ~ 3000 in order to have the benefits of"></a>The suggested value is ~ 3000 in order to have the benefits of</h1><h1 id="the-space-efficient-encoding-without-slowing-down-too-much-PFADD"><a href="#the-space-efficient-encoding-without-slowing-down-too-much-PFADD" class="headerlink" title="the space efficient encoding without slowing down too much PFADD,"></a>the space efficient encoding without slowing down too much PFADD,</h1><h1 id="which-is-O-N-with-the-sparse-encoding-The-value-can-be-raised-to"><a href="#which-is-O-N-with-the-sparse-encoding-The-value-can-be-raised-to" class="headerlink" title="which is O(N) with the sparse encoding. The value can be raised to"></a>which is O(N) with the sparse encoding. The value can be raised to</h1><h1 id="10000-when-CPU-is-not-a-concern-but-space-is-and-the-data-set-is"><a href="#10000-when-CPU-is-not-a-concern-but-space-is-and-the-data-set-is" class="headerlink" title="~ 10000 when CPU is not a concern, but space is, and the data set is"></a>~ 10000 when CPU is not a concern, but space is, and the data set is</h1><h1 id="composed-of-many-HyperLogLogs-with-cardinality-in-the-0-15000-range"><a href="#composed-of-many-HyperLogLogs-with-cardinality-in-the-0-15000-range" class="headerlink" title="composed of many HyperLogLogs with cardinality in the 0 - 15000 range."></a>composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</h1><p>hll-sparse-max-bytes 3000  </p>
<h1 id="Active-rehashing-uses-1-millisecond-every-100-milliseconds-of-CPU-time-in"><a href="#Active-rehashing-uses-1-millisecond-every-100-milliseconds-of-CPU-time-in" class="headerlink" title="Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in"></a>Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</h1><h1 id="order-to-help-rehashing-the-main-Redis-hash-table-the-one-mapping-top-level"><a href="#order-to-help-rehashing-the-main-Redis-hash-table-the-one-mapping-top-level" class="headerlink" title="order to help rehashing the main Redis hash table (the one mapping top-level"></a>order to help rehashing the main Redis hash table (the one mapping top-level</h1><h1 id="keys-to-values-The-hash-table-implementation-Redis-uses-see-dict-c"><a href="#keys-to-values-The-hash-table-implementation-Redis-uses-see-dict-c" class="headerlink" title="keys to values). The hash table implementation Redis uses (see dict.c)"></a>keys to values). The hash table implementation Redis uses (see dict.c)</h1><h1 id="performs-a-lazy-rehashing-the-more-operation-you-run-into-a-hash-table"><a href="#performs-a-lazy-rehashing-the-more-operation-you-run-into-a-hash-table" class="headerlink" title="performs a lazy rehashing: the more operation you run into a hash table"></a>performs a lazy rehashing: the more operation you run into a hash table</h1><h1 id="that-is-rehashing-the-more-rehashing-“steps”-are-performed-so-if-the"><a href="#that-is-rehashing-the-more-rehashing-“steps”-are-performed-so-if-the" class="headerlink" title="that is rehashing, the more rehashing “steps” are performed, so if the"></a>that is rehashing, the more rehashing “steps” are performed, so if the</h1><h1 id="server-is-idle-the-rehashing-is-never-complete-and-some-more-memory-is-used"><a href="#server-is-idle-the-rehashing-is-never-complete-and-some-more-memory-is-used" class="headerlink" title="server is idle the rehashing is never complete and some more memory is used"></a>server is idle the rehashing is never complete and some more memory is used</h1><h1 id="by-the-hash-table"><a href="#by-the-hash-table" class="headerlink" title="by the hash table."></a>by the hash table.</h1><h1 id="-163"><a href="#-163" class="headerlink" title></a></h1><h1 id="The-default-is-to-use-this-millisecond-10-times-every-second-in-order-to"><a href="#The-default-is-to-use-this-millisecond-10-times-every-second-in-order-to" class="headerlink" title="The default is to use this millisecond 10 times every second in order to"></a>The default is to use this millisecond 10 times every second in order to</h1><h1 id="actively-rehash-the-main-dictionaries-freeing-memory-when-possible"><a href="#actively-rehash-the-main-dictionaries-freeing-memory-when-possible" class="headerlink" title="actively rehash the main dictionaries, freeing memory when possible."></a>actively rehash the main dictionaries, freeing memory when possible.</h1><h1 id="-164"><a href="#-164" class="headerlink" title></a></h1><h1 id="If-unsure"><a href="#If-unsure" class="headerlink" title="If unsure:"></a>If unsure:</h1><h1 id="use-“activerehashing-no”-if-you-have-hard-latency-requirements-and-it-is"><a href="#use-“activerehashing-no”-if-you-have-hard-latency-requirements-and-it-is" class="headerlink" title="use “activerehashing no” if you have hard latency requirements and it is"></a>use “activerehashing no” if you have hard latency requirements and it is</h1><h1 id="not-a-good-thing-in-your-environment-that-Redis-can-reply-from-time-to-time"><a href="#not-a-good-thing-in-your-environment-that-Redis-can-reply-from-time-to-time" class="headerlink" title="not a good thing in your environment that Redis can reply from time to time"></a>not a good thing in your environment that Redis can reply from time to time</h1><h1 id="to-queries-with-2-milliseconds-delay"><a href="#to-queries-with-2-milliseconds-delay" class="headerlink" title="to queries with 2 milliseconds delay."></a>to queries with 2 milliseconds delay.</h1><h1 id="-165"><a href="#-165" class="headerlink" title></a></h1><h1 id="use-“activerehashing-yes”-if-you-don’t-have-such-hard-requirements-but"><a href="#use-“activerehashing-yes”-if-you-don’t-have-such-hard-requirements-but" class="headerlink" title="use “activerehashing yes” if you don’t have such hard requirements but"></a>use “activerehashing yes” if you don’t have such hard requirements but</h1><h1 id="want-to-free-memory-asap-when-possible"><a href="#want-to-free-memory-asap-when-possible" class="headerlink" title="want to free memory asap when possible."></a>want to free memory asap when possible.</h1><p>activerehashing yes  </p>
<h1 id="The-client-output-buffer-limits-can-be-used-to-force-disconnection-of-clients"><a href="#The-client-output-buffer-limits-can-be-used-to-force-disconnection-of-clients" class="headerlink" title="The client output buffer limits can be used to force disconnection of clients"></a>The client output buffer limits can be used to force disconnection of clients</h1><h1 id="that-are-not-reading-data-from-the-server-fast-enough-for-some-reason-a"><a href="#that-are-not-reading-data-from-the-server-fast-enough-for-some-reason-a" class="headerlink" title="that are not reading data from the server fast enough for some reason (a"></a>that are not reading data from the server fast enough for some reason (a</h1><h1 id="common-reason-is-that-a-Pub-Sub-client-can’t-consume-messages-as-fast-as-the"><a href="#common-reason-is-that-a-Pub-Sub-client-can’t-consume-messages-as-fast-as-the" class="headerlink" title="common reason is that a Pub/Sub client can’t consume messages as fast as the"></a>common reason is that a Pub/Sub client can’t consume messages as fast as the</h1><h1 id="publisher-can-produce-them"><a href="#publisher-can-produce-them" class="headerlink" title="publisher can produce them)."></a>publisher can produce them).</h1><h1 id="-166"><a href="#-166" class="headerlink" title></a></h1><h1 id="The-limit-can-be-set-differently-for-the-three-different-classes-of-clients"><a href="#The-limit-can-be-set-differently-for-the-three-different-classes-of-clients" class="headerlink" title="The limit can be set differently for the three different classes of clients:"></a>The limit can be set differently for the three different classes of clients:</h1><h1 id="-167"><a href="#-167" class="headerlink" title></a></h1><h1 id="normal-gt-normal-clients-including-MONITOR-clients"><a href="#normal-gt-normal-clients-including-MONITOR-clients" class="headerlink" title="normal -&gt; normal clients including MONITOR clients"></a>normal -&gt; normal clients including MONITOR clients</h1><h1 id="slave-gt-slave-clients"><a href="#slave-gt-slave-clients" class="headerlink" title="slave  -&gt; slave clients"></a>slave  -&gt; slave clients</h1><h1 id="pubsub-gt-clients-subscribed-to-at-least-one-pubsub-channel-or-pattern"><a href="#pubsub-gt-clients-subscribed-to-at-least-one-pubsub-channel-or-pattern" class="headerlink" title="pubsub -&gt; clients subscribed to at least one pubsub channel or pattern"></a>pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</h1><h1 id="-168"><a href="#-168" class="headerlink" title></a></h1><h1 id="The-syntax-of-every-client-output-buffer-limit-directive-is-the-following"><a href="#The-syntax-of-every-client-output-buffer-limit-directive-is-the-following" class="headerlink" title="The syntax of every client-output-buffer-limit directive is the following:"></a>The syntax of every client-output-buffer-limit directive is the following:</h1><h1 id="-169"><a href="#-169" class="headerlink" title></a></h1><h1 id="client-output-buffer-limit"><a href="#client-output-buffer-limit" class="headerlink" title="client-output-buffer-limit    "></a>client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds></soft></soft></hard></class></h1><h1 id="-170"><a href="#-170" class="headerlink" title></a></h1><h1 id="A-client-is-immediately-disconnected-once-the-hard-limit-is-reached-or-if"><a href="#A-client-is-immediately-disconnected-once-the-hard-limit-is-reached-or-if" class="headerlink" title="A client is immediately disconnected once the hard limit is reached, or if"></a>A client is immediately disconnected once the hard limit is reached, or if</h1><h1 id="the-soft-limit-is-reached-and-remains-reached-for-the-specified-number-of"><a href="#the-soft-limit-is-reached-and-remains-reached-for-the-specified-number-of" class="headerlink" title="the soft limit is reached and remains reached for the specified number of"></a>the soft limit is reached and remains reached for the specified number of</h1><h1 id="seconds-continuously"><a href="#seconds-continuously" class="headerlink" title="seconds (continuously)."></a>seconds (continuously).</h1><h1 id="So-for-instance-if-the-hard-limit-is-32-megabytes-and-the-soft-limit-is"><a href="#So-for-instance-if-the-hard-limit-is-32-megabytes-and-the-soft-limit-is" class="headerlink" title="So for instance if the hard limit is 32 megabytes and the soft limit is"></a>So for instance if the hard limit is 32 megabytes and the soft limit is</h1><h1 id="16-megabytes-10-seconds-the-client-will-get-disconnected-immediately"><a href="#16-megabytes-10-seconds-the-client-will-get-disconnected-immediately" class="headerlink" title="16 megabytes / 10 seconds, the client will get disconnected immediately"></a>16 megabytes / 10 seconds, the client will get disconnected immediately</h1><h1 id="if-the-size-of-the-output-buffers-reach-32-megabytes-but-will-also-get"><a href="#if-the-size-of-the-output-buffers-reach-32-megabytes-but-will-also-get" class="headerlink" title="if the size of the output buffers reach 32 megabytes, but will also get"></a>if the size of the output buffers reach 32 megabytes, but will also get</h1><h1 id="disconnected-if-the-client-reaches-16-megabytes-and-continuously-overcomes"><a href="#disconnected-if-the-client-reaches-16-megabytes-and-continuously-overcomes" class="headerlink" title="disconnected if the client reaches 16 megabytes and continuously overcomes"></a>disconnected if the client reaches 16 megabytes and continuously overcomes</h1><h1 id="the-limit-for-10-seconds"><a href="#the-limit-for-10-seconds" class="headerlink" title="the limit for 10 seconds."></a>the limit for 10 seconds.</h1><h1 id="-171"><a href="#-171" class="headerlink" title></a></h1><h1 id="By-default-normal-clients-are-not-limited-because-they-don’t-receive-data"><a href="#By-default-normal-clients-are-not-limited-because-they-don’t-receive-data" class="headerlink" title="By default normal clients are not limited because they don’t receive data"></a>By default normal clients are not limited because they don’t receive data</h1><h1 id="without-asking-in-a-push-way-but-just-after-a-request-so-only"><a href="#without-asking-in-a-push-way-but-just-after-a-request-so-only" class="headerlink" title="without asking (in a push way), but just after a request, so only"></a>without asking (in a push way), but just after a request, so only</h1><h1 id="asynchronous-clients-may-create-a-scenario-where-data-is-requested-faster"><a href="#asynchronous-clients-may-create-a-scenario-where-data-is-requested-faster" class="headerlink" title="asynchronous clients may create a scenario where data is requested faster"></a>asynchronous clients may create a scenario where data is requested faster</h1><h1 id="than-it-can-read"><a href="#than-it-can-read" class="headerlink" title="than it can read."></a>than it can read.</h1><h1 id="-172"><a href="#-172" class="headerlink" title></a></h1><h1 id="Instead-there-is-a-default-limit-for-pubsub-and-slave-clients-since"><a href="#Instead-there-is-a-default-limit-for-pubsub-and-slave-clients-since" class="headerlink" title="Instead there is a default limit for pubsub and slave clients, since"></a>Instead there is a default limit for pubsub and slave clients, since</h1><h1 id="subscribers-and-slaves-receive-data-in-a-push-fashion"><a href="#subscribers-and-slaves-receive-data-in-a-push-fashion" class="headerlink" title="subscribers and slaves receive data in a push fashion."></a>subscribers and slaves receive data in a push fashion.</h1><h1 id="-173"><a href="#-173" class="headerlink" title></a></h1><h1 id="Both-the-hard-or-the-soft-limit-can-be-disabled-by-setting-them-to-zero"><a href="#Both-the-hard-or-the-soft-limit-can-be-disabled-by-setting-them-to-zero" class="headerlink" title="Both the hard or the soft limit can be disabled by setting them to zero."></a>Both the hard or the soft limit can be disabled by setting them to zero.</h1><p>client-output-buffer-limit normal 0 0 0<br>client-output-buffer-limit slave 256mb 64mb 60<br>client-output-buffer-limit pubsub 32mb 8mb 60  </p>
<h1 id="Redis-calls-an-internal-function-to-perform-many-background-tasks-like"><a href="#Redis-calls-an-internal-function-to-perform-many-background-tasks-like" class="headerlink" title="Redis calls an internal function to perform many background tasks, like"></a>Redis calls an internal function to perform many background tasks, like</h1><h1 id="closing-connections-of-clients-in-timeout-purging-expired-keys-that-are"><a href="#closing-connections-of-clients-in-timeout-purging-expired-keys-that-are" class="headerlink" title="closing connections of clients in timeout, purging expired keys that are"></a>closing connections of clients in timeout, purging expired keys that are</h1><h1 id="never-requested-and-so-forth"><a href="#never-requested-and-so-forth" class="headerlink" title="never requested, and so forth."></a>never requested, and so forth.</h1><h1 id="-174"><a href="#-174" class="headerlink" title></a></h1><h1 id="Not-all-tasks-are-performed-with-the-same-frequency-but-Redis-checks-for"><a href="#Not-all-tasks-are-performed-with-the-same-frequency-but-Redis-checks-for" class="headerlink" title="Not all tasks are performed with the same frequency, but Redis checks for"></a>Not all tasks are performed with the same frequency, but Redis checks for</h1><h1 id="tasks-to-perform-according-to-the-specified-“hz”-value"><a href="#tasks-to-perform-according-to-the-specified-“hz”-value" class="headerlink" title="tasks to perform according to the specified “hz” value."></a>tasks to perform according to the specified “hz” value.</h1><h1 id="-175"><a href="#-175" class="headerlink" title></a></h1><h1 id="By-default-“hz”-is-set-to-10-Raising-the-value-will-use-more-CPU-when"><a href="#By-default-“hz”-is-set-to-10-Raising-the-value-will-use-more-CPU-when" class="headerlink" title="By default “hz” is set to 10. Raising the value will use more CPU when"></a>By default “hz” is set to 10. Raising the value will use more CPU when</h1><h1 id="Redis-is-idle-but-at-the-same-time-will-make-Redis-more-responsive-when"><a href="#Redis-is-idle-but-at-the-same-time-will-make-Redis-more-responsive-when" class="headerlink" title="Redis is idle, but at the same time will make Redis more responsive when"></a>Redis is idle, but at the same time will make Redis more responsive when</h1><h1 id="there-are-many-keys-expiring-at-the-same-time-and-timeouts-may-be"><a href="#there-are-many-keys-expiring-at-the-same-time-and-timeouts-may-be" class="headerlink" title="there are many keys expiring at the same time, and timeouts may be"></a>there are many keys expiring at the same time, and timeouts may be</h1><h1 id="handled-with-more-precision"><a href="#handled-with-more-precision" class="headerlink" title="handled with more precision."></a>handled with more precision.</h1><h1 id="-176"><a href="#-176" class="headerlink" title></a></h1><h1 id="The-range-is-between-1-and-500-however-a-value-over-100-is-usually-not"><a href="#The-range-is-between-1-and-500-however-a-value-over-100-is-usually-not" class="headerlink" title="The range is between 1 and 500, however a value over 100 is usually not"></a>The range is between 1 and 500, however a value over 100 is usually not</h1><h1 id="a-good-idea-Most-users-should-use-the-default-of-10-and-raise-this-up-to"><a href="#a-good-idea-Most-users-should-use-the-default-of-10-and-raise-this-up-to" class="headerlink" title="a good idea. Most users should use the default of 10 and raise this up to"></a>a good idea. Most users should use the default of 10 and raise this up to</h1><h1 id="100-only-in-environments-where-very-low-latency-is-required"><a href="#100-only-in-environments-where-very-low-latency-is-required" class="headerlink" title="100 only in environments where very low latency is required."></a>100 only in environments where very low latency is required.</h1><p>hz 10  </p>
<h1 id="When-a-child-rewrites-the-AOF-file-if-the-following-option-is-enabled"><a href="#When-a-child-rewrites-the-AOF-file-if-the-following-option-is-enabled" class="headerlink" title="When a child rewrites the AOF file, if the following option is enabled"></a>When a child rewrites the AOF file, if the following option is enabled</h1><h1 id="the-file-will-be-fsync-ed-every-32-MB-of-data-generated-This-is-useful"><a href="#the-file-will-be-fsync-ed-every-32-MB-of-data-generated-This-is-useful" class="headerlink" title="the file will be fsync-ed every 32 MB of data generated. This is useful"></a>the file will be fsync-ed every 32 MB of data generated. This is useful</h1><h1 id="in-order-to-commit-the-file-to-the-disk-more-incrementally-and-avoid"><a href="#in-order-to-commit-the-file-to-the-disk-more-incrementally-and-avoid" class="headerlink" title="in order to commit the file to the disk more incrementally and avoid"></a>in order to commit the file to the disk more incrementally and avoid</h1><h1 id="big-latency-spikes"><a href="#big-latency-spikes" class="headerlink" title="big latency spikes."></a>big latency spikes.</h1><p>aof-rewrite-incremental-fsync yes</p>
<p>4.2.3 测试 redis-cli 连接上来   der exec -it 运行着 Rediis 服务的容器 ID redis-cliock</p>
<p><img src="https://img-blog.csdnimg.cn/20190214175940479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>4.2.4 测试持久化文件生成</p>
<p><img src="https://img-blog.csdnimg.cn/20190214180103450.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p><em><strong>八）本地镜像发布到阿里云</strong></em></p>
<ol>
<li>本地镜像发布到阿里云流程</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20190214180312456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<ol start="2">
<li>镜像的生成方法</li>
</ol>
<p>2.1 前面的 DockerFile </p>
<p>2.2  从容器创建一个新的镜像<br>docker commit [OPTIONS] 容器 ID [REPOSITORY[:TAG]]</p>
<p>OPTIONS 说明：<br>-a : 提交的镜像作者；<br>-m : 提交时的说明文字；</p>
<p><img src="https://img-blog.csdnimg.cn/20190214180429598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>2.3 将本地镜像推送到阿里云</p>
<p>2.3.1 本地镜像素材原型</p>
<p><img src="https://img-blog.csdnimg.cn/20190214180516228.png" alt></p>
<p>2.3.2 阿里云开发者平台   <a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">https://dev.aliyun.com/search.html</a></p>
<p><img src="https://img-blog.csdnimg.cn/20190214180541449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>2.3.3 创建仓库镜像 </p>
<p><img src="https://img-blog.csdnimg.cn/20190214180656547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt>  命名空间  仓库名称</p>
<p>2.3.4 将镜像推送到 registry</p>
<p><img src="https://img-blog.csdnimg.cn/20190214180826297.png" alt></p>
<p><img src="https://img-blog.csdnimg.cn/20190214180859535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>2.3.5 公有云可以查询到</p>
<p><img src="https://img-blog.csdnimg.cn/20190214180926563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>2.3.6 查看详情</p>
<p><img src="https://img-blog.csdnimg.cn/20190214181003547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
<p>2.4 将阿里云上的镜像下载到本地</p>
<p><img src="https://img-blog.csdnimg.cn/20190214181055918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llZG9uZ2ZlbmdfMTMxNA==,size_16,color_FFFFFF,t_70" alt></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>(转载)学习Java内存分配全面解析</title>
    <url>/2020/02/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%85%A8%E9%9D%A2%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<p>进入正题前首先要知道的是 Java 程序运行在 JVM(Java Virtual Machine，Java 虚拟机) 上，可以把 JVM 理解成 Java 程序和操作系统之间的桥梁，JVM 实现了 Java 的平台无关性，由此可见 JVM 的重要性。所以在学习 Java 内存分配原理的时候一定要牢记这一切都是在 JVM 中进行的，JVM 是内存分配原理的基础与前提。</p>
<a id="more"></a>
<p><strong>简单通俗的讲，一个完整的 Java 程序运行过程会涉及以下内存区域：</strong></p>
<p>l <strong>寄存器：</strong>JVM 内部虚拟寄存器，存取速度非常快，程序不可控制。</p>
<p>l <strong>栈：</strong>保存局部变量的值，包括：1. 用来保存基本数据类型的值；2. 保存类的<strong>实例</strong>，即堆区<strong>对象</strong>的引用 (指针)。也可以用来保存加载方法时的帧。</p>
<p>l <strong>堆：</strong>用来存放动态产生的数据，比如 new 出来的<strong>对象</strong>。注意创建出来的对象只包含属于各自的成员变量，并不包括成员方法。因为同一个类的对象拥有各自的成员变量，存储在各自的堆中，但是他们共享该类的方法，并不是每创建一个对象就把成员方法复制一次。</p>
<p>l <strong>常量池：</strong>JVM 为每个已加载的类型维护一个常量池，常量池就是这个类型用到的常量的一个有序集合。包括直接常量 (基本类型，String) 和对其他类型、方法、字段的<strong>符号引用 (1)</strong>。池中的数据和数组一样通过索引访问。由于常量池包含了一个类型所有的对其他类型、方法、字段的符号引用，所以常量池在 Java 的动态链接中起了核心作用。<strong>常量池存在于堆中</strong>。</p>
<p>l <strong>代码段：</strong>用来存放从硬盘上读取的源程序代码。</p>
<p>l <strong>数据段：</strong>用来存放 static 定义的静态成员。</p>
<p><strong>下面是内存表示图：</strong></p>
<p><img src="/2020/02/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%85%A8%E9%9D%A2%E6%B5%85%E6%9E%90/img-1.jpg" alt></p>
<p>上图中大致描述了 Java 内存分配，接下来通过实例详细讲解 Java 程序是如何在内存中运行的（注：以下图片引用自尚学堂马士兵老师的 J2SE 课件，图右侧是程序代码，左侧是内存分配示意图，我会一一加上注释）。</p>
<p><strong>预备知识：</strong></p>
<p><strong>1.</strong> 一个 Java 文件，只要有 main 入口方法，我们就认为这是一个 Java 程序，可以单独编译运行。</p>
<p><strong>2.</strong> 无论是普通类型的变量还是引用类型的变量 (俗称实例)，都可以作为局部变量，他们都可以出现在栈中。只不过普通类型的变量在栈中直接保存它所对应的值，而引用类型的变量保存的是一个指向堆区的指针，通过这个指针，就可以找到这个实例在堆区对应的对象。因此，普通类型变量只在栈区占用一块内存，而引用类型变量要在栈区和堆区各占一块内存。</p>
<p><strong>示例：</strong></p>
<p><img src="/2020/02/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%85%A8%E9%9D%A2%E6%B5%85%E6%9E%90/img-2.jpg" alt></p>
<p><strong>1.</strong>JVM 自动寻找 main 方法，执行第一句代码，创建一个 Test 类的实例，在栈中分配一块内存，存放一个指向堆区对象的指针 110925。</p>
<p><strong>2.</strong> 创建一个 int 型的变量 date，由于是基本类型，直接在栈中存放 date 对应的值 9。</p>
<p><strong>3.</strong> 创建两个 BirthDate 类的实例 d1、d2，在栈中分别存放了对应的指针指向各自的对象。他们在实例化时调用了有参数的构造方法，因此对象中有自定义初始值。</p>
<p><img src="/2020/02/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%85%A8%E9%9D%A2%E6%B5%85%E6%9E%90/img-3.jpg" alt></p>
<p>调用 test 对象的 change1 方法，并且以 date 为参数。JVM 读到这段代码时，检测到 i 是局部变量，因此会把 i 放在栈中，并且把 date 的值赋给 i。</p>
<p><img src="/2020/02/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%85%A8%E9%9D%A2%E6%B5%85%E6%9E%90/img-4.jpg" alt>  </p>
<p>把 1234 赋给 i。很简单的一步。</p>
<p><img src="/2020/02/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%85%A8%E9%9D%A2%E6%B5%85%E6%9E%90/img-5.jpg" alt>  </p>
<p>change1 方法执行完毕，立即释放局部变量 i 所占用的栈空间。</p>
<p><img src="/2020/02/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%85%A8%E9%9D%A2%E6%B5%85%E6%9E%90/img-6.jpg" alt></p>
<p>调用 test 对象的 change2 方法，以实例 d1 为参数。JVM 检测到 change2 方法中的 b 参数为局部变量，立即加入到栈中，由于是引用类型的变量，所以 b 中保存的是 d1 中的指针，此时 b 和 d1 指向同一个堆中的对象。在 b 和 d1 之间传递是指针。</p>
<p><img src="/2020/02/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%85%A8%E9%9D%A2%E6%B5%85%E6%9E%90/img-7.jpg" alt></p>
<p>change2 方法中又实例化了一个 BirthDate 对象，并且赋给 b。在内部执行过程是：在堆区 new 了一个对象，并且把该对象的指针保存在栈中的 b 对应空间，此时实例 b 不再指向实例 d1 所指向的对象，但是实例 d1 所指向的对象并无变化，这样无法对 d1 造成任何影响。</p>
<p><img src="/2020/02/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%85%A8%E9%9D%A2%E6%B5%85%E6%9E%90/img-8.jpg" alt></p>
<p>change2 方法执行完毕，立即释放局部引用变量 b 所占的栈空间，注意只是释放了栈空间，堆空间要等待自动回收。</p>
<p><img src="/2020/02/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%85%A8%E9%9D%A2%E6%B5%85%E6%9E%90/img-9.jpg" alt></p>
<p>调用 test 实例的 change3 方法，以实例 d2 为参数。同理，JVM 会在栈中为局部引用变量 b 分配空间，并且把 d2 中的指针存放在 b 中，此时 d2 和 b 指向同一个对象。再调用实例 b 的 setDay 方法，其实就是调用 d2 指向的对象的 setDay 方法。</p>
<p><img src="/2020/02/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%85%A8%E9%9D%A2%E6%B5%85%E6%9E%90/img-10.jpg" alt></p>
<p>调用实例 b 的 setDay 方法会影响 d2，因为二者指向的是同一个对象。</p>
<p><img src="/2020/02/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%85%A8%E9%9D%A2%E6%B5%85%E6%9E%90/img-11.jpg" alt></p>
<p>change3 方法执行完毕，立即释放局部引用变量 b。</p>
<p>以上就是 Java 程序运行时内存分配的大致情况。其实也没什么，掌握了思想就很简单了。无非就是两种类型的变量：基本类型和引用类型。二者作为局部变量，都放在栈中，基本类型直接在栈中保存值，引用类型只保存一个指向堆区的指针，真正的对象在堆里。作为参数时基本类型就直接传值，引用类型传指针。</p>
<p><strong>小结：</strong></p>
<p><strong>1.</strong> 分清什么是实例什么是对象。Class a= new Class(); 此时 a 叫实例，而不能说 a 是对象。实例在栈中，对象在堆中，操作实例实际上是通过实例的指针间接操作对象。多个实例可以指向同一个对象。</p>
<p><strong>2.</strong> 栈中的数据和堆中的数据销毁并不是同步的。方法一旦结束，栈中的局部变量立即销毁，但是堆中对象不一定销毁。因为可能有其他变量也指向了这个对象，直到栈中没有变量指向堆中的对象时，它才销毁，而且还不是马上销毁，要等垃圾回收扫描时才可以被销毁。</p>
<p><strong>3.</strong> 以上的栈、堆、代码段、数据段等等都是相对于应用程序而言的。每一个应用程序都对应唯一的一个 JVM 实例，每一个 JVM 实例都有自己的内存区域，互不影响。并且这些内存区域是所有线程共享的。这里提到的栈和堆都是整体上的概念，这些堆栈还可以细分。</p>
<p><strong>4.</strong> 类的成员变量在不同对象中各不相同，都有自己的存储空间 (成员变量在堆中的对象中)。而类的方法却是该类的所有对象共享的，只有一套，对象使用方法的时候方法才被压入栈，方法不使用则不占用内存。</p>
<p>以上分析只涉及了栈和堆，还有一个非常重要的内存区域：常量池，这个地方往往出现一些莫名其妙的问题。常量池是干嘛的上边已经说明了，也没必要理解多么深刻，只要记住它维护了一个已加载类的常量就可以了。接下来结合一些例子说明常量池的特性。</p>
<p><strong>预备知识：</strong></p>
<p>基本类型和基本类型的包装类。基本类型有：byte、short、char、int、long、boolean。基本类型的包装类分别是：Byte、Short、Character、Integer、Long、Boolean。注意区分大小写。二者的区别是：基本类型体现在程序中是普通变量，基本类型的包装类是类，体现在程序中是引用变量。因此二者在内存中的存储位置不同：基本类型存储在栈中，而基本类型包装类存储在堆中。上边提到的这些包装类都实现了常量池技术，另外两种浮点数类型的包装类则没有实现。另外，String 类型也实现了常量池技术。</p>
<p><strong>实例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;    </span><br><span class="line">        objPoolTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void objPoolTest() &#123;</span><br><span class="line">        int i = 40;</span><br><span class="line">        int i0 = 40;</span><br><span class="line">        Integer i1 = 40;</span><br><span class="line">        Integer i2 = 40;</span><br><span class="line">        Integer i3 = 0;</span><br><span class="line">        Integer i4 = new Integer(40);</span><br><span class="line">        Integer i5 = new Integer(40);</span><br><span class="line">        Integer i6 = new Integer(0);</span><br><span class="line">        Double d1=1.0;</span><br><span class="line">        Double d2=1.0;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;i=i0\t&quot; + (i == i0));</span><br><span class="line">        System.out.println(&quot;i1=i2\t&quot; + (i1 == i2));</span><br><span class="line">        System.out.println(&quot;i1=i2+i3\t&quot; + (i1 == i2 + i3));</span><br><span class="line">        System.out.println(&quot;i4=i5\t&quot; + (i4 == i5));</span><br><span class="line">        System.out.println(&quot;i4=i5+i6\t&quot; + (i4 == i5 + i6));    </span><br><span class="line">        System.out.println(&quot;d1=d2\t&quot; + (d1==d2));</span><br><span class="line"></span><br><span class="line">        System.out.println();        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i=i0    true</span><br><span class="line">i1=i2   true</span><br><span class="line">i1=i2+i3        true</span><br><span class="line">i4=i5   false</span><br><span class="line">i4=i5+i6        true</span><br><span class="line">d1=d2   false</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong>分析<strong>：</strong></p>
<p><strong>1.</strong>i 和 i0 均是普通类型 (int) 的变量，所以数据直接存储在栈中，而栈有一个很重要的特性：<strong>栈中的数据可以共享</strong>。当我们定义了 int i = 40;，再定义 int i0 = 40; 这时候会自动检查栈中是否有 40 这个数据，如果有，i0 会直接指向 i 的 40，不会再添加一个新的 40。</p>
<p><strong>2.</strong>i1 和 i2 均是引用类型，在栈中存储指针，因为 Integer 是包装类。由于 Integer 包装类实现了常量池技术，因此 i1、i2 的 40 均是从常量池中获取的，均指向同一个地址，因此 i1=12。</p>
<p><strong>3.</strong> 很明显这是一个加法运算，<strong>Java 的数学运算都是在栈中进行的</strong>，<strong>Java 会自动对 i1、i2 进行拆箱操作转化成整型</strong>，因此 i1 在数值上等于 i2+i3。</p>
<p><strong>4.i</strong>4 和 i5 均是引用类型，在栈中存储指针，因为 Integer 是包装类。但是由于他们各自都是 new 出来的，因此不再从常量池寻找数据，而是从堆中各自 new 一个对象，然后各自保存指向对象的指针，所以 i4 和 i5 不相等，因为他们所存指针不同，所指向对象不同。</p>
<p><strong>5.</strong> 这也是一个加法运算，和 3 同理。</p>
<p><strong>6.</strong>d1 和 d2 均是引用类型，在栈中存储指针，因为 Double 是包装类。但 Double 包装类没有实现常量池技术，因此 Doubled1=1.0; 相当于 Double d1=new Double(1.0);，是从堆 new 一个对象，d2 同理。因此 d1 和 d2 存放的指针不同，指向的对象不同，所以不相等。</p>
<p><strong>小结：</strong></p>
<p><strong>1.</strong> 以上提到的几种基本类型包装类均实现了常量池技术，但他们维护的常量仅仅是【-128 至 127】这个范围内的常量，如果常量值超过这个范围，就会从堆中创建对象，不再从常量池中取。比如，把上边例子改成 Integer i1 = 400; Integer i2 = 400;，很明显超过了 127，无法从常量池获取常量，就要从堆中 new 新的 Integer 对象，这时 i1 和 i2 就不相等了。</p>
<p><strong>2.</strong>String 类型也实现了常量池技术，但是稍微有点不同。String 型是先检测常量池中有没有对应字符串，如果有，则取出来；如果没有，则把当前的添加进去。</p>
<p>凡是涉及内存原理，一般都是博大精深的领域，切勿听信一家之言，多读些文章。我在这只是浅析，里边还有很多猫腻，就留给读者探索思考了。希望本文能对大家有所帮助！</p>
<p><strong>脚注：</strong></p>
<p><strong>(1)</strong> 符号引用，顾名思义，就是一个符号，符号引用被使用的时候，才会解析这个符号。如果熟悉 linux 或 unix 系统的，可以把这个符号引用看作一个文件的软链接，当使用这个软连接的时候，才会真正解析它，展开它找到实际的文件</p>
<p>对于符号引用，在类加载层面上讨论比较多，源码级别只是一个形式上的讨论。</p>
<p>当一个类被加载时，该类所用到的别的类的符号引用都会保存在常量池，实际代码执行的时候，首次遇到某个别的类时，JVM 会对常量池的该类的符号引用展开，转为直接引用，这样下次再遇到同样的类型时，JVM 就不再解析，而直接使用这个已经被解析过的直接引用。</p>
<p>除了上述的类加载过程的符号引用说法，对于源码级别来说，就是依照引用的解析过程来区别代码中某些数据属于符号引用还是直接引用，如，System.out.println(“test” +”abc”);// 这里发生的效果相当于直接引用，而假设某个 Strings = “abc”; System.out.println(“test” + s);// 这里的发生的效果相当于符号引用，即把 s 展开解析，也就相当于 s 是 “abc” 的一个符号链接，也就是说在编译的时候，class 文件并没有直接展看 s，而把这个 s 看作一个符号，在实际的代码执行时，才会展开这个。</p>
<p>转载链接： <a href="http://blog.csdn.net/shimiso" target="_blank" rel="noopener">http://blog.csdn.net/shimiso</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>局部变量和成员变量</title>
    <url>/2020/01/07/Java%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h3 id="局部变量和成员变量的区别："><a href="#局部变量和成员变量的区别：" class="headerlink" title="局部变量和成员变量的区别："></a>局部变量和成员变量的区别：</h3><a id="more"></a>
<p><strong>1. 定义的位置不一样【重点】</strong></p>
<ul>
<li>局部变量：在方法的内部</li>
<li>成员变量：在方法的外部，直接写在类当中</li>
</ul>
<p><strong>2. 作用范围不一样【重点】</strong></p>
<ul>
<li>局部变量：只有方法当中才可以使用，出了方法就不能再用了</li>
<li>成员变量：整个类都可以通用</li>
</ul>
<p><strong>3. 默认值不一样【重点】</strong></p>
<ul>
<li>局部变量：没有默认值，如果要想使用，必须手动进行赋值</li>
<li>成员变量：如果没有赋值，会有默认值，规则和数组一样</li>
</ul>
<ol start="4">
<li>内存的位置不一样（了解）</li>
</ol>
<ul>
<li>局部变量：位于栈内存</li>
<li>成员变量：位于堆内存</li>
</ul>
<ol start="5">
<li>生命周期不一样（了解）</li>
</ol>
<ul>
<li>局部变量：随着方法进栈而诞生，随着方法出栈而消失</li>
<li>成员变量：随着对象的创建而诞生，随着对象被垃而消失</li>
</ul>
<hr>
<h3 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h3><p><strong>1、成员变量和局部变量简述</strong></p>
<p>在 Java 语言里，根据定义变量位置的不同，可以将变量分成两大类：成员变量 (<strong>存在于堆内存中，和类一起创建</strong>) 和局部变量 (<strong>存在于栈内存中，当方法执行完成，让出内存，让其他方法来使用内存</strong>)。二者的运行机制存在较大差异。</p>
<p><img src="/2020/01/07/Java%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/0.png" alt></p>
<p><strong>1.1 成员变量</strong></p>
<p>类变量从该类的准备阶段起开始存在，直到系统完全销毁这个类，类变量的作用域与这个类的生存范围相同；</p>
<p>而实例变量则从该类的实例被创建起开始存在，直到系统完全销毁这个实例，实例变量的作用域与对应实例的生存范围相同。</p>
<p>正是基于这个原因，可以把类变量和实例变量统称为成员变量。其中类变量可以理解为类成员变量，它作为类本身的一个成员，与类本身共存亡；实例变量则可以理解为实例成员变量，它作为实例的一个成员与实例共存亡。</p>
<p>只要类存在，类就可以访问类变量         类. 类变量</p>
<p>只要实例存在，实例就可以访问实例变量        实例. 实例变量</p>
<p>当然实例也可以访问类变量。但是需要注意的是因为实例不拥有类变量，所以通过实例来访问类变量进行操作，实际上是对类变量进行操作 ，当有其他实例来访问类变量时，访问的类变量是被对象访问操作过的类变量。</p>
<p>成员变量无需显示初始化，只要为一个类定义了类变量或实例变量，系统就会在这个类的准备阶段或创建该类的实例时进行默认初始化。</p>
<p><strong>1.2 局部变量</strong></p>
<p>局部变量根据定义形式的不同，又可以分为如下三种：</p>
<p>形参：在定义方法签名时定义的变量，形参的作用域在整个方法中都有效</p>
<p>方法局部变量：在方法体内定义的局部变量，它的作用域是从定义该变量的地方生效，到该方法结束时失效</p>
<p>代码块局部变量：这个局部变量的作用域从定义该变量的地方生效，到该代码结束时失效。</p>
<p>一个变量只在一对 {} 中起作用。。</p>
<p>java 允许局部变量和成员变量同名，如果方法中局部变量和成员变量同名，局部变量就会覆盖成员变量，如果需要在这个方法中引用被覆盖成员变量，则可使用 this（对于实例变量）或类名（对于类变量）作为调用者来限定访问成员变量。</p>
<p><strong>2、成员变量的初始化和内存中的运行机制</strong></p>
<p>接下来以下面代码来举例说明成员变量的初始化和内存中的运行机制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 public class Person &#123;</span><br><span class="line"> 2     public int num;</span><br><span class="line"> 3     public String name;</span><br><span class="line"> 5     public static void main(String[] args) &#123;</span><br><span class="line"> 6         Person p1 = new Person();</span><br><span class="line"> 7         Person p2 = new Person();</span><br><span class="line"> 8         p1.num = 2;</span><br><span class="line"> 9         p2.num = 3;</span><br><span class="line">10         p1.name = &quot;张三&quot;;</span><br><span class="line">11         p2.name = &quot;李四&quot;;</span><br><span class="line">12     &#125;</span><br><span class="line">15 &#125;</span><br></pre></td></tr></table></figure>


<p>当程序执行 Person p1 = new Person(); 时，如果这行代码是第一次使用 Person 类，则系统通常会在第一次使用 Person 类时加载这个类，并初始化这个类，在类的准备 阶段，系统将会为该类的类变量分配内存空间，并指定默认初始值。当 person 类初始化完成后，系统内存中的存储示意图如下图所示。</p>
<p><img src="/2020/01/07/Java%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/1.png" alt></p>
<p> 可以看出，当 person 类初始化完成后，系统将在堆内存中为 Person 分配一块内存空间，实际上是创建了一个类对象，在这块内存区里包含了保存 num 类变量的内存，并设置 num 的默认初始值为 0。</p>
<p>系统接着创建了一个 Person 对象，并把这个 Person 对象赋给 p1 变量，Person 对象包含了名为 name 的实例变量，实例变量是在创建实例时分配内存空间并指定初始值的。当创建了第一个 person 对象后，系统内存中的存储示意图如下图所示。</p>
<p><img src="/2020/01/07/Java%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/2.png" alt></p>
<p>从上图可以看出 num 不属于对象，它属于类，所以创建第一个对象时并不需要为 num 分配内存空间，系统只是为 name 分配了内存空间，并指定初始值为 null。</p>
<p>创建第二个对象 p2 时，由于在创建第一个对象时已经对类进行了初始化，所以在创建 p2 时对类进行初始化，对象的创建过程与第一个对象的创建过程没有什么区别。</p>
<p><img src="/2020/01/07/Java%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/3.png" alt></p>
<p>第二个对象创建完成后，成员变量如上图所示在内存中存储。</p>
<p>** 当程序需要访问类变量时，尽量使用类来作为主调，不要使用对象作为主调，这个可以避免产生歧义。</p>
<p>3、局部变量的初始化和内存中的运行机制</p>
<ul>
<li><p>局部变量必须经过显示初始化之后才能使用，系统不会为局部变量执行初始化。定义了局部变量以后，系统并没有给局部变量进行初始化，直到程序给这个局部变量赋给初值时，系统才会为这个局部变量分配内存空间，并将初始值保存到这块内存中。</p>
</li>
<li><p>局部变量不属于任何类或者实例，因此它总是保存在方法的栈内存中。如果局部变量是基本数据类型，则该变量直接存储在方法的栈内存中，如果是引用变量则将引用的地址存储在方法的栈内存中。</p>
</li>
<li><p>栈内存中的变量无需系统垃圾回收，随着方法或者代码块的运行结束而结束。局部变量通常只保存了具体的值或者引用地址，所以所占的内存比较小。</p>
</li>
</ul>
<p><strong>4、变量的使用规则</strong></p>
<p>能不使用成员变量就别使用成员变量</p>
<p>能不使用方法局部变量就别使用方法局部变量</p>
<p>使用代码块局部变量性能最好。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>variables</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中继承和实现接口的区别</title>
    <url>/2020/01/07/Java%E4%B8%AD%E7%BB%A7%E6%89%BF%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>Java中继承和实现接口的区别！</p>
<a id="more"></a>
<p>&emsp;&emsp;当使用继承的时候，主要是为了不必重新开发，并且在不必了解实现细节的情况下拥有了父类<br>我所需要的特征。</p>
<p>&emsp;&emsp;但是很多时候，一个子类并不需要父类的所有特征，它可能只是需要其中的某些特征，<br>但是由于通过继承，父类所有的特征都有了，需要的和不需要的特征同时具备了。<br>而那些子类实际上不需要用到的，有时候甚至是极力避免使用的特征也可以随便使用，<br>这就是继承的<strong>副作用</strong>。<br>特别是允许多重继承的java语言中，很容易引起不容易发现的错误。<br>所以在java的语言中，会创造出各种规定来限制子类使用父类中的某些方法。</p>
<p>&emsp;&emsp;就拿你举的例子来说，如果狗的主人只是希望狗能爬比较低的树，但是不希望它继承尾巴可以倒挂<br>在树上，像猴子那样可以飞檐走壁，以免主人管不住它。那么狗的主人肯定不会要一只猴子继承的狗。</p>
<p>&emsp;&emsp;设计模式更多的强调面向接口。猴子有两个接口，一个是爬树，一个是尾巴倒挂。我现在只需要我<br>的狗爬树，但是不要它尾巴倒挂，那么我只要我的狗实现爬树的接口就行了。同时不会带来像继承<br>猴子来带来的尾巴倒挂的副作用。这就是接口的好处。</p>
<p>&emsp;&emsp;Java技术发展也有好多年了，一个很明显的趋势就是继承的使用越来越少，而接口的使用越来越广<br>泛了。其实只要稍微比较一下JDK里面那些最早就有的类库和最近才加进去的类库，就可以很明显的<br>感觉到java技术领域的编程风格的变迁，由大量的继承到几乎无处不用的面向接口编程。</p>
<p>&emsp;&emsp;接口不是替代继承。比如说我现在就是要我的动物去爬树，我根本就不需要知道到底是狗去爬树还是<br>猴子。我提取出“能爬树”的动物去爬。这个能爬树的动物既可以是猴子，也可以是狗。这样不是<br>很灵活吗？</p>
<ul>
<li><p>狗(爬树，咬人)</p>
</li>
<li><p>猴子(爬树，尾巴倒挂)</p>
</li>
</ul>
<p>&emsp;&emsp;如果我既要爬树也要咬人，那么我当然可以选狗，也可以创建一个接口(爬树咬人)，然后让狗实<br>现(爬树咬人)接口。</p>
<hr>
<h5 id="实际概念区别："><a href="#实际概念区别：" class="headerlink" title="实际概念区别："></a>实际概念区别：</h5><ul>
<li><p>区别1:<br>不同的修饰符修饰(interface),(extends)</p>
</li>
<li><p>区别2:<br>在面向对象编程中可以有多继承!但是只支持接口的多继承,不支持’继承’的多继承哦<br>而继承在java中具有单根性,子类只能继承一个父类</p>
</li>
<li><p>区别3:<br>在接口中只能定义全局常量,和抽象方法<br>而在继承中可以定义属性方法,变量,常量等…</p>
</li>
<li><p>区别4:<br>某个接口被类实现时,在类中一定要实现接口中的抽象方法<br>而继承想调用那个方法就调用那个方法,毫无压力</p>
</li>
</ul>
<p><strong>接口是</strong>：对功能的描述</p>
<p><strong>继承是</strong>：什么是一种什么</p>
<p><strong>始终记着</strong>：你可以有多个干爹（接口），但只能有一个亲爹（ 继承）<br>————————————————</p>
<p>[原文链接：] <a href="https://blog.csdn.net/u012123938/article/details/46353251" target="_blank" rel="noopener">https://blog.csdn.net/u012123938/article/details/46353251</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>interface</tag>
        <tag>extends</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是多态、为什么用多态、有什么好处</title>
    <url>/2020/01/07/%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E6%80%81_%20%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8%E5%A4%9A%E6%80%81_%20%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84_/</url>
    <content><![CDATA[<p>多态的学习</p>
<a id="more"></a>
<p>多态可以分为变量的多态, 方法的多态, 类的多态. 我这里强调的是类的多态, 这是我们在以后的工作中经常回用到的</p>
<p>首先, 有这样一个系统: 有个学生工作从达内毕业了, 作的还不错. 买了辆捷达汽车. 这个系统应该如何设计呢?<br>按照 OO 的思想, 我们会抽象出来一个类, 表示捷达汽车, 其中有个 run() 方法<br>public class JD{<br>public void run(){<br>       System.out.println(“JD 在以 120 迈的速度在 run”);<br>}<br>}<br>我们还会抽象出一个类, 来代表人. 其中有个 drive() 方法, 需要一个汽车类型作为参数, 我们先传入一个 JD 类型的参数</p>
<p>// 这是我们的核心业务类<br>public class Person{<br>public void drive(JD jd){<br>       jd.run();<br>}</p>
<p>public static void main(String args[]){<br>   Person p =new Person();<br>   JD jd = new JD();<br>   p.drive(jd);<br>}<br>}</p>
<p>如果你写出这样的代码的话, 恭喜你! 你中大奖了!——————— 你会被项目精力砍死的!!!!!!!</p>
<p>项目经理为什么会砍你呢?<br>因为你写的代码偶合性太强了!</p>
<p>如果我们的需求变了, 这个学生后来更有钱了, 买了一两 Benz. 那么我们以前的系统怎么办啊. 不要指望你作的系统永远不会变化<br>我们的系统只能修改! 这就是项目经理砍你的原因<br>我们的系统会增加一个 Benz 类, 也有个 run() 方法</p>
<p>public class Benz{<br>public void run(){<br>       System.out.println(“Benz 在以 200 迈的速度在 run”);<br>}<br>}</p>
<p>我们的核心业务类也要修改</p>
<p>public class Person{</p>
<pre><code>/*  </code></pre><p>public void drive(JD jd){<br>       jd.run();<br>}<br>*/</p>
<p>public void drive(Benz b){<br>       b.run();<br>}</p>
<p>public static void main(String args[]){<br>   Person p =new Person();<br>   Benz b = new Benz();<br>   p.drive(b);<br>}<br>}</p>
<p>以后的情况, 我们可以把车抽象出来:<br>public abstract class Driver{<br>   /* 属性 */<br>   public void run();// 让子类来运行<br>}</p>
<p>public Benz extends Driver{<br>   public void run(){<br>System.out.println(“Benz 在以 200 迈的速度在 run”);<br>   }<br>}<br>public JD extends Driver{<br>   public void run(){<br>System.out.println(“JD is running…”);<br>   }<br>}</p>
<p>public class Person{<br>private Driver driver;<br>public Person(){</p>
<p>}<br>public Person(Driver driver){<br>   this.driver = driver;<br>}<br>public void drive(){<br>       driver.run();<br>}<br>public void setDriver(Driver driver){// 运用参数多态, 以后不管买什么车都可以<br>   this.driver = driver;<br>}</p>
<p>public static void main(String args[]){<br>   Person p =new Person();<br>   JD jd = new JD();// 刚开始没钱就买辆 JD 吧<br>   p.setDriver(jd);<br>   p.driver();<br>   Benz benz = new Benz{();// 有钱换车了<br>   p.setDriver(benz);<br>   p.driver();<br>}<br>}</p>
<p>什么是多态?<br>简单的说: 就是用基类的引用指向之类的对象</p>
<p>提问: 多态可以用在什么地方呢?<br>回答: 可以用在方法的参数中和方法的返回类型中</p>
<p>其中方法的参数楼上的兄弟已经给出了代码. 我这里给出在方法的返回类型中如何使用多态</p>
<p>上面的例子中, 不管是 JD 还是 Benz 都是我们自己直接 new 出来的. 我们可以设计一个工厂类, 专门生成汽车</p>
<p>/**  </p>
<ul>
<li>我们将多态使用在方法的返回类型中  </li>
<li>Car 可以是抽象类, 也可以是接口, JD 和 Benz 分别继承该类或实现该借口  </li>
<li>/<br>public class CarFactory{<br>public Car factory(String carName){<br>  if(carName.equals(“JD”)){  <pre><code>return new JD();  </code></pre>  }else if(carName.equals(“Benz”)){  <pre><code>return new Benz();  </code></pre>  }else{  <pre><code>System.out.println(&quot;对比起, 不伺候&quot;);  
return null;  </code></pre>  }<br>}<br>}</li>
</ul>
<p>这实际上就是设计模式中的简单工厂模式!</p>
<p>另外, 我我们在 JDK 中可以大量的看到多态的应用, 比如在 Object 类中的 equals(Object obj) 方法中, 参数是个 Object</p>
<p>类型的参数. 因为 Object 是 Java 中所有类的基类., 但是才传入参数的时候, 可以传入任何一个类的对象<br>这就是多态的应用!</p>
<p>使用多态可以解决项目中紧偶合的问题, 提高程序的课扩展性. 是 OCP 原则的一个具体的实现</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多态</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中静态域、代码块和内存区域图</title>
    <url>/2020/01/07/Java%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E5%9F%9F%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E5%92%8C%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="Java-面向对象-二-静态域、代码块和内存区域图"><a href="#Java-面向对象-二-静态域、代码块和内存区域图" class="headerlink" title="Java 面向对象 (二) 静态域、代码块和内存区域图"></a>Java 面向对象 (二) 静态域、代码块和内存区域图</h1><a id="more"></a>
<h2 id="静态域"><a href="#静态域" class="headerlink" title="静态域"></a>静态域</h2><ul>
<li>将域定义成<code>static</code>后，每个<code>类</code>中<code>只有一个</code>这样的域，与类相关的，也称为<code>类成员</code>。但是每个<code>对象</code>对于<code>所有的实例域</code>却<code>都有自己的一份拷贝</code>。</li>
<li><code>静态域</code>会<code>随着类的加载而加载并初始化</code>，存在于<code>方法区内存中</code>的<code>字节码文件的静态区域</code>中。</li>
<li><code>优先于对象存在</code>，先有方法区的类加载，后才可能会有堆内存的对象实例化。</li>
<li>静态域会<code>被所有的对象共享</code>，也称为共享区。</li>
<li>一般<code>共性用静态</code>，特性用非静态。</li>
<li>一般通过<code>类名直接调用</code>，虽然<code>也可以</code>通过<code>对象名</code>调用，但是<code>不推荐</code>，也不合适。</li>
</ul>
<h3 id="static-关键字注意事项"><a href="#static-关键字注意事项" class="headerlink" title="static 关键字注意事项"></a>static 关键字注意事项</h3><ul>
<li><strong>在静态方法中没有 this 关键字</strong><ul>
<li>静态是随着类的加载而初始化，而<code>this</code>是<code>随着对象的创建而存在</code>的。</li>
<li>静态比对象优先存在。</li>
</ul>
</li>
<li><strong>静态方法只能访问静态成员和静态成员方法，即<code>静态只能访问静态</code></strong><ul>
<li>静态方法：<ul>
<li>成员变量：只能访问静态变量</li>
<li>成员方法：只能访问静态成员方法</li>
</ul>
</li>
<li>非静态方法：<ul>
<li>成员变量：<code>可以</code>是静态的，<code>也可以</code>是非静态的</li>
<li>成员方法：可以是静态的成员方法，也可以是非静态的成员方法。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="静态变量和成员变量区别"><a href="#静态变量和成员变量区别" class="headerlink" title="静态变量和成员变量区别"></a>静态变量和成员变量区别</h3><ul>
<li>静态变量也叫类变量，成员变量也叫对象变量。</li>
<li>所属不同<ul>
<li><code>静态</code>变量属于<code>类</code></li>
<li><code>成员</code>变量属于<code>对象</code></li>
</ul>
</li>
<li>内存中的位置不同：<ul>
<li>静态变量存储于<code>方法区的静态区</code></li>
<li>成员变量存储于<code>堆内存</code></li>
</ul>
</li>
</ul>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="代码块概述"><a href="#代码块概述" class="headerlink" title="代码块概述"></a>代码块概述</h3><ul>
<li>Java 中，使用<code>{}括起来的代码</code>称为代码块</li>
</ul>
<h3 id="代码块的分类"><a href="#代码块的分类" class="headerlink" title="代码块的分类"></a>代码块的分类</h3><ul>
<li>根据位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块和同步代码块</li>
</ul>
<h3 id="代码块的应用"><a href="#代码块的应用" class="headerlink" title="代码块的应用"></a>代码块的应用</h3><ul>
<li><code>局部代码块</code><ul>
<li>在<code>方法中</code>出现，可以<code>限定变量的生命周期，及早释放，提高内存利用率</code>。</li>
</ul>
</li>
<li><code>构造代码块</code>（初始化代码块）<ul>
<li>在类中<code>方法外</code>出现，将多个构造器中的相同代码放到一起，<code>每次调用构造器都执行，并且在构造方法前执行</code>。</li>
</ul>
</li>
<li><code>静态代码块</code><ul>
<li>在类中<code>方法外</code>出现，并且用<code>static</code>修饰，用于给代码块中的代码静态化，<code>加入静态域中，在类加载的时候直接执行，并且只执行一次。</code></li>
<li>静态代码块<code>优先于main</code>方法执行。</li>
<li>一般常用于<code>加载驱动</code>、<code>IO操作</code>等消耗资源的代码</li>
</ul>
</li>
</ul>
<h3 id="代码块面试题"><a href="#代码块面试题" class="headerlink" title="代码块面试题"></a>代码块面试题</h3><p>根据程序写输出结果，考察执行顺序</p>
<p>测试结果：</p>
<p><strong>分析：</strong></p>
<p>​ main 方法是 Java 程序的入口，JVM 先找 main 方法，先把有 main 方法的类加载到内存中，此时 StudentTest 类的静态代码块直接随着类的加载而先执行；</p>
<p>​ 随后 main 方法开始执行，当 Student 类被实例化后，Student 类的静态代码块先执行，并且只执行一个，不管实例化多少对象；</p>
<p>​ 之后，每实例化一次 Student 类，类中的构造代码块比构造方法就会先执行，并且每实例化一次就执行一次。</p>
<h3 id="初始化执行顺序总结"><a href="#初始化执行顺序总结" class="headerlink" title="初始化执行顺序总结"></a>初始化执行顺序总结</h3><ul>
<li>当程序执行时，如果需要创建某个类的对象，那么 Java 会<code>先检查是否加载</code>了这个类，<strong>如果没有加载，则先执行类的加载再生成对象</strong>。如果已经加载，则直接生成对象。</li>
<li>类的执行顺序过程：<ul>
<li>首先类先加载到方法区内存中，类的静态域会先被加载并且初始化并且优先于 main 方法执行。Java 中类的加载时按需加载，需要时才加载，并且只加载一次。<ul>
<li>静态成员变量和静态代码块的执行顺序同代码中的顺序一致。</li>
</ul>
</li>
<li>每创建一次对象时，先初始化对象中的成员变量，再执行构造代码块，其次再执行构造方法。<ul>
<li>类中的变量会在任何方法（包括构造器）调用之前得到初始化，即使变量散布于方法定义之间。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Java-内存区域分配"><a href="#Java-内存区域分配" class="headerlink" title="Java 内存区域分配"></a>Java 内存区域分配</h2><ul>
<li>此分配图基于 Java8 之前版本</li>
</ul>
<p><img src="/2020/01/07/Java%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E5%9F%9F%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E5%92%8C%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%9B%BE/1.png" alt></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>内存</tag>
      </tags>
  </entry>
  <entry>
    <title>接口and多态</title>
    <url>/2020/01/06/%E6%8E%A5%E5%8F%A3and%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<p>就在Java学习接口和多态时的一些笔记！</p>
<a id="more"></a>
<h4 id="什么是接口？"><a href="#什么是接口？" class="headerlink" title="什么是接口？"></a>什么是接口？</h4><ul>
<li><p>接口就是多个类的公共规范。</p>
</li>
<li><p>接口是一种引用数据类型，最重要的内容就是其中的：抽象方法。</p>
</li>
</ul>
<hr>
<h5 id="如何定义一个接口的格式："><a href="#如何定义一个接口的格式：" class="headerlink" title="如何定义一个接口的格式："></a>如何定义一个接口的格式：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface 接口名称 &#123;</span><br><span class="line">    // 接口内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>备注：</strong>换成了关键字interface之后，编译生成的字节码文件仍然是：.java –&gt; .class。</p>
<hr>
<h4 id="如果是Java-7，那么接口中可以包含的内容有："><a href="#如果是Java-7，那么接口中可以包含的内容有：" class="headerlink" title="如果是Java 7，那么接口中可以包含的内容有："></a>如果是Java 7，那么接口中可以包含的内容有：</h4><ul>
<li>常量</li>
<li>抽象方法</li>
</ul>
<h4 id="如果是Java-8，还可以额外包含有："><a href="#如果是Java-8，还可以额外包含有：" class="headerlink" title="如果是Java 8，还可以额外包含有："></a>如果是Java 8，还可以额外包含有：</h4><ul>
<li>默认方法</li>
<li>静态方法</li>
</ul>
<h4 id="如果是Java-9，还可以额外包含有："><a href="#如果是Java-9，还可以额外包含有：" class="headerlink" title="如果是Java 9，还可以额外包含有："></a>如果是Java 9，还可以额外包含有：</h4><ul>
<li>私有方法</li>
</ul>
<hr>
<h4 id="接口使用步骤："><a href="#接口使用步骤：" class="headerlink" title="接口使用步骤："></a>接口使用步骤：</h4><ul>
<li><p>1、接口不能直接使用，必须有一个“实现类”来“实现”该接口。</p>
<ul>
<li><strong>[格式]：</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class 实现类名称 implements 接口名称 &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>2、接口的实现类必须覆盖重写（实现）接口中所有的抽象方法。</p>
<ul>
<li><strong>[实现]：</strong>去掉abstract关键字，加上方法体大括号。</li>
</ul>
</li>
</ul>
<ul>
<li>3、创建实现类的对象，进行使用。</li>
</ul>
<h5 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h5><p>如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须是抽象类。</p>
<hr>
<ul>
<li><p>接口的默认方法，可以通过接口实现类对象，直接调用。</p>
</li>
<li><p>接口的默认方法，也可以被接口实现类进行覆盖重写。</p>
</li>
</ul>
<hr>
<ul>
<li><p><strong>[注意事项]：</strong>不能通过接口实现类的对象来调用接口当中的静态方法。</p>
</li>
<li><p><strong>[正确用法]：</strong>通过接口名称，直接调用其中的静态方法。</p>
</li>
<li><p><strong>[格式]：</strong>接口名称.静态方法名(参数);</p>
</li>
</ul>
<hr>
<h4 id="在任何版本的Java中，接口都能定义抽象方法。"><a href="#在任何版本的Java中，接口都能定义抽象方法。" class="headerlink" title="在任何版本的Java中，接口都能定义抽象方法。"></a>在任何版本的Java中，接口都能定义抽象方法。</h4><p><strong>[格式]：</strong><br>public abstract 返回值类型 方法名称(参数列表);</p>
<p><strong>[注意事项]：</strong></p>
<ul>
<li><p>接口当中的抽象方法，修饰符必须是<strong>[两个固定]</strong>的关键字：public abstract</p>
</li>
<li><p>这两个关键字修饰符，可以选择性地省略。<strong>(不推荐)</strong></p>
</li>
<li><p>方法的三要素，可以随意定义。</p>
</li>
</ul>
<hr>
<blockquote>
<p>接口当中也可以定义“成员变量”，但是必须使用public static final三个关键字进行修饰。<br>从效果上看，这其实就是接口的【常量】。</p>
</blockquote>
<ul>
<li><p><strong>[格式]</strong>：<br>public static final 数据类型 常量名称 = 数据值;</p>
</li>
<li><p><strong>[备注]</strong>：<br>一旦使用final关键字进行修饰，说明不可改变。</p>
</li>
</ul>
<p><strong>注意事项</strong>：</p>
<ul>
<li><p>接口当中的常量，可以省略public static final，注意：不写也照样是这样。</p>
</li>
<li><p>接口当中的常量，必须进行赋值；不能不赋值。</p>
</li>
<li><p>接口中常量的名称，使用完全大写的字母，用下划线进行分隔。<strong>（推荐命名规则）</strong></p>
</li>
</ul>
<hr>
<h4 id="从Java-8开始，接口里允许定义默认方法。"><a href="#从Java-8开始，接口里允许定义默认方法。" class="headerlink" title="从Java 8开始，接口里允许定义默认方法。"></a>从Java 8开始，接口里允许定义默认方法。</h4><ul>
<li><strong>[格式]：</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public default 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><strong>[备注]</strong>：接口当中的默认方法，可以解决接口升级的问题。</li>
</ul>
<hr>
<h5 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h5><p>我们需要抽取一个共有方法，用来解决两个默认方法之间重复代码的问题。<br>但是这个共有方法不应该让实现类使用，应该是私有化的。</p>
<h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><p>从Java 9开始，接口当中允许定义私有方法。</p>
<ul>
<li><p>普通私有方法，解决多个默认方法之间重复代码问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>静态私有方法，解决多个静态方法之间重复代码问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>从Java 8开始，接口当中允许定义<strong>静态方法</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>[提示]：</strong>就是将abstract或者default换成static即可，带上方法体。</p>
<hr>
<p><strong>使用接口的时候，需要注意：</strong></p>
<ul>
<li><p>1.接口是没有静态代码块或者构造方法的。</p>
</li>
<li><p>2.一个类的直接父类是唯一的，但是一个类可以同时实现多个接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyInterfaceImpl implements MyInterfaceA, MyInterfaceB &#123;</span><br><span class="line">    // 覆盖重写所有抽象方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.如果实现类所实现的多个接口当中，存在重复的抽象方法，那么只需要覆盖重写一次即可。</p>
</li>
<li><p>4.如果实现类没有覆盖重写所有接口当中的所有抽象方法，那么实现类就必须是一个抽象类。</p>
</li>
<li><p>5.如果实现类锁实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。</p>
</li>
<li><p>6.一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突，优先用父类当中的方法。</p>
</li>
</ul>
<hr>
<ul>
<li><p>1.类与类之间是单继承的。直接父类只有一个。</p>
</li>
<li><p>2.类与接口之间是多实现的。一个类可以实现多个接口。</p>
</li>
<li><p>3.接口与接口之间是多继承的。</p>
</li>
</ul>
<p><strong>[注意事项]：</strong></p>
<ul>
<li><p>1.多个父接口当中的抽象方法如果重复，没关系。</p>
</li>
<li><p>2.多个父接口当中的默认方法如果重复，那么子接口必须进行默认方法的覆盖重写，【而且带着default关键字】。</p>
</li>
</ul>
<hr>
<h4 id="代码当中体现多态性，其实就是一句话：父类引用指向子类对象。"><a href="#代码当中体现多态性，其实就是一句话：父类引用指向子类对象。" class="headerlink" title="代码当中体现多态性，其实就是一句话：父类引用指向子类对象。"></a>代码当中体现多态性，其实就是一句话：父类引用指向子类对象。</h4><p><strong>[格式：]</strong></p>
<ul>
<li><p>父类名称 对象名 = new 子类名称();</p>
</li>
<li><p>接口名称 对象名 = new 实现类名称();</p>
</li>
</ul>
<hr>
<h4 id="访问成员-变量-的两种方式："><a href="#访问成员-变量-的两种方式：" class="headerlink" title="访问成员[变量]的两种方式："></a>访问成员[变量]的两种方式：</h4><ul>
<li><p>1.直接通过对象名称访问成员变量：看等号左边是谁，优先用谁，没有则向上找。</p>
</li>
<li><p>2.间接通过成员方法访问成员变量：看该方法属于谁，优先用谁，没有则向上找。</p>
</li>
</ul>
<hr>
<p><strong>在多态的代码当中，成员[方法]的访问规则是：</strong></p>
<pre><code>看new的是谁，就优先用谁，没有则向上找。</code></pre><p><strong>口诀：</strong>编译看左边，运行看右边。</p>
<p><strong>对比一下：</strong></p>
<ul>
<li><p>成员<strong>变量</strong>：编译看左边，运行还看左边。</p>
</li>
<li><p>成员<strong>方法</strong>：编译看左边，运行看右边。</p>
</li>
</ul>
<hr>
<p>向上转型一定是安全的，没有问题的，正确的。</p>
<p>但是也有一个<strong>弊端：</strong><br>对象一旦向上转型为父类，那么就无法调用子类原本特有的内容。</p>
<p><strong>解决方案：</strong>用对象的向下转型【还原】。</p>
<hr>
<h4 id="如何才能知道一个父类引用的对象，本来是什么子类？"><a href="#如何才能知道一个父类引用的对象，本来是什么子类？" class="headerlink" title="如何才能知道一个父类引用的对象，本来是什么子类？"></a>如何才能知道一个父类引用的对象，本来是什么子类？</h4><p><strong>格式：</strong><br>对象 instanceof 类名称</p>
<p>这将会得到一个boolean值结果，也就是判断前面的对象能不能当做后面类型的实例。</p>
<hr>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>interface</tag>
        <tag>多态</tag>
      </tags>
  </entry>
  <entry>
    <title>继承and抽象</title>
    <url>/2020/01/06/%E7%BB%A7%E6%89%BFand%E6%8A%BD%E8%B1%A1/</url>
    <content><![CDATA[<p>就在Java学习继承和抽象时的一些笔记！</p>
<a id="more"></a>
<h4 id="在父子类的继承关系当中，如果成员变量重名，则创建子类对象时，访问有两种方式："><a href="#在父子类的继承关系当中，如果成员变量重名，则创建子类对象时，访问有两种方式：" class="headerlink" title="在父子类的继承关系当中，如果成员变量重名，则创建子类对象时，访问有两种方式："></a>在父子类的继承关系当中，如果成员变量重名，则创建子类对象时，访问有两种方式：</h4><ul>
<li><p>直接通过子类对象访问成员变量：<br>  等号左边是谁，就优先用谁，没有则向上找。</p>
</li>
<li><p>间接通过成员方法访问成员变量：<br>  该方法属于谁，就优先用谁，没有则向上找。</p>
</li>
</ul>
<hr>
<h4 id="区分this和super"><a href="#区分this和super" class="headerlink" title="区分this和super"></a>区分this和super</h4><ul>
<li><p>局部变量：         直接写成员变量名</p>
</li>
<li><p>本类的成员变量：    this.成员变量名</p>
</li>
<li><p>父类的成员变量：    super.成员变量名</p>
</li>
</ul>
<hr>
<h4 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h4><ul>
<li><p>在父子类的继承关系当中，创建子类对象，访问成员方法的规则：<br>  创建的对象是谁，就优先用谁，如果没有则向上找。</p>
</li>
<li><p>注意事项：<br>  无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找子类的。</p>
</li>
<li><p>重写（Override）<br>概念：在继承关系当中，方法的名称一样，参数列表也一样。</p>
</li>
<li><p>重写（Override）：方法的名称一样，参数列表【也一样】。覆盖、覆写。</p>
</li>
<li><p>重载（Overload）：方法的名称一样，参数列表【不一样】。</p>
</li>
<li><p>方法的覆盖重写特点：创建的是子类对象，则优先用子类方法。</p>
</li>
</ul>
<hr>
<h4 id="方法覆盖重写的注意事项："><a href="#方法覆盖重写的注意事项：" class="headerlink" title="方法覆盖重写的注意事项："></a>方法覆盖重写的注意事项：</h4><ul>
<li>必须保证父子类之间方法的名称相同，参数列表也相同。<ul>
<li>@Override：写在方法前面，用来检测是不是有效的正确覆盖重写。<br>这个注解就算不写，只要满足要求，也是正确的方法覆盖重写。</li>
</ul>
</li>
</ul>
<ul>
<li>子类方法的返回值必须【小于等于】父类方法的返回值范围。<ul>
<li>小扩展提示：java.lang.Object类是所有类的公共最高父类（祖宗类），java.lang.String就是Object的子类。</li>
</ul>
</li>
</ul>
<ul>
<li>子类方法的权限必须【大于等于】父类方法的权限修饰符。<ul>
<li>小扩展提示：public &gt; protected &gt; (default) &gt; private</li>
</ul>
</li>
</ul>
<ul>
<li>备注：(default)不是关键字default，而是什么都不写，留空。</li>
</ul>
<hr>
<h4 id="继承关系中，父子类构造方法的访问特点："><a href="#继承关系中，父子类构造方法的访问特点：" class="headerlink" title="继承关系中，父子类构造方法的访问特点："></a>继承关系中，父子类构造方法的访问特点：</h4><ul>
<li><p>子类构造方法当中有一个默认隐含的“super()”调用，所以一定是先调用的父类构造，后执行的子类构造。</p>
</li>
<li><p>子类构造可以通过super关键字来调用父类重载构造。</p>
</li>
<li><p>super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。</p>
</li>
<li><p><strong>总结</strong>：<br>子类必须调用父类构造方法，不写则赠送super()；写了则用写的指定的super调用，super只能有一个，还必须是第一个。</p>
</li>
</ul>
<hr>
<h4 id="super关键字的用法有三种："><a href="#super关键字的用法有三种：" class="headerlink" title="super关键字的用法有三种："></a>super关键字的用法有三种：</h4><ul>
<li><p>在子类的成员方法中，访问父类的成员变量。</p>
</li>
<li><p>在子类的成员方法中，访问父类的成员方法。</p>
</li>
<li><p>在子类的构造方法中，访问父类的构造方法。</p>
</li>
</ul>
<hr>
<h4 id="super关键字用来访问父类内容，而this关键字用来访问本类内容。用法也有三种："><a href="#super关键字用来访问父类内容，而this关键字用来访问本类内容。用法也有三种：" class="headerlink" title="super关键字用来访问父类内容，而this关键字用来访问本类内容。用法也有三种："></a>super关键字用来访问父类内容，而this关键字用来访问本类内容。用法也有三种：</h4><ul>
<li><p>在本类的成员方法中，访问本类的成员变量。</p>
</li>
<li><p>在本类的成员方法中，访问本类的另一个成员方法。</p>
</li>
<li><p>在本类的构造方法中，访问本类的另一个构造方法。</p>
</li>
<li><p><strong>在第三种用法当中要注意：</strong></p>
<ul>
<li><p>A. this(…)调用也必须是构造方法的第一个语句，唯一一个。</p>
</li>
<li><p>B. super和this两种构造调用，不能同时使用。</p>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="抽象方法和抽象类"><a href="#抽象方法和抽象类" class="headerlink" title="抽象方法和抽象类"></a>抽象方法和抽象类</h4><ul>
<li><p>抽象方法：就是加上abstract关键字，然后去掉大括号，直接分号结束。</p>
</li>
<li><p>抽象类：抽象方法所在的类，必须是抽象类才行。在class之前写上abstract即可。</p>
</li>
</ul>
<h6 id="如何使用抽象类和抽象方法："><a href="#如何使用抽象类和抽象方法：" class="headerlink" title="如何使用抽象类和抽象方法："></a>如何使用抽象类和抽象方法：</h6><ul>
<li><p>不能直接创建new抽象类对象。</p>
</li>
<li><p>必须用一个子类来继承抽象父类。</p>
</li>
<li><p>子类必须覆盖重写抽象父类当中所有的抽象方法。</p>
<ul>
<li>覆盖重写（实现）：子类去掉抽象方法的abstract关键字，然后补上方法体大括号。</li>
</ul>
</li>
</ul>
<ul>
<li>创建子类对象进行使用。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>extends</tag>
        <tag>abstract</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存分配</title>
    <url>/2019/12/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<p>Java 程序运行时，需要在内存中分配空间。为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p>
<a id="more"></a>
<p>一、栈：储存局部变量</p>
<ul>
<li>局部变量：在方法的定义中或者在方法声明上的变量称为局部变量。</li>
<li>特点：栈内存的数据用完就释放。</li>
</ul>
<p>二、堆：储存 new 出来的东西</p>
<ul>
<li>特点：<ul>
<li>每一个 new 出来的东西都有地址值；</li>
<li>每个变量都有默认值 （byte, short, int, long 的默认值为 0；float, double 的默认值为 0.0；char 的默认值为 “\u0000”；boolean 的默认值为 false；引用类型为 null）；</li>
<li>使用完毕就变成垃圾，但是并没有立即回收。会有垃圾回收器空闲的时候回收。</li>
</ul>
</li>
</ul>
<p><img src="/2019/12/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/1.png" alt></p>
<p><img src="/2019/12/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/2.png" alt></p>
<p>三、方法区：</p>
<p>一个对象的运行过程：</p>
<ol>
<li><strong>程序从 main 方法中进入；运行到 Phone p 时，在栈中开辟了一个空间；</strong></li>
<li><strong>new Phone() 时，在队中开了一个内存空间，此时会有一个内存值为 0x0001；此时会找到对应的 Phone 的 class 文件，发现有三个变量和三个方法，于是将三个成员变量放在了堆中，但是此时的值为默认值（具体默认值见上）。注意，在方法区里也有一个地址值，假设为 0x001，可以认为在堆中也有一个位置，在堆中的位置，可以找到方法区中相对应的方法；</strong></li>
<li><strong>继续运行，p.brand = “三星”；将三星赋值给 p.brand，通过栈中的 p 找到了堆中的 brand，此时的 null 值变为 “三星”。剩下的类似；</strong></li>
<li><strong>当运行到 p.call(“乔布斯”) 时，通过栈中的 p 找到堆中存在的方法区的内存地址，从而指引到方法区中的 Phone.class 中的方法。从而将 call 方法加载到栈内存中，注意：当执行完毕后，call 方法就从栈内存中消失！剩余的如上。</strong></li>
<li><strong>最后，main 方法消失！</strong></li>
</ol>
<p><img src="/2019/12/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/3.png" alt></p>
<p><strong>两个对象的运行过程：</strong></p>
<ol>
<li><p><strong>程序从 main() 方法进入，运行到 Phone p 时，栈内存中开内存空间；</strong></p>
</li>
<li><p><strong>new Phone() 时，在队中开了一个内存空间，内存值为 0x0001；此时会找到对应的 Phone 类，发现有三个变量，于是将三个成员变量放在了堆中，但是此时的值为默认值。又发现该类还存在方法，于是将该方法的内存值留在了堆中，在方法区里也有一个地址值，假设为 0x001，这个值与堆中的值相对应；</strong></p>
</li>
<li><p><strong>程序继续运行，到 p.brand 时，进行了负值，同上；</strong></p>
</li>
<li><p><strong>当程序运行到 Phone p2 时；到 new Phone() 时，在堆内存中开辟了内存空间 0x0002，赋值给 Phone p2；</strong></p>
</li>
<li><p><strong>剩下跟一个对象的内存相同。</strong></p>
<p><img src="/2019/12/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/4.png" alt></p>
</li>
</ol>
<p><strong>三个对象的运行过程：</strong></p>
<ol>
<li><strong>基本流程跟前两个无差别；</strong></li>
<li><strong>但是当运行到 Phone p3 时，在栈内存中分配了一个空间，然后将 p1 的内存赋值给了 p3，即此时 Phone p3 的内存是指向 0x0001 的；</strong></li>
<li><strong>继续给变量赋值，会将原来已经赋值的变量给替换掉。</strong></li>
</ol>
<p><img src="/2019/12/15/Java%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/5.png" alt></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>This的值到底是什么？</title>
    <url>/2019/11/19/This%E7%9A%84%E5%80%BC%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<p>你可能遇到过这样的 JS 面试题：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; var obj = &#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   foo: function()&#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;     console.log(this)</span><br><span class="line">&gt;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; var bar = obj.foo</span><br><span class="line">&gt;</span><br><span class="line">&gt; obj.foo() // 打印出的 this 是 obj</span><br><span class="line">&gt;</span><br><span class="line">&gt; bar() // 打印出的 this 是 window</span><br></pre></td></tr></table></figure>
<p>请解释最后两行函数的值为什么不一样。</p>
<p>——-</p>
<p>初学者关于 this 的理解一直很模糊。今天这篇文章就要一次讲清楚了。</p>
<p>而且这个解释，你在别的地方看不到。看懂这篇文章，所有关于 this 的面试题，都是小菜。</p>
<p><strong>函数调用</strong></p>
<p>首先需要从函数的调用开始讲起。</p>
<p>JS（ES5）里面有三种函数调用形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; func(p1, p2)</span><br><span class="line">&gt;</span><br><span class="line">&gt; obj.child.method(p1, p2)</span><br><span class="line">&gt;</span><br><span class="line">&gt; func.call(context, p1, p2) // 先不讲 apply</span><br></pre></td></tr></table></figure>
<p>一般，初学者都知道前两种形式，而且认为前两种形式「优于」第三种形式。</p>
<p>从看到这篇文章起，你一定要记住，第三种调用形式，才是正常调用形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; func.call(context, p1, p2)</span><br></pre></td></tr></table></figure>
<p>其他两种都是语法糖，可以等价地变为 call 形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; func(p1, p2) 等价于</span><br><span class="line">&gt;</span><br><span class="line">&gt; func.call(undefined, p1, p2)</span><br><span class="line">&gt;</span><br><span class="line">&gt; obj.child.method(p1, p2) 等价于</span><br><span class="line">&gt;</span><br><span class="line">&gt; obj.child.method.call(obj.child, p1, p2)</span><br></pre></td></tr></table></figure>
<p>请记下来。（我们称此代码为「转换代码」，方便下文引用）</p>
<p>至此我们的函数调用只有一种形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; func.call(context, p1, p2)</span><br></pre></td></tr></table></figure>
<p>这样，this 就好解释了</p>
<p>this，就是上面代码中的 context。就这么简单。</p>
<p>this 是你 call 一个函数时传的 context，由于你从来不用 call 形式的函数调用，所以你一直不知道。</p>
<p>先看 func(p1, p2) 中的 this 如何确定：</p>
<p>当你写下面代码时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; function func()&#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   console.log(this)</span><br><span class="line">&gt;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; func()</span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; function func()&#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   console.log(this)</span><br><span class="line">&gt;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; func.call(undefined) // 可以简写为 func.call()</span><br></pre></td></tr></table></figure>
<p>按理说打印出来的 this 应该就是 undefined 了吧，但是浏览器里有一条规则：</p>
<p>如果你传的 context 就 null 或者 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）</p>
<p>因此上面的打印结果是 window。</p>
<p>如果你希望这里的 this 不是 window，很简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; func.call(obj) // 那么里面的 this 就是 obj 对象了</span><br></pre></td></tr></table></figure>
<p>再看 obj.child.method(p1, p2) 的 this 如何确定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; var obj = &#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   foo: function()&#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;     console.log(this)</span><br><span class="line">&gt;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; obj.foo()</span><br></pre></td></tr></table></figure>
<p>按照「转换代码」，我们将 obj.foo() 转换为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; obj.foo.call(obj)</span><br></pre></td></tr></table></figure>
<p>好了，this 就是 obj。搞定。</p>
<p>回到题目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; var obj = &#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;   foo: function()&#123;</span><br><span class="line">&gt;</span><br><span class="line">&gt;     console.log(this)</span><br><span class="line">&gt;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; var bar = obj.foo</span><br><span class="line">&gt;</span><br><span class="line">&gt; obj.foo() // 转换为 obj.foo.call(obj)，this 就是 obj</span><br><span class="line">&gt;</span><br><span class="line">&gt; bar()</span><br><span class="line">&gt;</span><br><span class="line">&gt; // 转换为 bar.call()</span><br><span class="line">&gt;</span><br><span class="line">&gt; // 由于没有传 context</span><br><span class="line">&gt;</span><br><span class="line">&gt; // 所以 this 就是 undefined</span><br><span class="line">&gt;</span><br><span class="line">&gt; // 最后浏览器给你一个默认的 this —— window 对象</span><br></pre></td></tr></table></figure>
<p><strong>[ ] 语法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; function fn ()&#123; console.log(this) &#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; var arr = [fn, fn2]</span><br><span class="line">&gt;</span><br><span class="line">&gt; arr[0]() // 这里面的 this 又是什么呢？</span><br></pre></td></tr></table></figure>
<p>我们可以把 arr<a href>0</a> 想象为 arr.0( )，虽然后者的语法错了，但是形式与转换代码里的 obj.child.method(p1, p2) 对应上了，于是就可以愉快的转换了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; arr[0]()</span><br><span class="line">&gt;</span><br><span class="line">&gt; 假想为    arr.0()</span><br><span class="line">&gt;</span><br><span class="line">&gt; 然后转换为 arr.0.call(arr)</span><br><span class="line">&gt;</span><br><span class="line">&gt; 那么里面的 this 就是 arr 了 :)</span><br></pre></td></tr></table></figure>
<p><strong>总结</strong></p>
<ol>
<li><p>this 就是你 call 一个函数时，传入的 context。</p>
</li>
<li><p>如果你的函数调用形式不是 call 形式，请按照「转换代码」将其转换为 call 形式。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 的this</title>
    <url>/2019/11/19/JavaScript-%E7%9A%84this/</url>
    <content><![CDATA[<h2 id="1-this之谜"><a href="#1-this之谜" class="headerlink" title="1. this之谜"></a>1. <code>this</code>之谜</h2><p>许多时候，<code>this</code>关键词对我以及许多刚起步的 JavaScript 程序员来说，都是一个谜。它是一种很强大的特性，但是理解它需要花不少功夫。</p>
<a id="more"></a>
<p>对有 Java, PHP 或者其他常见的编程语言背景的人来说，<a href="https://en.wikipedia.org/wiki/This_(computer_programming)" target="_blank" rel="noopener"><code>this</code></a>仅仅被看成是类方法中当前对象的一个实例：不会多也不会少。多数时候，它不能在方法外被使用。正是这样一种简单的使用方法，避免了混淆。</p>
<p>在 JavaScript 中，<code>this</code>是当前执行函数的上下文。因为 JavaScript 有 4 种不同的函数调用方式：</p>
<ul>
<li>函数调用: <code>alert(&#39;Hello World!&#39;)</code></li>
<li>方法调用: <code>console.log(&#39;Hello World!&#39;)</code></li>
<li>构造函数调用: <code>new RegExp(&#39;\\d&#39;)</code></li>
<li>隐式调用: <code>alert.call(undefined, &#39;Hello World!&#39;)</code></li>
</ul>
<p>并且每种方法都定义了自己的上下文，<code>this</code>会表现得跟程序员预期的不太一样。同时，<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">strict 模式</a>也会影响函数执行时的上下文。</p>
<p>理解<code>this</code>的关键点就是要对函数调用以及它如何影响上下文有个清晰的观点。这篇文章将会着重于对函数调用的解释、函数调用如何影响<code>this</code>以及展示确定上下文时常见的陷阱。</p>
<p>在开始之前，让我们来熟悉一些术语：</p>
<ul>
<li><strong>函数调用</strong> 指执行构成一个函数的代码（简单说就是 call 一个函数）例如 <code>parseInt(&#39;15&#39;)</code>是<code>parseInt</code>函数<strong>调用</strong>.</li>
<li><strong>函数调用</strong>的<strong>上下文</strong>指<code>this</code>在函数体中的值。</li>
<li>函数的<strong>作用域</strong>指的是在函数体内可以使用的变量、对象以及函数的集合。</li>
</ul>
<h2 id="2-函数调用"><a href="#2-函数调用" class="headerlink" title="2. 函数调用"></a>2. 函数调用</h2><p>当一个表达式为函数接着一个<code>(</code>，一些用逗号分隔的参数以及一个<code>）</code>时，<strong>函数调用</strong>被执行。例如<code>parseInt(&#39;18&#39;)</code>。这个表达式不能是<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors" target="_blank" rel="noopener">属性访问</a>，如<code>myObject.myFunction</code>，因为这会变成一个方法调用。举个例子，<code>[1,5].join(&#39;,&#39;)</code><strong>不是</strong>一个函数调用，而是一个方法调用。</p>
<p>一个简单的函数调用例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function hello(name) &#123;</span><br><span class="line">    return &apos;Hello &apos; + name + &apos;!&apos;;</span><br><span class="line">&#125;</span><br><span class="line">// Function invocation</span><br><span class="line">var message = hello(&apos;World&apos;);</span><br><span class="line">console.log(message); // =&gt; &apos;Hello World!&apos;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>hello(&#39;World&#39;)</code>是函数调用: <code>hello</code>表达式等价于一个函数，跟在它后面的是一对括号以及<code>&#39;World&#39;</code>参数。</p>
<p>更加高级的例子是 <a href="https://en.wikipedia.org/wiki/Immediately-invoked_function_expression" target="_blank" rel="noopener">IIFE</a> (立即调用的函数表达式):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;var message = (function(name) &#123;</span><br><span class="line">   return &apos;Hello &apos; + name + &apos;!&apos;;</span><br><span class="line">&#125;)(&apos;World&apos;);</span><br><span class="line">console.log(message) // =&gt; &apos;Hello World!&apos;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>IIFE 也是一个函数调用: 第一对括号<code>(function(name) {...})</code> 是一个等价于函数的表达式, 紧接着一对括号以及<code>&#39;World&#39;</code>参数: <code>(&#39;World&#39;)</code>。</p>
<h3 id="2-1-在函数调用中的this"><a href="#2-1-在函数调用中的this" class="headerlink" title="2.1. 在函数调用中的this"></a>2.1. 在函数调用中的<code>this</code></h3><blockquote>
<p><code>this</code> 在函数调用中是一个<strong>全局对象</strong></p>
</blockquote>
<p>全局对象是由执行的环境决定的。在浏览器里它是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window" target="_blank" rel="noopener"><code>window</code></a>对象。</p>
<p>在函数调用里，函数执行的上下文是全局对象。让我们一起看看下面函数里的上下文：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function sum(a, b) &#123;</span><br><span class="line">   console.log(this === window); // =&gt; true</span><br><span class="line">   this.myNumber = 20; // add &apos;myNumber&apos; property to global object</span><br><span class="line">   return a + b;</span><br><span class="line">&#125;</span><br><span class="line">// sum() is invoked as a function</span><br><span class="line">// this in sum() is a global object (window)</span><br><span class="line">sum(15, 16);     // =&gt; 31</span><br><span class="line">window.myNumber; // =&gt; 20&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>sum(15, 16)</code>被调用的时候，JavaScript 自动设置<code>this</code>指向全局对象，也就是浏览器里的<code>window</code>。</p>
<p>当<code>this</code>在所有函数作用域以外 (最上层的作用域：全局执行的上下文) 调用时，它也指向全局对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs coffeescript&quot;&gt;console.log(this === window); // =&gt; true</span><br><span class="line">this.myString = &apos;Hello World!&apos;;</span><br><span class="line">console.log(window.myString); // =&gt; &apos;Hello World!&apos;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs xml&quot;&gt;&lt;!-- In an html file --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; console.log(this === window); // =&gt; true &lt;/script&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-函数调用中的this-strict-模式"><a href="#2-2-函数调用中的this-strict-模式" class="headerlink" title="2.2. 函数调用中的this, strict 模式"></a>2.2. 函数调用中的<code>this</code>, strict 模式</h3><blockquote>
<p>strict 模式下，函数调用中的<code>this</code>是<strong><code>undefined</code></strong></p>
</blockquote>
<p>strict 模式在 <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-10.1.1" target="_blank" rel="noopener">ECMAScript 5.1</a> 中被引入，它是一个受限制的 JavaScript 变种，提供了更好的安全性以及错误检查。为了使用它，把<code>&#39;use strict&#39;</code>放在函数体的开始。这个模式会影响执行的上下文，把<code>this</code>变成<code>undefined</code>。函数执行的上下文跟上面的例子 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#21thisinfunctioninvocation" target="_blank" rel="noopener">2.1</a> 相反，不再是全局对象</p>
<p>在 strict 模式下执行函数的例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function multiply(a, b) &#123;</span><br><span class="line">    &apos;use strict&apos;; // enable the strict mode</span><br><span class="line">    console.log(this === undefined); // =&gt; true</span><br><span class="line">    return a * b;</span><br><span class="line">&#125;</span><br><span class="line">// multiply() function invocation with strict mode enabled</span><br><span class="line">// this in multiply() is undefined</span><br><span class="line">multiply(2, 5); // =&gt; 10&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>当<code>multiply(2, 5)</code>作为函数被调用时，<code>this</code>是<code>undefined</code>。</p>
<p>strict 模式不仅在当前作用域起作用，也会对内部的作用域起作用 (对所有在内部定义的函数有效)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function execute() &#123;</span><br><span class="line">    &apos;use strict&apos;; // activate the strict mode</span><br><span class="line">    function concat(str1, str2) &#123;</span><br><span class="line">        // the strict mode is enabled too</span><br><span class="line">        console.log(this === undefined); // =&gt; true</span><br><span class="line">        return str1 + str2;</span><br><span class="line">    &#125;</span><br><span class="line">    // concat() is invoked as a function in strict mode</span><br><span class="line">    // this in concat() is undefined</span><br><span class="line">    concat(&apos;Hello&apos;, &apos; World!&apos;); // =&gt; &quot;Hello World!&quot;</span><br><span class="line">&#125;</span><br><span class="line">execute();&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>&#39;use strict&#39;</code> 插入在<code>execute</code>函数体的一开始, 使它在<code>execute</code>函数的作用域内起作用。 因为<code>concat</code>定义在<code>execute</code>的作用域内, 它也会继承 strict 模式， 这导致调用<code>concat(&#39;Hello&#39;, &#39; World!&#39;)</code>时， <code>this</code>是<code>undefined</code>。</p>
<p>单个的 JavaScript 文件可能既包含 strict 模式又包含非 strict 模式。所以，在单个的脚本内，同样的调用方法可能有不同的上下文行为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function nonStrictSum(a, b) &#123;</span><br><span class="line">    // non-strict mode</span><br><span class="line">    console.log(this === window); // =&gt; true</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line">function strictSum(a, b) &#123;</span><br><span class="line">    &apos;use strict&apos;;</span><br><span class="line">    // strict mode is enabled</span><br><span class="line">    console.log(this === undefined); // =&gt; true</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line">// nonStrictSum() is invoked as a function in non-strict mode</span><br><span class="line">// this in nonStrictSum() is the window object</span><br><span class="line">nonStrictSum(5, 6); // =&gt; 11</span><br><span class="line">// strictSum() is invoked as a function in strict mode</span><br><span class="line">// this in strictSum() is undefined</span><br><span class="line">strictSum(8, 12); // =&gt; 20&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-陷阱-内部函数中的this"><a href="#2-3-陷阱-内部函数中的this" class="headerlink" title="2.3. 陷阱: 内部函数中的this"></a>2.3. 陷阱: 内部函数中的<code>this</code></h3><p>一个函数调用中的常见错误就是以为<code>this</code>在内部函数中跟在外部函数中一样。 正确来说，内部函数的上下文依赖于调用方法，而不是外部函数的上下文。 为了能使<code>this</code>跟预期的一样，用隐式调用来修改内部函数的上下文 (用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener"><code>.call()</code></a>或者<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener"><code>.apply()</code></a>, 如 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#5indirectinvocation" target="_blank" rel="noopener">5.</a> 所示) 或者创建一个绑定函数 (用<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="noopener"><code>.bind()</code></a>, 如 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#6boundfunction" target="_blank" rel="noopener">6.</a> 所示）。</p>
<p>下面的例子计算了 2 个数字的和：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;var numbers = &#123;</span><br><span class="line">   numberA: 5,</span><br><span class="line">   numberB: 10,</span><br><span class="line">   sum: function() &#123;</span><br><span class="line">     console.log(this === numbers); // =&gt; true</span><br><span class="line">     function calculate() &#123;</span><br><span class="line">       // this is window or undefined in strict mode</span><br><span class="line">       console.log(this === numbers); // =&gt; false</span><br><span class="line">       return this.numberA + this.numberB;</span><br><span class="line">     &#125;</span><br><span class="line">     return calculate();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); // =&gt; NaN or throws TypeError in strict mode&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>numbers.sum()</code>是一个对象上的方法调用 (见 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/3methodonanobjectinvocation" target="_blank" rel="noopener">3.</a>)，所以<code>sum</code>中的上下文是<code>numbers</code>对象。<code>calculate</code>函数定义在<code>sum</code>内部，所以你会指望<code>calculate()</code>中的<code>this</code>也是<code>numbers</code>对象。然而，<code>calculate()</code>是一个函数调用（而<strong>不是</strong>方法调用），它的<code>this</code>是全局对象<code>window</code>(例子 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#21thisinfunctioninvocation" target="_blank" rel="noopener">2.1.</a>) 或者 strict 模式下的<code>undefined</code>(例子 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#22thisinfunctioninvocationstrictmode" target="_blank" rel="noopener">2.2.</a>)。即使外部函数<code>sum</code>的上下文是<code>numbers</code>对象，它在这里也没有影响。<code>numbers.sum()</code>的调用结果是<code>NaN</code>或者 strict 模式下的<code>TypeError: Cannot read property &#39;numberA&#39; of undefined</code>错误。因为<code>calculate</code>没有被正确调用，结果绝不是预期的<code>5 + 10 = 15</code>。</p>
<p>为了解决这个问题，<code>calculate</code>应该跟<code>sum</code>有一样的上下文，以便于使用<code>numberA</code>和<code>numberB</code>。解决方法之一是使用<code>.call()</code>方法 (见章节 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#5indirectinvocation" target="_blank" rel="noopener">5.</a>):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;var numbers = &#123;</span><br><span class="line">   numberA: 5,</span><br><span class="line">   numberB: 10,</span><br><span class="line">   sum: function() &#123;</span><br><span class="line">     console.log(this === numbers); // =&gt; true</span><br><span class="line">     function calculate() &#123;</span><br><span class="line">       console.log(this === numbers); // =&gt; true</span><br><span class="line">       return this.numberA + this.numberB;</span><br><span class="line">     &#125;</span><br><span class="line">     // use .call() method to modify the context</span><br><span class="line">     return calculate.call(this);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line">numbers.sum(); // =&gt; 15&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>calculate.call(this)</code>像往常一样执行<code>calculate</code>，但是上下文由第一个参数指定。现在<code>this.numberA + this.numberB</code>相当于<code>numbers.numberA + numbers.numberB</code>，函数会返回预期的结果<code>5 + 10 = 15</code>。</p>
<h2 id="3-方法调用"><a href="#3-方法调用" class="headerlink" title="3. 方法调用"></a>3. 方法调用</h2><p>一个<strong>方法</strong>是作为一个对象的属性存储的函数。例如:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;var myObject = &#123;</span><br><span class="line">    // helloFunction is a method</span><br><span class="line">    helloFunction: function() &#123;</span><br><span class="line">        return &apos;Hello World!&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var message = myObject.helloFunction();&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>helloFunction</code>是<code>myObject</code>的一个方法。为了使用这个方法, 使用属性访问：<code>myObject.helloFunction</code>。</p>
<p>当一个表达式以属性访问的形式执行时，执行的是<strong>方法调用</strong>，它相当于以个函数接着<code>(</code>，一组用逗号分隔的参数以及<code>)</code>。 利用前面的例子，<code>myObject.helloFunction()</code>是对象<code>myObject</code>上的一个<code>helloFunction</code>的方法调用。<code>[1, 2].join(&#39;,&#39;)</code> 或<code>/\s/.test(&#39;beautiful world&#39;)</code>也被认为是方法调用。</p>
<p>区分<strong>函数调用</strong> (见 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#2functioninvocation" target="_blank" rel="noopener">2.</a>) 跟<strong>方法调用</strong>是很重要的，因为他们完全不同。他们最主要的区别在于方法调用要求函数以属性访问的形式调用 (如<code>&lt;expression&gt;.functionProperty()</code>或者<code>&lt;expression&gt;[&#39;functionProperty&#39;]()</code>)，而函数调用并没有这样的要求 (如<code>&lt;expression&gt;()</code>)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;[&apos;Hello&apos;, &apos;World&apos;].join(&apos;, &apos;); // method invocation</span><br><span class="line">(&#123; ten: function() &#123; return 10; &#125; &#125;).ten(); // method invocation</span><br><span class="line">var obj = &#123;&#125;;</span><br><span class="line">obj.myFunction = function() &#123;</span><br><span class="line">  return new Date().toString();</span><br><span class="line">&#125;;</span><br><span class="line">obj.myFunction(); // method invocation</span><br><span class="line"></span><br><span class="line">var otherFunction = obj.myFunction;</span><br><span class="line">otherFunction();     // function invocation</span><br><span class="line">parseFloat(&apos;16.60&apos;); // function invocation</span><br><span class="line">isNaN(0);            // function invocation&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-1-方法调用中的this"><a href="#3-1-方法调用中的this" class="headerlink" title="3.1. 方法调用中的this"></a>3.1. 方法调用中的<code>this</code></h3><blockquote>
<p>在方法调用中，<code>this</code>是<strong>拥有这个方法的对象</strong></p>
</blockquote>
<p>当调用一个对象上的方法时，<code>this</code>变成这个对象自身。 让我们一起来创建一个对象，它带有一个可以增大数字的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;var calc = &#123;</span><br><span class="line">  num: 0,</span><br><span class="line">  increment: function() &#123;</span><br><span class="line">    console.log(this === calc); // =&gt; true</span><br><span class="line">    this.num += 1;</span><br><span class="line">    return this.num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// method invocation. this is calc</span><br><span class="line">calc.increment(); // =&gt; 1</span><br><span class="line">calc.increment(); // =&gt; 2&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>调用<code>calc.increment()</code>会把<code>increment</code>函数的上下文变成<code>calc</code>对象。所以，用<code>this.num</code>来增加 num 这个属性跟预期一样工作。</p>
<p>javaScript 对象会从它的<code>prototype</code>继承方法。当这个继承的方法在新的对象上被调用时，上下文仍然是该对象本身：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;var myDog = Object.create(&#123;</span><br><span class="line">  sayName: function() &#123;</span><br><span class="line">     console.log(this === myDog); // =&gt; true</span><br><span class="line">     return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">myDog.name = &apos;Milo&apos;;</span><br><span class="line">// method invocation. this is myDog</span><br><span class="line">myDog.sayName(); // =&gt; &apos;Milo&apos;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener"><code>Object.create()</code></a>创建了一个新的对象<code>myDog</code>，并且设置了它的 prototype。<code>myDog</code>继承了<code>sayName</code>方法。当执行<code>myDog.sayName()</code>时，<code>myDog</code>是调用的上下文。</p>
<p>在 ECMAScript 6 的 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener"><code>class</code></a>语法中，方法调用的上下文也是这个实例本身：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;class Planet &#123;</span><br><span class="line">  constructor(name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    console.log(this === earth); // =&gt; true</span><br><span class="line">    return this.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var earth = new Planet(&apos;Earth&apos;);</span><br><span class="line">// method invocation. the context is earth</span><br><span class="line">earth.getName(); // =&gt; &apos;Earth&apos;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-陷阱-从-object-中分离方法"><a href="#3-2-陷阱-从-object-中分离方法" class="headerlink" title="3.2. 陷阱: 从 object 中分离方法"></a>3.2. 陷阱: 从 object 中分离方法</h3><p>一个对象中的方法可以赋值给另一个变量。当用这个变量调用方法时，你可能以为<code>this</code>指向定义这个方法的对象。</p>
<p>正确来说如果这个方法在没有对象的时候被调用，它会变成函数调用：<code>this</code>变成全局对象<code>window</code>或者 strict 模式下的<code>undefined</code>(见 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#21thisinfunctioninvocation" target="_blank" rel="noopener">2.1</a> 和 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#22thisinfunctioninvocationstrictmode" target="_blank" rel="noopener">2.2</a>)。 用绑定函数 (用<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="noopener"><code>.bind()</code></a>, 见 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#6boundfunction" target="_blank" rel="noopener">6.</a>) 可以修正上下文，使它变成拥有这个方法的对象。</p>
<p>下面的例子创建了<code>Animal</code>构造函数并创造了它的一个实例 - <code>myCat</code>。 <code>setTimout()</code>会在 1 秒钟之后输出<code>myCat</code>对象的信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function Animal(type, legs) &#123;</span><br><span class="line">    this.type = type;</span><br><span class="line">    this.legs = legs;</span><br><span class="line">    this.logInfo = function() &#123;</span><br><span class="line">        console.log(this === myCat); // =&gt; false</span><br><span class="line">        console.log(&apos;The &apos; + this.type + &apos; has &apos; + this.legs + &apos; legs&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var myCat = new Animal(&apos;Cat&apos;, 4);</span><br><span class="line">// logs &quot;The undefined has undefined legs&quot;</span><br><span class="line">// or throws a TypeError in strict mode</span><br><span class="line">setTimeout(myCat.logInfo, 1000);&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>你可能会以为<code>setTimout</code>会调用<code>myCat.logInfo()</code>，输出关于<code>myCat</code>对象的信息。实际上，这个方法在作为参数传递给<code>setTimout(myCat.logInfo)</code>时已经从原对象上分离了，1 秒钟之后发生的是一个函数调用。当<code>logInfo</code>作为函数被调用时，<code>this</code>是全局对象，或者 strict 模式下的<code>undefined</code>（反正<strong>不是</strong><code>myCat</code>对象），所以不会正确地输出信息。</p>
<p>函数可以通过<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="noopener"><code>.bind()</code></a>方法跟一个对象绑定 (见 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#6boundfunction" target="_blank" rel="noopener">6.</a>)。如果这个分离的方法与<code>myCat</code>绑定，那么上下文的问题就解决了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function Animal(type, legs) &#123;</span><br><span class="line">    this.type = type;</span><br><span class="line">    this.legs = legs;</span><br><span class="line">    this.logInfo = function() &#123;</span><br><span class="line">        console.log(this === myCat); // =&gt; true</span><br><span class="line">        console.log(&apos;The &apos; + this.type + &apos; has &apos; + this.legs + &apos; legs&apos;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">var myCat = new Animal(&apos;Cat&apos;, 4);</span><br><span class="line">// logs &quot;The Cat has 4 legs&quot;</span><br><span class="line">setTimeout(myCat.logInfo.bind(myCat), 1000);&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>myCat.logInfo.bind(myCat)</code>返回一个跟<code>logInfo</code>执行效果一样的函数，但是它的<code>this</code>即使在函数调用情况下也是<code>myCat</code>。</p>
<h2 id="4-构造函数调用"><a href="#4-构造函数调用" class="headerlink" title="4. 构造函数调用"></a>4. 构造函数调用</h2><p>当 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noopener"><code>new</code></a>关键词紧接着函数对象,<code>(</code>, 一组逗号分隔的参数以及<code>)</code>时被调用，执行的是<strong>构造函数调用</strong>如<code>new RegExp(&#39;\\d&#39;)</code>。</p>
<p>这个例子声明了一个<code>Country</code>函数，并且将它作为一个构造函数调用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function Country(name, traveled) &#123;</span><br><span class="line">    this.name = name ? name : &apos;United Kingdom&apos;;</span><br><span class="line">    this.traveled = Boolean(traveled); // transform to a boolean</span><br><span class="line">&#125;</span><br><span class="line">Country.prototype.travel = function() &#123;</span><br><span class="line">    this.traveled = true;</span><br><span class="line">&#125;;</span><br><span class="line">// Constructor invocation</span><br><span class="line">var france = new Country(&apos;France&apos;, false);</span><br><span class="line">// Constructor invocation</span><br><span class="line">var unitedKingdom = new Country;</span><br><span class="line"></span><br><span class="line">france.travel(); // Travel to France&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>new Country(&#39;France&#39;, false)</code>是<code>Country</code>函数的构造函数调用。它的执行结果是一个<code>name</code>属性为<code>&#39;France&#39;</code>的新的对象。 如果这个构造函数调用时不需要参数，那么括号可以省略：<code>new Country</code>。</p>
<p>从 ECMAScript 6 开始，JavaScript 允许用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener"><code>class</code></a>关键词来定义构造函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;class City &#123;</span><br><span class="line">  constructor(name, traveled) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.traveled = false;</span><br><span class="line">  &#125;</span><br><span class="line">  travel() &#123;</span><br><span class="line">    this.traveled = true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// Constructor invocation</span><br><span class="line">var paris = new City(&apos;Paris&apos;, false);</span><br><span class="line">paris.travel();&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>new City(&#39;Paris&#39;)</code>是构造函数调用。这个对象的初始化由这个类中一个特殊的方法 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor" target="_blank" rel="noopener"><code>constructor</code></a>来处理。其中，<code>this</code>指向新创建的对象。</p>
<p>构造函数创建了一个新的空的对象，它从构造函数的原型继承了属性。构造函数的作用就是去初始化这个对象。 可能你已经知道了，在这种类型的调用中，上下文指向新创建的实例。这是我们下一章的主题。</p>
<p>当属性访问<code>myObject.myFunction</code>前面有一个<code>new</code>关键词时，JavaScript 会执行<strong>构造函数调用</strong>而<strong>不是</strong>原来的<strong>方法调用</strong>。例如<code>new myObject.myFunction()</code>：它相当于先用属性访问把方法提取出来<code>extractedFunction = myObject.myFunction</code>，然后利用把它作为构造函数创建一个新的对象： <code>new extractedFunction()</code>。</p>
<h3 id="4-1-构造函数中的this"><a href="#4-1-构造函数中的this" class="headerlink" title="4.1. 构造函数中的this"></a>4.1. 构造函数中的<code>this</code></h3><blockquote>
<p>在构造函数调用中<code>this</code>指向<strong>新创建的对象</strong></p>
</blockquote>
<p>构造函数调用的上下文是新创建的对象。它利用构造函数的参数初始化新的对象，设定属性的初始值，添加时间处理函数等等。</p>
<p>让我们来看看下面例子里的上下文：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function Foo () &#123;</span><br><span class="line">    console.log(this instanceof Foo); // =&gt; true</span><br><span class="line">    this.property = &apos;Default Value&apos;;</span><br><span class="line">&#125;</span><br><span class="line">// Constructor invocation</span><br><span class="line">var fooInstance = new Foo();</span><br><span class="line">fooInstance.property; // =&gt; &apos;Default Value&apos;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>new Foo()</code>正在调用一个构造函数，它的上下文是<code>fooInstance</code>。其中，<code>Foo</code>被初始化了：<code>this.property</code>被赋予了一个默认值。</p>
<p>同样的情况在用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener"><code>class</code></a>语法（从 ES6 起）时也会发生，唯一的区别是初始化在<code>constructor</code>方法中进行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;class Bar &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        console.log(this instanceof Bar); // =&gt; true</span><br><span class="line">        this.property = &apos;Default Value&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// Constructor invocation</span><br><span class="line">var barInstance = new Bar();</span><br><span class="line">barInstance.property; // =&gt; &apos;Default Value&apos;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>当<code>new Bar()</code>执行时，JavaScript 创建了一个空的对象，把它作为<code>constructor</code>方法的上下文。现在，你可以用<code>this</code>关键词给它添加属性：<code>this.property = &#39;Default Value&#39;</code>。</p>
<h3 id="4-2-陷阱-忘了new"><a href="#4-2-陷阱-忘了new" class="headerlink" title="4.2. 陷阱: 忘了new"></a>4.2. 陷阱: 忘了<code>new</code></h3><p>有些 JavaScirpt 函数不是只在作为构造函数调用的时候才创建新的对象，作为函数调用时也会，例如<code>RegExp</code>：</p>
<pre class="hljs javascript">var reg1 = new RegExp('\\w+');
var reg2 = RegExp('\\w+');

reg1 instanceof RegExp;      // => true
reg2 instanceof RegExp;      // => true
reg1.source === reg2.source; // => true</pre>

<p>当执行<code>new RegExp(&#39;\\w+&#39;)</code>和<code>RegExp(&#39;\\w+&#39;)</code>时，JavaScrit 会创建相同的正则表达式对象。</p>
<p>因为有些构造函数在<code>new</code>关键词缺失的情况下，可能跳过对象初始化，用函数调用创建对象会存在问题（不包括<a href="http://javascript.info/tutorial/factory-constructor-pattern" target="_blank" rel="noopener">工厂模式</a>）。 下面的例子就说明了这个问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function Vehicle(type, wheelsCount) &#123;</span><br><span class="line">    this.type = type;</span><br><span class="line">    this.wheelsCount = wheelsCount;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">// Function invocation</span><br><span class="line">var car = Vehicle(&apos;Car&apos;, 4);</span><br><span class="line">car.type;       // =&gt; &apos;Car&apos;</span><br><span class="line">car.wheelsCount // =&gt; 4</span><br><span class="line">car === window  // =&gt; true&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>Vehicle</code>是一个在上下文上设置了<code>type</code>跟<code>wheelsCount</code>属性的函数。当执行<code>Vehicle(&#39;Car&#39;, 4)</code>时，返回了一个<code>car</code>对象，它的属性是正确的：<code>car.type</code>是<code>&#39;Car&#39;</code>， <code>car.wheelsCount</code>是<code>4</code>。你可能以为它正确地创建并初始化了对象。 然而，在函数调用中，<code>this</code>是<code>window</code>对象 (见 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#21thisinfunctioninvocation" target="_blank" rel="noopener">2.1.</a>)，<code>Vehicle(&#39;Car&#39;, 4)</code>实际上是在给<code>window</code>对象设置属性 – 这是错的。它并没有创建一个新的对象。</p>
<p>当你希望调用构造函数时，确保你使用了<code>new</code>操作符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function Vehicle(type, wheelsCount) &#123;</span><br><span class="line">    if (!(this instanceof Vehicle)) &#123;</span><br><span class="line">        throw Error(&apos;Error: Incorrect invocation&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    this.type = type;</span><br><span class="line">    this.wheelsCount = wheelsCount;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">// Constructor invocation</span><br><span class="line">var car = new Vehicle(&apos;Car&apos;, 4);</span><br><span class="line">car.type               // =&gt; &apos;Car&apos;</span><br><span class="line">car.wheelsCount        // =&gt; 4</span><br><span class="line">car instanceof Vehicle // =&gt; true</span><br><span class="line"></span><br><span class="line">// Function invocation. Generates an error.</span><br><span class="line">var brokenCat = Vehicle(&apos;Broken Car&apos;, 3);&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>new Vehicle(&#39;Car&#39;, 4)</code>工作正常：因为<code>new</code>关键词出现在构造函数调用前，一个新的对象被创建并初始化。 在构造函数里我们添加了一个验证<code>this instanceof Vehicle</code>来确保执行的上下文是正确的对象类型。如果<code>this</code>不是<code>Vehicle</code>，那么就会报错。这样，如果执行<code>Vehicle(&#39;Broken Car&#39;, 3)</code>(没有<code>new</code>)，我们会得到一个异常：<code>Error: Incorrect invocation</code>。</p>
<h2 id="5-隐式调用"><a href="#5-隐式调用" class="headerlink" title="5. 隐式调用"></a>5. 隐式调用</h2><p>当函数被<code>.call()</code>或者<code>.apply()</code>调用时，执行的是<strong>隐式调用</strong>。</p>
<p>函数在 JavaScript 中是第一类对象，这意味着函数也是对象。它的类型是 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener"><code>Function</code></a>。根据这个函数对象所拥有的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function#Methods" target="_blank" rel="noopener">方法列表</a>，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener"><code>.call()</code></a>和<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener"><code>.apply()</code></a>可以跟一个可变的上下文一起调用函数。</p>
<p>方法<code>.call(thisArg[, arg1[, arg2[, ...]]])</code>将接受的第一个参数<code>thisArg</code>作为调用时的上下文，<code>arg1, arg2, ...</code>这些则作为参数传入被调用的函数。方法<code>.apply(thisArg, [args])</code>将接受的第一个参数<code>thisArg</code>作为调用时的上下文，并且接受另一个<a href="http://www.2ality.com/2013/05/quirk-array-like-objects.html" target="_blank" rel="noopener">类似数组的对象</a><code>[args]</code>作为被调用函数的参数传入。</p>
<p>下面是一个隐式调用的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function increment(number) &#123;</span><br><span class="line">    return ++number;</span><br><span class="line">&#125;</span><br><span class="line">increment.call(undefined, 10);    // =&gt; 11</span><br><span class="line">increment.apply(undefined, [10]); // =&gt; 11&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>increment.call()</code>和<code>increment.apply()</code>都用参数<code>10</code>调用了这个自增函数。</p>
<p>这两者的主要区别是<code>.call()</code>接受一组参数，例如<code>myFunction.call(thisValue, &#39;value1&#39;, &#39;value2&#39;)</code>。然而<code>.apply()</code>接受的一组参数必须是一个类似数组的对象，例如<code>myFunction.apply(thisValue, [&#39;value1&#39;, &#39;value2&#39;])</code>。</p>
<h3 id="5-1-隐式调用中的this"><a href="#5-1-隐式调用中的this" class="headerlink" title="5.1. 隐式调用中的this"></a>5.1. 隐式调用中的<code>this</code></h3><blockquote>
<p>在隐式调用<code>.call()</code>或<code>.apply()</code>中，<code>this</code>是<strong>第一个参数</strong></p>
</blockquote>
<p>很明显，在隐式调用中，<code>this</code>是传入<code>.call()</code>或<code>.apply()</code>中的第一个参数。下面的这个例子就说明了这一点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;var rabbit = &#123; name: &apos;White Rabbit&apos; &#125;;</span><br><span class="line">function concatName(string) &#123;</span><br><span class="line">    console.log(this === rabbit); // =&gt; true</span><br><span class="line">    return string + this.name;</span><br><span class="line">&#125;</span><br><span class="line">// Indirect invocations</span><br><span class="line">concatName.call(rabbit, &apos;Hello &apos;);  // =&gt; &apos;Hello White Rabbit&apos;</span><br><span class="line">concatName.apply(rabbit, [&apos;Bye &apos;]); // =&gt; &apos;Bye White Rabbit&apos;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>当一个函数应该在特定的上下文中执行时，隐式调用就非常有用。例如为了解决方法调用时，<code>this</code>总是<code>window</code>或 strict 模式下的<code>undefined</code>的上下文问题 (见 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#23pitfallthisinaninnerfunction" target="_blank" rel="noopener">2.3.</a>)。隐式调用可以用于模拟在一个对象上调用某个方法（见之前的代码样例）。</p>
<p>另一个实际的例子是在 ES5 中，在创建的类的结构层次中中，调用父类的构造函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function Runner(name) &#123;</span><br><span class="line">    console.log(this instanceof Rabbit); // =&gt; true</span><br><span class="line">    this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">function Rabbit(name, countLegs) &#123;</span><br><span class="line">    console.log(this instanceof Rabbit); // =&gt; true</span><br><span class="line">    // Indirect invocation. Call parent constructor.</span><br><span class="line">    Runner.call(this, name);</span><br><span class="line">    this.countLegs = countLegs;</span><br><span class="line">&#125;</span><br><span class="line">var myRabbit = new Rabbit(&apos;White Rabbit&apos;, 4);</span><br><span class="line">myRabbit; // &#123; name: &apos;White Rabbit&apos;, countLegs: 4 &#125;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>Rabbit</code>中的<code>Runner.call(this, name)</code>隐式调用了父类的函数来初始化这个对象。</p>
<h2 id="6-绑定函数"><a href="#6-绑定函数" class="headerlink" title="6. 绑定函数"></a>6. 绑定函数</h2><p><strong>绑定函数</strong>是一个与对象绑定的函数。通常它是通过在原函数上使用 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="noopener"><code>.bind()</code></a>来创建的。原函数和绑定的函数共享代码跟作用域，但是在执行时有不同的上下文。</p>
<p>方法<code>.bind(thisArg[, arg1[, arg2[, ...]]])</code>接受第一个参数<code>thisArg</code>作为绑定函数执行时的上下文，并且它接受一组可选的参数 <code>arg1, arg2, ...</code>作为被调用函数的参数。它返回一个绑定了<code>thisArg</code>的新函数。</p>
<p>下面的代码创建了一个绑定函数并在之后调用它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function multiply(number) &#123;</span><br><span class="line">    &apos;use strict&apos;;</span><br><span class="line">    return this * number;</span><br><span class="line">&#125;</span><br><span class="line">// create a bound function with context</span><br><span class="line">var double = multiply.bind(2);</span><br><span class="line">// invoke the bound function</span><br><span class="line">double(3);  // =&gt; 6</span><br><span class="line">double(10); // =&gt; 20&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>multiply.bind(2)</code>返回了一个新的函数对象<code>double</code>，<code>double</code>绑定了数字<code>2</code>。<code>multiply</code>跟<code>double</code>有相同的代码跟作用域。</p>
<p>跟<code>.apply()</code>以及<code>.call()</code>方法 (见 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#5indirectinvocation" target="_blank" rel="noopener">5.</a>) 马上调用函数不同，<code>.bind()</code>函数返回一个新的方法，它应该在之后被调用，只是<code>this</code>已经被提前设置好了。</p>
<h3 id="6-1-绑定函数中的this"><a href="#6-1-绑定函数中的this" class="headerlink" title="6.1. 绑定函数中的this"></a>6.1. 绑定函数中的<code>this</code></h3><blockquote>
<p>在调用绑定函数时，<code>this</code>是<code>.bind()</code>的<strong>第一个参数</strong>。</p>
</blockquote>
<p><code>.bind()</code>的作用是创建一个新的函数，它在被调用时的上下文是传入<code>.bind()</code>的第一个参数。它是一种非常强大的技巧，使你可以创建一个定义了<code>this</code>值的函数。</p>
<p>让我们来看看如何在一个绑定函数中设置<code>this</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs php&quot;&gt;var numbers = &#123;</span><br><span class="line">    array: [3, 5, 10],</span><br><span class="line">    getNumbers: function() &#123;</span><br><span class="line">        return this.array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">// Create a bound function</span><br><span class="line">var boundGetNumbers = numbers.getNumbers.bind(numbers);</span><br><span class="line">boundGetNumbers(); // =&gt; [3, 5, 10]</span><br><span class="line">// Extract method from object</span><br><span class="line">var simpleGetNumbers = numbers.getNumbers;</span><br><span class="line">simpleGetNumbers(); // =&gt; undefined or throws an error in strict mode&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>numbers.getNumbers.bind(numbers)</code>返回了一个绑定了<code>number</code>对象的<code>boundGetNumbers</code>函数。<code>boundGetNumbers()</code>调用时的<code>this</code>是<code>number</code>对象，并能够返回正确的数组对象。<code>numbers.getNumbers</code>函数能在不绑定的情况下赋值给变量<code>simpleGetNumbers</code>。在之后的函数调用中，<code>simpleGetNumbers()</code>的<code>this</code>是<code>window</code>或者 strict 模式下的<code>undefined</code>，不是<code>number</code>对象 (见 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#32pitfallseparatingmethodfromitsobject" target="_blank" rel="noopener">3.2. 陷阱</a>)。在这个情况下，<code>simpleGetNumbers()</code>不会正确返回数组。</p>
<p><code>.bind()</code>永久性地建立了一个上下文的链接，并且会一直保持它。一个绑定函数不能通过<code>.call()</code>或者<code>.apply()</code>来改变它的上下文，甚至是再次绑定也不会有什么作用。 只有用绑定函数的构造函数调用方法能够改变上下文，但并不推荐这个方法（因为构造函数调用用的是_常规函数_而不是绑定函数）。 下面的例子声明了一个绑定函数，接着试图改变它预先定义好的上下文：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function getThis() &#123;</span><br><span class="line">    &apos;use strict&apos;;</span><br><span class="line">    return this;</span><br><span class="line">&#125;</span><br><span class="line">var one = getThis.bind(1);</span><br><span class="line">// Bound function invocation</span><br><span class="line">one(); // =&gt; 1</span><br><span class="line">// Use bound function with .apply() and .call()</span><br><span class="line">one.call(2);  // =&gt; 1</span><br><span class="line">one.apply(2); // =&gt; 1</span><br><span class="line">// Bind again</span><br><span class="line">one.bind(2)(); // =&gt; 1</span><br><span class="line">// Call the bound function as a constructor</span><br><span class="line">new one(); // =&gt; Object&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>只有<code>new one()</code>改变了绑定函数的上下文，其他方式的调用中<code>this</code>总是等于<code>1</code>。</p>
<h2 id="7-箭头函数"><a href="#7-箭头函数" class="headerlink" title="7. 箭头函数"></a>7. 箭头函数</h2><p><strong>箭头函数</strong>被设计来以更简短的形式定义函数。并且能从<a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping" target="_blank" rel="noopener">词法</a>上绑定上下文。它能以下面的方式被使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;var hello = (name) =&gt; &#123;</span><br><span class="line">    return &apos;Hello &apos; + name;</span><br><span class="line">&#125;;</span><br><span class="line">hello(&apos;World&apos;); // =&gt; &apos;Hello World&apos;</span><br><span class="line">// Keep only even numbers</span><br><span class="line">[1, 2, 5, 6].filter(item =&gt; item % 2 === 0); // =&gt; [2, 6]&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>箭头函数带来了更轻量的语法，避免了冗长的<code>function</code>关键词。你甚至可以在函数只有一个语句的时候省略<code>return</code>。</p>
<p>因为箭头函数是<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name" target="_blank" rel="noopener">匿名的</a>，这意味着它的<code>name</code>属性是个空字符串<code>&#39;&#39;</code>。这样一来，它就没有一个词法上的函数名（函数名在递归跟事件解绑时会比较有用）。同时，跟常规函数相反，它也不提供 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="noopener"><code>arguments</code></a>对象。但是，这在 ES6 中通过 <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/rest_parameters" target="_blank" rel="noopener">rest parameters</a> 修复了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;var sumArguments = (...args) =&gt; &#123;</span><br><span class="line">   console.log(typeof arguments); // =&gt; &apos;undefined&apos;</span><br><span class="line">   return args.reduce((result, item) =&gt; result + item);</span><br><span class="line">&#125;;</span><br><span class="line">sumArguments.name      // =&gt; &apos;&apos;</span><br><span class="line">sumArguments(5, 5, 6); // =&gt; 16&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<h3 id="7-1-箭头函数中的this"><a href="#7-1-箭头函数中的this" class="headerlink" title="7.1. 箭头函数中的this"></a>7.1. 箭头函数中的<code>this</code></h3><blockquote>
<p><code>this</code>是箭头函数定义时<strong>封装好的上下文</strong></p>
</blockquote>
<p>箭头函数并不会创建它自己的上下文，它从它定义处的外部函数获得<code>this</code>上下文。下面的例子说明了这个上下文透明的特性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;class Point &#123;</span><br><span class="line">    constructor(x, y) &#123;</span><br><span class="line">        this.x = x;</span><br><span class="line">        this.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    log() &#123;</span><br><span class="line">        console.log(this === myPoint); // =&gt; true</span><br><span class="line">        setTimeout(()=&gt; &#123;</span><br><span class="line">            console.log(this === myPoint);      // =&gt; true</span><br><span class="line">            console.log(this.x + &apos;:&apos; + this.y); // =&gt; &apos;95:165&apos;</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var myPoint = new Point(95, 165);</span><br><span class="line">myPoint.log();&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>setTimeout</code>在调用箭头函数时跟<code>log()</code>使用了相同的上下文 (<code>myPoint</code>对象)。正如所见，箭头函数从它定义处 “继承” 了函数的上下文。 如果在这个例子里尝试用常规函数，它会建立自己的上下文(<code>window</code>或 strict 模式下的<code>undefined</code>)。所以，为了让同样的代码能在函数表达式中正确运行，需要手动绑定上下文：<code>setTimeout(function() {...}.bind(this))</code>。这样一来就显得很啰嗦，不如用箭头函数来得简短。</p>
<p>如果箭头函数定义在最上层的作用域（在所有函数之外），那么上下文就总是全局对象（浏览器中的<code>window</code>对象）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs coffeescript&quot;&gt;var getContext = () =&gt; &#123;</span><br><span class="line">   console.log(this === window); // =&gt; true</span><br><span class="line">   return this;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(getContext() === window); // =&gt; true&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>箭头函数会<strong>一劳永逸</strong>地绑定词法作用域。即使使用修改上下文的方法，<code>this</code>也不能被改变：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs cs&quot;&gt;var numbers = [1, 2];</span><br><span class="line">(function() &#123;</span><br><span class="line">    var get = () =&gt; &#123;</span><br><span class="line">        console.log(this === numbers); // =&gt; true</span><br><span class="line">        return this;</span><br><span class="line">    &#125;;</span><br><span class="line">    console.log(this === numbers); // =&gt; true</span><br><span class="line">    get(); // =&gt; [1, 2]</span><br><span class="line">    // Use arrow function with .apply() and .call()</span><br><span class="line">    get.call([0]);  // =&gt; [1, 2]</span><br><span class="line">    get.apply([0]); // =&gt; [1, 2]</span><br><span class="line">    // Bind</span><br><span class="line">    get.bind([0])(); // =&gt; [1, 2]</span><br><span class="line">&#125;).call(numbers);&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>一个函数表达式通过<code>.call(numbers)</code>被隐式调用了，这使得这个调用的<code>this</code>变成了<code>numbers</code>。这样一来，箭头函数<code>get</code>的<code>this</code>也变成了<code>numbers</code>，因为它是从词法上获得的上下文。</p>
<p>无论<code>get</code>是怎么被调用的，它一直保持了一开始的上下文<code>numbers</code>。用其他上下文的隐式调用 (通过<code>.call()</code>或<code>.apply()</code>) 或者重新绑定 (通过<code>.bind()</code>) 都不会起作用</p>
<p>箭头函数不能用作构造函数。如果像构造函数一样调用<code>new get()</code>， JavaScript 会抛出异常：<code>TypeError: get is not a constructor</code>。</p>
<h3 id="7-2-陷阱-用箭头函数定义方法"><a href="#7-2-陷阱-用箭头函数定义方法" class="headerlink" title="7.2. 陷阱: 用箭头函数定义方法"></a>7.2. 陷阱: 用箭头函数定义方法</h3><p>你可能想用箭头函数在一个对象上定义方法。这很合情合理：箭头函数的定义相比于<a href="https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function" target="_blank" rel="noopener">函数表达式</a>短得多：例如<code>(param) =&gt; {...}</code>而不是<code>function(param) {..}</code>。</p>
<p>这个例子用箭头函数在<code>Period</code>类上定义了<code>format()</code>方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function Period (hours, minutes) &#123;</span><br><span class="line">    this.hours = hours;</span><br><span class="line">    this.minutes = minutes;</span><br><span class="line">&#125;</span><br><span class="line">Period.prototype.format = () =&gt; &#123;</span><br><span class="line">    console.log(this === window); // =&gt; true</span><br><span class="line">    return this.hours + &apos; hours and &apos; + this.minutes + &apos; minutes&apos;;</span><br><span class="line">&#125;;</span><br><span class="line">var walkPeriod = new Period(2, 30);</span><br><span class="line">walkPeriod.format(); // =&gt; &apos;undefined hours and undefined minutes&apos;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>由于<code>format</code>是一个箭头函数，并且它定义在全局上下文（最顶层的作用域）中，它的<code>this</code>指向<code>window</code>对象。即使<code>format</code>作为方法在一个对象上被调用如<code>walkPeriod.format()</code>，<code>window</code>仍然是这次调用的上下文。之所以会这样是因为箭头函数有静态的上下文，并不会随着调用方式的改变而改变。</p>
<p>函数表达式可以解决这个问题，因为一个常规的函数会随着调用方法而改变其上下文:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs javascript&quot;&gt;function Period (hours, minutes) &#123;</span><br><span class="line">    this.hours = hours;</span><br><span class="line">    this.minutes = minutes;</span><br><span class="line">&#125;</span><br><span class="line">Period.prototype.format = function() &#123;</span><br><span class="line">    console.log(this === walkPeriod); // =&gt; true</span><br><span class="line">    return this.hours + &apos; hours and &apos; + this.minutes + &apos; minutes&apos;;</span><br><span class="line">&#125;;</span><br><span class="line">var walkPeriod = new Period(2, 30);</span><br><span class="line">walkPeriod.format(); // =&gt; &apos;2 hours and 30 minutes&apos;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p><code>walkPeriod.format()</code>是一个对象上的方法调用 (见 <a href="https://rainsoft.io/gentle-explanation-of-this-in-javascript/#31thisinmethodinvocation" target="_blank" rel="noopener">3.1.</a>)，它的上下文是<code>walkPeriod</code>对象。<code>this.hours</code>等于<code>2</code>，<code>this.minutes</code>等于<code>30</code>，所以这个方法返回了正确的结果：<code>&#39;2 hours and 30 minutes&#39;</code>。</p>
<h2 id="8-结论"><a href="#8-结论" class="headerlink" title="8. 结论"></a>8. 结论</h2><p>因为函数调用对<code>this</code>有最大的影响，从现在起，<strong>不要</strong>再问你自己：</p>
<blockquote>
<p><code>this</code>是从哪里来的？</p>
</blockquote>
<p>而<strong>要</strong>问自己：</p>
<blockquote>
<p>函数是怎么<code>被调用</code>的？</p>
</blockquote>
<p>对于箭头函数，问问你自己：</p>
<blockquote>
<p>在这个箭头函数被<code>定义</code>的地方，<code>this</code>是什么？</p>
</blockquote>
<p>这是处理<code>this</code>时的正确想法，它们可以让你免于头痛。</p>
<p>[!转载]：<a href="https://www.w3cplus.com/javascript/gentle-explanation-of-this-in-javascript.html" target="_blank" rel="noopener">https://www.w3cplus.com/javascript/gentle-explanation-of-this-in-javascript.html</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE组件数据传递</title>
    <url>/2019/11/19/VUE%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<p>在项目中使用组件，目的一般就是提高代码复用率，增强模块化，从而降低开发成本。在文章结尾处，我们提到了 Vue 中组合组件，就是<code>A</code>组件中包含了<code>B</code>组件。而组件与组件之间的相互使用避免不了数据之间的传递。那么 Vue 中组件的数据是如何传递的呢？这就是这一节将要了解和学习的内容。</p>
<a id="more"></a>
<p>首先要说明，组件数据传递不同于 Vue 全局的数据传递，<strong>组件实例的数据作用域名是孤立的</strong>，这里的孤立并不仅仅在组件内独立，而且是指上下层之间的数据隔离，<strong>即不能在子组件的模板内直接引用父组件的数据</strong>。如果要把数据从父组件传递到子组件，就需要使用<code>props</code>属性。这是父组件用来传递数据的一个自定义属性。也就是说，如果要彻底了解清楚 Vue 组件的数据传递，就很有必要了解清楚<code>props</code>属性。</p>
<h2 id="组件数据流向"><a href="#组件数据流向" class="headerlink" title="组件数据流向"></a>组件数据流向</h2><p>在 Vue 的官方文档中提到，在 Vue 中，父子组件的关系总结为：<strong><code>prop</code>向下传递，事件向上传递。</strong>父组件通过<code>prop</code>给子组件下发数据，子组件通过事件给父组件发送消息。如下图所示：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1802/vue-component-8.png" alt></p>
<p>常把这种数据流称之为单向数据流。<code>prop</code>是单向绑定的：<strong>当父组件的属性变化时，将传给子组件，但是反过来不会</strong>。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。</p>
<p>另外，每次父组件更新时，子组件的所有<code>prop</code>都会更新为最新值。这意味着你不应该在子组件内部改变<code>prop</code>。如果你这么做了，Vue 会在控制台给出警告。用一张更细化的图来表示 Vue 组件系统中父子组件的数据流动：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1802/vue-component-prop-1.png" alt></p>
<p>使用<code>props</code>向子组件传递数据，首先要在子组件中定义子组件能接受的<code>props</code>，然后在父组件中子组件的自定义元素上将数据传递给它。</p>
<h2 id="props-的使用"><a href="#props-的使用" class="headerlink" title="props 的使用"></a>props 的使用</h2><p>前面提到过了，<strong>组件实例的作用域是孤立的</strong>。父组件需要通过<code>props</code>把数据传给子组件。要真正了解其中的原委，就很有必要了解清楚<code>props</code>的使用。那么我们从一些简单的示例开始吧。</p>
<h3 id="props-基础示例"><a href="#props-基础示例" class="headerlink" title="props 基础示例"></a>props 基础示例</h3><p>首先来创建一个子组件<code>child</code>，并且在 Vue 的实例中定义了<code>data</code>选项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs cs&quot;&gt;let parent = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name: &apos;w3cplus&apos;,</span><br><span class="line">            age: 7</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        &apos;child&apos;: &#123;</span><br><span class="line">            template: &apos;#child&apos;,</span><br><span class="line">            props: [&apos;myName&apos;, &apos;myAge&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>这里直接把 Vue 实例<code>parent</code>当作组件<code>child</code>的父组件。如果我们想要使用父组件的数据，则必须先在子组件中定义<code>props</code>，即：<code>props:[&#39;myName&#39;, &#39;myAge&#39;]</code>。</p>
<p>接下来定义<code>child</code>组件的模板：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs xml&quot;&gt;&lt;template id=&quot;child&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">        &lt;h3&gt;子组件child数据&lt;/h3&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;label&gt;姓名&lt;/label&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123; myName &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;label&gt;年龄&lt;/label&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123; myAge &#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>将父组件<code>parent</code>的<code>data</code>通过已定义好的<code>props</code>属性传递给子组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs ruby&quot;&gt;&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;child :my-&gt;&lt;/child&gt;</span><br><span class="line">&lt;/div&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>给上面的示例，添加一点 CSS，最终看到的效果如下：</p>
<iframe src="//codepen.io/airen/embed/QQKKqg?height=400&amp;theme-id=0&amp;slug-hash=QQKKqg&amp;default-tab=result&amp;user=airen" scrolling="no" frameborder="0" height="400" allowtransparency="true" allowfullscreen="true" class="sr-rd-content-nobeautify"></iframe>

<blockquote>
<p><strong>注意：</strong>由于 HTML 特性不区分大小写，在子组件定义<code>prop</code>时，使用了驼峰式大小写（camelCase）命名法。驼峰式大小写的<code>prop</code>用于特性时，需要转为短横线隔开（kebab-case）。例如，在<code>prop</code>中定义的<code>myName</code>，在用作特性时需要转换为<code>my-name</code>。</p>
</blockquote>
<p>用下图简单的剖析一下父组件<code>parent</code>是如何将数据传给子组件<code>child</code>，或许这样对于初学者更易于理解：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1802/vue-component-prop-2.png" alt></p>
<p>在父组件使用子组件时，通过以下语法将数据传递给子组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs xml&quot;&gt;&lt;child :子组件的prop=&quot;父组件数据属性&quot;&gt;&lt;/child&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>:</code>其实相当于<code>v-bind</code>，也就是 Vue 中的<code>v-bind</code>指令。这是属于动态绑定，让它的值被当作 JavaScript 表达式计算。稍后会做相关的介绍。</p>
</blockquote>
<h3 id="prop-的绑定类型"><a href="#prop-的绑定类型" class="headerlink" title="prop 的绑定类型"></a>prop 的绑定类型</h3><p>在 Vue 中的<code>prop</code>绑定主要有单向绑定和双向绑定。先来了解一下单向绑定。</p>
<h4 id="单向绑定"><a href="#单向绑定" class="headerlink" title="单向绑定"></a>单向绑定</h4><p>通过上面的示例，咱们简单的了解了怎么将父组件数据传递给子组件。而且在 Vue 2.0 中组件的<code>props</code>的数据流动改为了单向流动，即<strong>只能由组件外（调用组件方）通过组件的 DOM 属性<code>attribute</code>传递<code>props</code>给组件内，组件内只能被动接受组件外传递过来的数据，并且在组件内，不能修改由外层传来的<code>props</code>数据</strong>。</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1802/vue-component-prop-3.png" alt></p>
<p>但很多时候我们还是会修改子组件数据，那么问题来了，如果子组件修改了数据，对父组件是否有影响呢？我们基于上面的示例，做一下相应的调整：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs xml&quot;&gt;&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">        &lt;h3&gt;父组件Parent数据&lt;/h3&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;label&gt;姓名:&lt;/label&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123; name &#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; v-model=&quot;name&quot; /&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;label&gt;年龄:&lt;/label&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123; age &#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; v-model=&quot;age&quot; /&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;child :my-&gt;&lt;/child&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id=&quot;child&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">        &lt;h3&gt;子组件child数据&lt;/h3&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;label&gt;姓名&lt;/label&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123; myName &#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; v-model=&quot;myName&quot; /&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;label&gt;年龄&lt;/label&gt;</span><br><span class="line">                &lt;span&gt;&#123;&#123; myAge &#125;&#125;&lt;/span&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; v-model=&quot;myAge&quot; /&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>看到的效果如下：</p>
<iframe src="//codepen.io/airen/embed/JpbYeM?height=400&amp;theme-id=0&amp;slug-hash=JpbYeM&amp;default-tab=result&amp;user=airen" scrolling="no" frameborder="0" height="400" allowtransparency="true" allowfullscreen="true" class="sr-rd-content-nobeautify"></iframe>

<p>在这个 Demo 中我们来做两个小修改。首先修改父组件中的数据：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1802/vue-component-prop-4.gif" alt></p>
<p>从上面修改父组件数据得到的效果可以告诉我们：<strong>修改父组件的数据将会影响子组件，子组件的数据也会对应的修改</strong>。</p>
<p>接下来再反过来，修改子组件的数据：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1802/vue-component-prop-5.gif" alt></p>
<p>从效果中可以看出：<strong>修改子组件数据并不会影响父组件的数据</strong>。</p>
<blockquote>
<p><code>prop</code>默认是单向绑定：<strong>当父组件的属性变化时，将传给子组件，但反过来不会。这是为了防止子组件无意修改了父组件的状态</strong>。</p>
</blockquote>
<p>用一个更真实的示例来进一步的阐述。假设我们要做一个 iOS 风格的开关按钮：</p>
<ul>
<li>点击按钮实现 “开 / 关” 状态切换</li>
<li>不点击按钮，也可以通过外部修改数据切换 “开 / 关” 状态</li>
</ul>
<p>代码大致如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs cs&quot;&gt;&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;switch-button :result=&quot;result&quot;&gt;&lt;/switch-button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;switch-button&quot; @click=&quot;change&quot; :class=&quot;result ? &apos;on&apos; : &apos;off&apos;&quot;&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; result ? &quot;开&quot; : &quot;关&quot; &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;switch-button&apos;, &#123;</span><br><span class="line">    template: `</span><br><span class="line">        &lt;div class=&quot;switch-button&quot; @click=&quot;change&quot; :class=&quot;result ? &apos;on&apos; : &apos;off&apos;&quot;&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123; result ? &quot;开&quot; : &quot;关&quot; &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">    props: [&apos;result&apos;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        change: function () &#123;</span><br><span class="line">            this.result = !this.result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let app = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            result: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        change: function () &#123;</span><br><span class="line">            this.result = !this.result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>上面的示例得到的效果如下：</p>
<iframe src="//codepen.io/airen/embed/WMorBE?height=400&amp;theme-id=0&amp;slug-hash=WMorBE&amp;default-tab=result&amp;user=airen" scrolling="no" frameborder="0" height="400" allowtransparency="true" allowfullscreen="true" class="sr-rd-content-nobeautify"></iframe>

<p>来操作一下两个切换按钮的效果：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1802/vue-component-prop-6.gif" alt></p>
<p>虽然效果上没有问题，但事实上，当我们点击 “开关组件” 时，将会发出一个警告信息：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1802/vue-component-prop-7.png" alt></p>
<p>再次验证：<strong>组件内不能修改<code>props</code>的值，同时修改的值也不会同步到组件外层，即调用组件方不知道组件内部当前的状态是什么。</strong></p>
<blockquote>
<p>至于这个 Demo 的操作会发出警告信息，以及怎么处理，这里先不说了。后续我们将会深入了解怎么处理这个 Demo 的警告信息。</p>
</blockquote>
<h4 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h4><p>咱们回到前面的示例中来。前面的示例演示告诉我们，父组件和子组件的操作：</p>
<blockquote>
<p><strong>修改父组件的数据将会影响子组件，子组件的数据也会对应的修改；修改子组件数据并不会影响父组件的数据</strong>。</p>
</blockquote>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1802/vue-component-prop-8.gif" alt></p>
<p>要改变这一状态。可以通过<code>props</code>的双向绑定来完成。在 Vue 中，可以使用<code>.sync</code>显式地指定双向绑定，这样能让<strong>子组件的数据修改会回传给父组件</strong>。</p>
<p>在上面的示例中调用子组件时，像下面这样操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs perl&quot;&gt;&lt;child v-bind:my-name.sync=&quot;name&quot; v-bind:my-age.sync=&quot;age&quot;&gt;&lt;/child&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<iframe src="//codepen.io/airen/embed/rJWMZK?height=400&amp;theme-id=0&amp;slug-hash=rJWMZK&amp;default-tab=result&amp;user=airen" scrolling="no" frameborder="0" height="400" allowtransparency="true" allowfullscreen="true" class="sr-rd-content-nobeautify"></iframe>

<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1802/vue-component-prop-9.gif" alt></p>
<p>这正是 Vue 1.x 中的 <code>.sync</code> 修饰符所提供的功能。当一个子组件改变了一个带 <code>.sync</code> 的 <code>prop</code> 的值时，这个变化也会同步到父组件中所绑定的值。这很方便，但也会导致问题，因为它破坏了单向数据流。由于子组件改变 <code>prop</code> 的代码和普通的状态改动代码毫无区别，当光看子组件的代码时，你完全不知道它何时悄悄地改变了父组件的状态。这在 debug 复杂结构的应用时会带来很高的维护成本。</p>
<p>上面所说的正是我们在 2.0 中移除 <code>.sync</code> 的理由。但是在 2.0 发布之后的实际应用中，我们发现 <code>.sync</code> 还是有其适用之处，比如在开发可复用的组件库时。我们需要做的只是让子组件改变父组件状态的代码更容易被区分。</p>
<p>从 2.3.0 起我们重新引入了 <code>.sync</code> 修饰符，但是这次它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 <code>v-on</code> 监听器。</p>
<p>如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs xml&quot;&gt;&lt;comp :foo.sync=&quot;bar&quot;&gt;&lt;/comp&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>会被扩展为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs ruby&quot;&gt;&lt;comp :foo=&quot;bar&quot; @update:foo=&quot;val =&gt; bar = val&quot;&gt;&lt;/comp&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>当子组件需要更新 <code>foo</code> 的值时，它需要显式地触发一个更新事件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;pre class=&quot;hljs bash&quot;&gt;this.$emit(&apos;update:foo&apos;, newValue)&lt;/pre&gt;</span><br></pre></td></tr></table></figure>
<p>感觉<code>props</code>双向绑定还是蛮复杂的。这也正是前面把切换按钮示例中解决警告信息留下来没有阐述的原因之一。下一节将学习解决父子组件数据和<code>props</code>的双向绑定。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这篇文章的学习，了解了在 Vue 2.0 中，父子组件的数据流是单向的。即：<code>prop</code>默认是单向绑定，<strong>当父组件的属性变化时，将传给子组件，但反过来不会。这是为了防止子组件无意修改了父组件的状态</strong>。而很多时候我们又需要子组件修改数据时，在父组件中要有所反应。这个时候就需要涉及到双向数据绑定。在下一节中，将学习 Vue 2.0 中的数据双向绑定。</p>
<p>[!转载]：<a href="//www.w3cplus.com/vue/component-data-and-props-part1.html">https://www.w3cplus.com/vue/component-data-and-props-part1.html</a><a href="https://m2film.dk/eshop/collections/womens" target="_blank" rel="noopener">Women’s Clothing, Footwear &amp; Accessories</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>component</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 命令大全</title>
    <url>/2019/11/19/Git-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h1 id="Git-命令大全"><a href="#Git-命令大全" class="headerlink" title="Git 命令大全"></a>Git 命令大全</h1><a id="more"></a>
<h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>配置 Git 的相关参数。</p>
<p>Git 一共有 3 个配置文件：</p>
<ol>
<li>仓库级的配置文件：在仓库的 <code>.git/.gitconfig</code>，该配置文件只对所在的仓库有效。  </li>
<li>全局配置文件：Mac 系统在 <code>~/.gitconfig</code>，Windows 系统在 <code>C:\Users\&lt;用户名&gt;\.gitconfig</code>。  </li>
<li>系统级的配置文件：在 Git 的安装目录下（Mac 系统下安装目录在 <code>/usr/local/git</code>）的 <code>etc</code> 文件夹中的 <code>gitconfig</code>。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看配置信息</span><br><span class="line"># --local：仓库级，--global：全局级，--system：系统级</span><br><span class="line">$ git config &lt;--local | --global | --system&gt; -l</span><br><span class="line"></span><br><span class="line"># 查看当前生效的配置信息</span><br><span class="line">$ git config -l</span><br><span class="line"></span><br><span class="line"># 编辑配置文件</span><br><span class="line"># --local：仓库级，--global：全局级，--system：系统级</span><br><span class="line">$ git config &lt;--local | --global | --system&gt; -e</span><br><span class="line"></span><br><span class="line"># 添加配置项</span><br><span class="line"># --local：仓库级，--global：全局级，--system：系统级</span><br><span class="line">$ git config &lt;--local | --global | --system&gt; --add &lt;name&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"># 获取配置项</span><br><span class="line">$ git config &lt;--local | --global | --system&gt; --get &lt;name&gt;</span><br><span class="line"></span><br><span class="line"># 删除配置项</span><br><span class="line">$ git config &lt;--local | --global | --system&gt; --unset &lt;name&gt;</span><br><span class="line"></span><br><span class="line"># 配置提交记录中的用户信息</span><br><span class="line">$ git config --global user.name &lt;用户名&gt;</span><br><span class="line">$ git config --global user.email &lt;邮箱地址&gt;</span><br><span class="line"></span><br><span class="line"># 更改Git缓存区的大小</span><br><span class="line"># 如果提交的内容较大，默认缓存较小，提交会失败</span><br><span class="line"># 缓存大小单位：B，例如：524288000（500MB）</span><br><span class="line">$ git config --global http.postBuffer &lt;缓存大小&gt;</span><br><span class="line"></span><br><span class="line"># 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态</span><br><span class="line">$ git config --global color.ui true</span><br><span class="line"></span><br><span class="line"># 配置可以缓存密码，默认缓存时间15分钟</span><br><span class="line">$ git config --global credential.helper cache</span><br><span class="line"></span><br><span class="line"># 配置密码的缓存时间</span><br><span class="line"># 缓存时间单位：秒</span><br><span class="line">$ git config --global credential.helper &apos;cache --timeout=&lt;缓存时间&gt;&apos;</span><br><span class="line"></span><br><span class="line"># 配置长期存储密码</span><br><span class="line">$ git config --global credential.helper store</span><br></pre></td></tr></table></figure>

<h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>从远程仓库克隆一个版本库到本地。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下</span><br><span class="line">$ git clone &lt;远程仓库的网址&gt;</span><br><span class="line"></span><br><span class="line"># 指定本地仓库的目录</span><br><span class="line">$ git clone &lt;远程仓库的网址&gt; &lt;本地目录&gt;</span><br><span class="line"></span><br><span class="line"># -b 指定要克隆的分支，默认是master分支</span><br><span class="line">$ git clone &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 初始化本地仓库，在当前目录下生成 .git 文件夹</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>查看本地仓库的状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看本地仓库的状态</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 以简短模式查看本地仓库的状态</span><br><span class="line"># 会显示两列，第一列是文件的状态，第二列是对应的文件</span><br><span class="line"># 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中</span><br><span class="line">$ git status -s</span><br></pre></td></tr></table></figure>

<h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>操作远程库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出已经存在的远程仓库</span><br><span class="line">$ git remote</span><br><span class="line"></span><br><span class="line"># 列出远程仓库的详细信息，在别名后面列出URL地址</span><br><span class="line">$ git remote -v</span><br><span class="line">$ git remote --verbose</span><br><span class="line"></span><br><span class="line"># 添加远程仓库</span><br><span class="line">$ git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;</span><br><span class="line"></span><br><span class="line"># 修改远程仓库的别名</span><br><span class="line">$ git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;</span><br><span class="line"></span><br><span class="line"># 删除指定名称的远程仓库</span><br><span class="line">$ git remote remove &lt;远程仓库的别名&gt;</span><br><span class="line"></span><br><span class="line"># 修改远程仓库的 URL 地址</span><br><span class="line">$ git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><p>操作 Git 的分支命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出本地的所有分支，当前所在分支以 &quot;*&quot; 标出</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出本地的所有分支并显示最后一次提交，当前所在分支以 &quot;*&quot; 标出</span><br><span class="line">$ git branch -v</span><br><span class="line"></span><br><span class="line"># 创建新分支，新的分支基于上一次提交建立</span><br><span class="line">$ git branch &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"># 修改分支名称</span><br><span class="line"># 如果不指定原分支名称则为当前所在分支</span><br><span class="line">$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="line"># 强制修改分支名称</span><br><span class="line">$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="line"></span><br><span class="line"># 删除指定的本地分支</span><br><span class="line">$ git branch -d &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"># 强制删除指定的本地分支</span><br><span class="line">$ git branch -D &lt;分支名称&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><p>检出命令，用于创建、切换分支等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 切换到已存在的指定分支</span><br><span class="line">$ git checkout &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"># 创建并切换到指定的分支，保留所有的提交记录</span><br><span class="line"># 等同于 &quot;git branch&quot; 和 &quot;git checkout&quot; 两个命令合并</span><br><span class="line">$ git checkout -b &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"># 创建并切换到指定的分支，删除所有的提交记录</span><br><span class="line">$ git checkout --orphan &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"># 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响</span><br><span class="line">$ git checkout &lt;文件路径&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><p>把已经提交的记录合并到当前分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 把已经提交的记录合并到当前分支</span><br><span class="line">$ git cherry-pick &lt;commit ID&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><p>把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 把指定的文件添加到暂存区中</span><br><span class="line">$ git add &lt;文件路径&gt;</span><br><span class="line"></span><br><span class="line"># 添加所有修改、已删除的文件到暂存区中</span><br><span class="line">$ git add -u [&lt;文件路径&gt;]</span><br><span class="line">$ git add --update [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"># 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span><br><span class="line">$ git add -A [&lt;文件路径&gt;]</span><br><span class="line">$ git add --all [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"># 查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span><br><span class="line">$ git add -i [&lt;文件路径&gt;]</span><br><span class="line">$ git add --interactive [&lt;文件路径&gt;]</span><br></pre></td></tr></table></figure>

<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><p>将暂存区中的文件提交到本地仓库中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</span><br><span class="line">$ git commit</span><br><span class="line"></span><br><span class="line"># 把暂存区中的文件提交到本地仓库中并添加描述信息</span><br><span class="line">$ git commit -m &quot;&lt;提交的描述信息&gt;&quot;</span><br><span class="line"></span><br><span class="line"># 把所有修改、已删除的文件提交到本地仓库中</span><br><span class="line"># 不包括未被版本库跟踪的文件，等同于先调用了 &quot;git add -u&quot;</span><br><span class="line">$ git commit -a -m &quot;&lt;提交的描述信息&gt;&quot;</span><br><span class="line"></span><br><span class="line"># 修改上次提交的描述信息</span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>

<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><p>从远程仓库获取最新的版本到本地的 tmp 分支上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将远程仓库所有分支的最新版本全部取回到本地</span><br><span class="line">$ git fetch &lt;远程仓库的别名&gt;</span><br><span class="line"></span><br><span class="line"># 将远程仓库指定分支的最新版本取回到本地</span><br><span class="line">$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><p>合并分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 把指定的分支合并到当前所在的分支下</span><br><span class="line">$ git merge &lt;分支名称&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>比较版本之间的差异。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 比较暂存区中的文件和上次提交时的差异</span><br><span class="line">$ git diff --cached</span><br><span class="line">$ git diff --staged</span><br><span class="line"></span><br><span class="line"># 比较当前文件和上次提交时的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 查看从指定的版本之后改动的内容</span><br><span class="line">$ git diff &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"># 比较两个分支之间的差异</span><br><span class="line">$ git diff &lt;分支名称&gt; &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"># 查看两个分支分开后各自的改动内容</span><br><span class="line">$ git diff &lt;分支名称&gt;...&lt;分支名称&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><p>从远程仓库获取最新版本并合并到本地。<br>首先会执行 <code>git fetch</code>，然后执行 <code>git merge</code>，把获取的分支的 HEAD 合并到当前分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 从远程仓库获取最新版本。</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><p>把本地仓库的提交推送到远程仓库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 把本地仓库的分支推送到远程仓库的指定分支</span><br><span class="line">$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"># 删除指定的远程仓库的分支</span><br><span class="line">$ git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;</span><br><span class="line">$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>显示提交的记录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 打印所有的提交记录</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 打印从第一次提交到指定的提交的记录</span><br><span class="line">$ git log &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"># 打印指定数量的最新提交的记录</span><br><span class="line">$ git log -&lt;指定的数量&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p>还原提交记录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--soft参数</span><br><span class="line">   仅仅在本地库移动head指针</span><br><span class="line">--mixed参数</span><br><span class="line">   在本地库移动head指针</span><br><span class="line">   重置暂存区</span><br><span class="line">--hard参数</span><br><span class="line">   在本地库移动指针</span><br><span class="line">   重置暂存区</span><br><span class="line">   处置工作区</span><br><span class="line">--------------------------------------------------</span><br><span class="line"># 重置暂存区，但文件不受影响</span><br><span class="line"># 相当于将用 &quot;git add&quot; 命令更新到暂存区的内容撤出暂存区，可以指定文件</span><br><span class="line"># 没有指定 commit ID 则默认为当前 HEAD</span><br><span class="line">$ git reset [&lt;文件路径&gt;]</span><br><span class="line">$ git reset --mixed [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span><br><span class="line">$ git reset &lt;commit ID&gt;</span><br><span class="line">$ git reset --mixed &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span><br><span class="line"># 相当于调用 &quot;git reset --mixed&quot; 命令后又做了一次 &quot;git add&quot;</span><br><span class="line">$ git reset --soft &lt;commit ID&gt;</span><br><span class="line"></span><br><span class="line"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了</span><br><span class="line">$ git reset --hard &lt;commit ID&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>生成一个新的提交来撤销某次提交，此次提交之前的所有提交都会被保留。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 生成一个新的提交来撤销某次提交</span><br><span class="line">$ git revert &lt;commit ID&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><p>操作标签的命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 打印所有的标签</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 添加轻量标签，指向提交对象的引用，可以指定之前的提交记录</span><br><span class="line">$ git tag &lt;标签名称&gt; [&lt;commit ID&gt;]</span><br><span class="line"></span><br><span class="line"># 添加带有描述信息的附注标签，可以指定之前的提交记录</span><br><span class="line">$ git tag -a &lt;标签名称&gt; -m &lt;标签描述信息&gt; [&lt;commit ID&gt;]</span><br><span class="line"></span><br><span class="line"># 切换到指定的标签</span><br><span class="line">$ git checkout &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"># 查看标签的信息</span><br><span class="line">$ git show &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"># 删除指定的标签</span><br><span class="line">$ git tag -d &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"># 将指定的标签提交到远程仓库</span><br><span class="line">$ git push &lt;远程仓库的别名&gt; &lt;标签名称&gt;</span><br><span class="line"></span><br><span class="line"># 将本地所有的标签全部提交到远程仓库</span><br><span class="line">$ git push &lt;远程仓库的别名&gt; –tags</span><br></pre></td></tr></table></figure>

<h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h2><p>重命名文件或者文件夹。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 重命名指定的文件或者文件夹</span><br><span class="line">$ git mv &lt;源文件/文件夹&gt; &lt;目标文件/文件夹&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p>删除文件或者文件夹。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 移除跟踪指定的文件，并从本地仓库的文件夹中删除</span><br><span class="line">$ git rm &lt;文件路径&gt;</span><br><span class="line"></span><br><span class="line"># 移除跟踪指定的文件夹，并从本地仓库的文件夹中删除</span><br><span class="line">$ git rm -r &lt;文件夹路径&gt;</span><br><span class="line"></span><br><span class="line"># 移除跟踪指定的文件，在本地仓库的文件夹中保留该文件</span><br><span class="line">$ git rm --cached</span><br></pre></td></tr></table></figure>

<h2 id="Git-操作场景示例"><a href="#Git-操作场景示例" class="headerlink" title="Git 操作场景示例"></a>Git 操作场景示例</h2><h3 id="1-删除掉本地不存在的远程分支"><a href="#1-删除掉本地不存在的远程分支" class="headerlink" title="1. 删除掉本地不存在的远程分支"></a>1. 删除掉本地不存在的远程分支</h3><p>多人合作开发时，如果远程的分支被其他开发删除掉，在本地执行 <code>git branch --all</code> 依然会显示该远程分支，可使用下列的命令进行删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用 pull 命令，添加 -p 参数</span><br><span class="line">$ git pull -p</span><br><span class="line"></span><br><span class="line"># 等同于下面的命令</span><br><span class="line">$ git fetch -p</span><br><span class="line">$ git fetch --prune origin</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>块元素、内联元素、内联块元素</title>
    <url>/2019/11/19/%E5%9D%97%E5%85%83%E7%B4%A0%E3%80%81%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0%E3%80%81%E5%86%85%E8%81%94%E5%9D%97%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h4 id="●CSS-中，html-中的标签元素大体被分为三种不同的类型：块状元素、内联元素-又叫行内元素-和内联块状元素。"><a href="#●CSS-中，html-中的标签元素大体被分为三种不同的类型：块状元素、内联元素-又叫行内元素-和内联块状元素。" class="headerlink" title="●CSS 中，html 中的标签元素大体被分为三种不同的类型：块状元素、内联元素 (又叫行内元素) 和内联块状元素。"></a>●CSS 中，html 中的标签元素大体被分为三种不同的类型：块状元素、内联元素 (又叫行内元素) 和内联块状元素。</h4><a id="more"></a>
<h4 id="常用的块状元素有："><a href="#常用的块状元素有：" class="headerlink" title="常用的块状元素有："></a>常用的块状元素有：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;-&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt;</span><br></pre></td></tr></table></figure>

<h4 id="常用的内联元素有："><a href="#常用的内联元素有：" class="headerlink" title="常用的内联元素有："></a>常用的内联元素有：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a&gt;、&lt;span&gt;、&lt;br&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;</span><br></pre></td></tr></table></figure>

<h4 id="常用的内联块状元素有："><a href="#常用的内联块状元素有：" class="headerlink" title="常用的内联块状元素有："></a>常用的内联块状元素有：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img&gt;、&lt;input&gt;</span><br></pre></td></tr></table></figure>

<h2 id="·-元素分类-–-块级元素"><a href="#·-元素分类-–-块级元素" class="headerlink" title="· 元素分类 – 块级元素"></a>· 元素分类 – 块级元素</h2><p>什么是块级元素？在 html 中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;、 &lt;p&gt;、&lt;h1&gt;、&lt;form&gt;、&lt;ul&gt; 和 &lt;li&gt;</span><br></pre></td></tr></table></figure>

<p>就是块级元素。设置 display:block 就是将元素显示为块级元素。如下代码就是将<strong>内联元素 a</strong> 转换为<strong>块状元素</strong>，从而使 a 元素具有<strong>块状元素</strong>特点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#123;display:block;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>块级元素特点：</strong></p>
<blockquote>
<p>1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）<br>2、元素的高度、宽度、行高以及顶和底边距都可设置。<br>3、元素宽度在不设置的情况下，是它本身父容器的 100%（和父元素的宽度一致），除非设定一个宽度。</p>
</blockquote>
<h2 id="·-元素分类-–-内联元素"><a href="#·-元素分类-–-内联元素" class="headerlink" title="· 元素分类 – 内联元素"></a>· 元素分类 – 内联元素</h2><p>在 html 中，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;、&lt;a&gt;、&lt;label&gt;、 &lt;strong&gt; 和&lt;em&gt;</span><br></pre></td></tr></table></figure>

<p>就是典型的<strong>内联元素</strong>（<strong>行内元素</strong>）（inline）元素。当然<strong>块状元素</strong>也可以通过代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:inline</span><br></pre></td></tr></table></figure>

<p>将元素设置为<strong>内联元素</strong>。如下代码就是将<strong>块状元素 div</strong> 转换为<strong>内联元素</strong>，从而使 div 元素具有<strong>内联元素</strong>特点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div&#123;</span><br><span class="line"> display:inline;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>内联元素特点：</strong></p>
<blockquote>
<p>1、和其他元素都在一行上；<br>2、元素的高度、宽度及顶部和底部边距<strong>不可</strong>设置；<br>3、元素的宽度就是它包含的文字或图片的宽度，不可改变。</p>
</blockquote>
<h2 id="·-元素分类-–-内联块状元素"><a href="#·-元素分类-–-内联块状元素" class="headerlink" title="· 元素分类 – 内联块状元素"></a>· 元素分类 – 内联块状元素</h2><p><strong>内联块状元素（</strong>inline-block<strong>）</strong>就是同时具备内联元素、块状元素的特点，代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:inline-block</span><br></pre></td></tr></table></figure>

<p>就是将元素设置为内联块状元素。(css2.1 新增)，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img&gt;、&lt;input&gt;</span><br></pre></td></tr></table></figure>

<p>标签就是这种内联块状标签。</p>
<p><strong>inline-block 元素特点：</strong></p>
<blockquote>
<p>1、和其他元素都在一行上；<br>2、元素的高度、宽度、行高以及顶和底边距都可设置。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 组件内容分发（slot）</title>
    <url>/2019/11/19/Vue-%E7%BB%84%E4%BB%B6%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%EF%BC%88slot%EF%BC%89/</url>
    <content><![CDATA[<p>在实际项目开发当中，时常会把父组件的内容与子组件自己的模板混合起来使用。而这样的一个过程在 Vue 中被称为<strong>内容分发</strong>。也常常被称为<strong><code>slot</code>（插槽）</strong>。其主要参照了当前 <a href="//github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md">Web Components 规范草案</a>，使用特殊的<code>&lt;slot&gt;</code>元素作为原始内容的插槽。今天主要来学习如何在 Vue 中使用<code>slot</code>的功能。</p><a id="more"></a>
<h2 id="先简单的了解一个概念"><a href="#先简单的了解一个概念" class="headerlink" title="先简单的了解一个概念"></a>先简单的了解一个概念</h2><p>在深入理解 Vue 的<code>slot</code>之前，先来简单的了解一个有关于<code>slot</code>的概念，便于后续的学习和理解。</p>
<p>前面也说过了，Vue 中的<code>slot</code>源于 Web Components 规范草案，也被称之为插槽，是组件的一块 HTML 模板，而这块模板显示不显示，以及怎么显示由父组件来决定。那么，Vue 中一个<code>slot</code>最核心的两个问题就出来了：</p>
<ul>
<li><strong>显示不显示</strong></li>
<li><strong>怎么显示</strong></li>
</ul>
<p>由于<code>slot</code>是一块模板，因此对于任何一个组件，从模板种类的角度来分，共实都可分为<strong>非插槽模板</strong>和<strong>插槽模板</strong>。其中非插槽模板指的是 HTML 模板（也就是 HTML 的一些元素，比如<code>div</code>、<code>span</code>等构成的），其显与否及怎么显示完全由插件自身控制；但插槽模板（也就是<code>slot</code>）是一个空壳子，它显示与否以及怎么显示完全是由<strong>父组件</strong>来控制。不过，<strong>插槽显示的位置由子组件自身决定，<code>slot</code>写在组件<code>template</code>的哪块，父组件传过来的模板将来就显示在哪块</strong>。</p>
<h2 id="Vue-的编译作用域"><a href="#Vue-的编译作用域" class="headerlink" title="Vue 的编译作用域"></a>Vue 的编译作用域</h2><p>简单的了解了<code>slot</code>中的基本概念，从基本概念中可以获知，使用<code>slot</code>会涉及 Vue 的模板，而 Vue 的模板在渲染成 UI 之前是有一个编译过程的，也会存在模板<strong>编译作用域</strong>一说。理解清楚这部分内容，也更有助于我们理解<code>slot</code>，所以花点时间先简单的理解一下 Vue 的编译作用域。</p>
<p>在前面的《<a href="//www.w3cplus.com/vue/vue-instances-and-life-cycles.html">Vue 实例和生命周期</a>》一文中，我们了解了 Vue 的生命周期相关的知识点，此处不再阐述，上张介绍 Vue 生命周期的图：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1711/vue-instances-and-life-cycles-8.png" alt></p>
<p>碰到是否有<code>template</code>选项时，会询问是否要对<code>template</code>进行编译：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1803/vue-slot-1.png" alt></p>
<p>在<code>template</code>编译（渲染成 UI）有一个过程。模板通过编译生成 AST，再由 AST 生成 Vue 的渲染函数，渲染函数结合数据生成 Virtual DOM 树，对 Virtual DOM 进行<code>diff</code>和<code>patch</code>后生成新的 UI。将上图细化一下，也就是<code>template</code>编译的过程如下图所示：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1710/vue-template-9.jpg" alt></p>
<p>在深入一点，如下：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2017/1710/vue-template-10.png" alt></p>
<blockquote>
<p>有关于 Vue 中<code>template</code>的渲染的详细过程，可以阅读《<a href="//www.w3cplus.com/vue/vue-template.html">Vue 的模板</a>》一文。</p>
</blockquote>
<p>简理的理解就是 Vue 中的<code>template</code>编译成浏览器可识的过程会经过不少的过程。言外之意，最终在浏览器中呈现的并不是<code>&lt;template&gt;</code>，而是会解析成标准的 HTML，然后将组件的标签替换为对应的 HTML 片段。用个小示例来举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;my-component&gt;&lt;/my-component&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id=&quot;myComponent&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;show&quot;&gt;Show Message&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;my-component&apos;, &#123;</span><br><span class="line">    template: &apos;#myComponent&apos;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            message: &apos;我是一个Vue组件!&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        show: function () &#123;</span><br><span class="line">            alert(this.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let app = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Vue 将会通过其自身的编译机制（如前图所示的过程），将<code>&lt;my-component&gt;</code>编译成让浏览器可以识别的 HTML 代码。可以借助浏览器开发者工具一探究竟：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1803/vue-slot-2.png" alt></p>
<p>我的理解是这样的。上面的示例通过<code>new Vue()</code>创建一下人 Vue 的实例，并且将这个实例挂载到<code>div#app</code>的元素下，然后把组件<code>&lt;my-component&gt;</code>编译成 HTML，最终渲染所需要的 UI 效果。继续用张图来描述这个过程，一图胜过千言万语嘛。</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1803/vue-slot-3.png" alt></p>
<p>我们要说的是模板编译的作用域，在 Vue 中，组件是有一个作用域的：<strong>组件模板（<code>&lt;template&gt;</code>）</strong>内的就是组件作用域，而其之外的就不是组件的作用域了，比如上面的示例，<code>my-component</code>组件的作用域就是下面这部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template id=&quot;myComponent&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;show&quot;&gt;Show Message&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>组件的模板是在其作用域内编译的，因此组件选项对象中的<code>data</code>也是在组件模板中使用的。如果我们在前面的示例中的 Vue 实例的组件<code>my-component</code>中同时追加一个<code>display</code>属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&apos;my-component&apos;, &#123;</span><br><span class="line">    template: &apos;#myComponent&apos;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            message: &apos;我是一个Vue组件!&apos;,</span><br><span class="line">            display: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        show: function () &#123;</span><br><span class="line">            alert(this.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let app = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            display: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后在<code>&lt;my-component&gt;</code>中使用指令<code>v-show=&quot;display&quot;</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;my-component v-show=&quot;display&quot;&gt;&lt;/my-component&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>试问，此时<code>display</code>是来源于 Vue 实例，还是<code>my-component</code>组件呢？答案很简单：<strong><code>display</code>来源于 Vue 实例</strong>。也就是说，在 Vue 中组件的作用域是独立的：</p>
<blockquote>
<p><strong>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。</strong></p>
</blockquote>
<p>通俗地讲，在子组件中定义的数据，只能用在子组件的模板。在父组件中定义的数据，只能用在父组件的模板。如果父组件的数据要在子组件中使用，则需要子组件定义<code>props</code>。有关于这方面的内容可以阅读：</p>
<ul>
<li>《<a href="//www.w3cplus.com/vue/component-data-and-props-part1.html">组件数据传递</a>》</li>
<li>《<a href="//www.w3cplus.com/vue/component-data-and-props-part2.html">实现组件数据的双向绑定</a>》</li>
<li>《<a href="//www.w3cplus.com/vue/component-data-and-props-part3.html">不同场景下组件间的数据通讯</a>》</li>
</ul>
<p>简单的了解了 Vue 编译的作用域之后，咱们接着回到我们今天要聊的主题，Vue 的<code>slot</code>。</p>
<h2 id="slot大致用法"><a href="#slot大致用法" class="headerlink" title="slot大致用法"></a><code>slot</code>大致用法</h2><p>先来简单的看一下 Vue 中的<code>slot</code>的使用方法。比如我们有一个类似<code>alert</code>的小组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;alert&gt;&lt;/alert&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id=&quot;alert&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;alert info&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;close&quot;&gt;×&lt;/button&gt;</span><br><span class="line">        &lt;slot&gt;This is alert box!&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;alert&apos;, &#123;</span><br><span class="line">    template: &apos;#alert&apos;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let app = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面的代码在<code>alert</code>组件的模板中指定了一个<code>&lt;slot&gt;</code>元素，并且在该元素中放置了一个默认内容 “This is alert box!”。在调用<code>alert</code>组件时，并没有向该组件分发任何内容，这个时候运行的结果如下：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1803/vue-slot-5.png" alt></p>
<p>从上面的效果中可以得知：<strong>如果父组件未向模板中分发内容（插入内容），则显示插槽中默认内容（前提是<code>slot</code>中设置了默认内容）</strong>。</p>
<p>接下来，在上面的示例上，做小小的修改，在<code>&lt;alert&gt;</code>使用的时候，插入你想要的内容（也就是指父组件向模板分发内容）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;alert&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;Hello W3cplus!&lt;/h2&gt;</span><br><span class="line">            &lt;p&gt;欢迎您来到w3cplus.com！&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/alert&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>运行上面的代码得到的效果是：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1803/vue-slot-6.png" alt></p>
<p>从代码运行的结果可以得知：<strong>父组件给模板分发了内容，则分发的内容会替换<code>slot</code>标签</strong>。除此之外，假设<strong>模板中未设置插槽，父组件依旧向其分发了内容，但最终任何分发的内容都不会显示</strong>。比如下图所示：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1803/vue-slot-7.png" alt></p>
<p>在介绍编译作用域时，了解到，<strong>父组件的内容是在父组件作用域编译，子组件的内容是在子组件作用域编译</strong>。而 Vue 的<code>slot</code>一般用在父组件向子组件分发内容，该内容的编译作用域名为父组件作用域。</p>
<p>继续拿上面的<code>alert</code>组件来举例。在我们的<code>alert</code>组件中，很多时候有多种样式风格，除了<code>info</code>之外，还有<code>success</code>、<code>danger</code>和<code>warning</code>之类。我们可以在父组件的编译时绑定<code>status</code>状态。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;alert v-for=&quot;statu in status&quot; :status=statu&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;&#123;&#123; statu &#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;p&gt;欢迎您来到w3cplus.com！&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/alert&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;template id=&quot;alert&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;alert&quot; :class=&quot;[alertStatus]&quot; v-show=&quot;isShow&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;close&quot; @click=&quot;close&quot;&gt;×&lt;/button&gt;</span><br><span class="line">        &lt;slot&gt;This is alert box!&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&apos;alert&apos;, &#123;</span><br><span class="line">    template: &apos;#alert&apos;,</span><br><span class="line">    props: [&apos;status&apos;],</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        alertStatus: function () &#123;</span><br><span class="line">            return this.status</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        close: function () &#123;</span><br><span class="line">            this.isShow = !this.isShow</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let app = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            status: [&apos;info&apos;, &apos;success&apos;, &apos;danger&apos;, &apos;warning&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>最终效果如下：</p>
<h2 id="slot-分类"><a href="#slot-分类" class="headerlink" title="slot 分类"></a>slot 分类</h2><p>在 Vue 中，<code>slot</code>也分多种，从 Vue 的官网中可以获知，其主要分为：<strong>单个插槽</strong>、<strong>具名插槽</strong>和<strong>作用域插槽</strong>三种。接下来我们借助 <a href="//www.w3cplus.com/vue/vue-modal-component.html"><code>modal</code>组件</a>为例，看看 Vue 中的这几种插槽怎么使用。</p>
<p>Web 中常见的<code>modal</code>弹框外形长得大致都如下图这样：</p>
<p><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1801/modal-vue-2.png" alt></p>
<h3 id="单个插槽"><a href="#单个插槽" class="headerlink" title="单个插槽"></a>单个插槽</h3><p>在介绍<code>slot</code>大致使用方法的一节中，已经知道了，如果子组件<code>template</code>中没有包含任何一个<code>&lt;slot&gt;</code>时，就算父组件分发再多的内容也将会被<strong>丢弃</strong>。只有子组件模板只要有一个没有属性的<code>slot</code>（因为在模板中可以有多个带属性的<code>slot</code>，后面的内容会介绍），父组件传入的整个内容片段将插入到<code>slot</code>所在的 DOM 位置，并将替换掉<code>slot</code>本身。</p>
<p>最初在<code>&lt;slot&gt;</code>中的任何内容都被视为<strong>备用内容</strong>（也可以在最初的<code>&lt;slot&gt;</code>中不放置任何默认内容）。备用内容在子组件的作用域内编译，并且只有在宿主元素（父组件没有分发任何内容）为空，且没有要插入的内容时才显示备用内容。</p>
<p>如果拿<code>modal</code>来举例，在单个插槽时，整个<code>modal</code>的内容都将需要通过父组件来进行分发。我们可以这样写（可能不太理想，但我们后面会慢慢让她变得更完善）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- modal组件模板 --&gt;</span><br><span class="line">&lt;template id=&quot;modal&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;modal-backdrop&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal&quot; @click.stop&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// JavaScript Code</span><br><span class="line">Vue.component(&apos;modal&apos;, &#123;</span><br><span class="line">    template: &apos;#modal&apos;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        close: function (event) &#123;</span><br><span class="line">            this.$emit(&apos;close&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">let app = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            toggleModal: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showModal: function () &#123;</span><br><span class="line">            this.toggleModal = true</span><br><span class="line">        &#125;,</span><br><span class="line">        closeModal: function () &#123;</span><br><span class="line">            this.toggleModal = false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在<code>modal</code>组件的<code>template</code>中，只使用了一个<code>&lt;slot&gt;</code>，这个时候在父组件中使用<code>modal</code>组件时，父组件分发的内容就会替换<code>&lt;slot&gt;</code>中的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;modal v-show=&quot;toggleModal&quot; @click=&quot;closeModal&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">                &lt;div  class=&quot;close rotate&quot; @click=&quot;closeModal&quot;&gt;</span><br><span class="line">                    &lt;i class=&quot;fa-times fa&quot;&gt;&lt;/i&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;h3 class=&quot;modal-title&quot;&gt;Modal Header&lt;/h3&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;modal-body&quot;&gt;</span><br><span class="line">                &lt;h3&gt;Modal Body&lt;/h3&gt;</span><br><span class="line">                &lt;p&gt;Modal body conent...&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;modal-footer&quot;&gt;</span><br><span class="line">                &lt;button class=&quot;btn&quot; @click=&quot;closeModal&quot;&gt;关闭&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/modal&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-open&quot; @click=&quot;showModal&quot;&gt;Show Modal&lt;/button&gt;</span><br><span class="line">&lt;/div</span><br></pre></td></tr></table></figure>

<p>最终的效果如下：</p>
<p>这样写感觉是不是怪怪的。我也是这么认为的，这只是为了说明单个<code>slot</code>的使用。接下来我们看看具名插槽。</p>
<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p><code>&lt;slot&gt;</code>可以用一个特殊的属性<code>name</code>来进一步配置父组件如何分发内容。多个插槽可以有不同的名字。具名插槽将匹配内容片段中有对应<code>slot</code>特性的元素。</p>
<p>仍然可以有一个匿名插槽，它是<strong>默认插槽</strong>，作为找不到匹配的内容片段的备用插槽。如果没有默认插槽，这些找不到匹配的内容片段将被抛弃。</p>
<p>前面示例写的<code>modal</code>组件使用了一个匿名<code>slot</code>。如果我们使用多个<code>slot</code>时，会让<code>modal</code>组件变得更为灵活。众所周知，对于一个<code>modal</code>组件，其主体结构包括了<code>modal-header</code>、<code>modal-body</code>和<code>modal-footer</code>（当然，很多时候可能不会同时出现，根据需要选择）。那么在定义<code>modal</code>组件的<code>template</code>时，可以使用三个<code>slot</code>，它们的<code>name</code>属性分别命名为<code>header</code>、<code>body</code>和<code>footer</code>。</p>
<p>基于上例，把模板修改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template id=&quot;modal&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;modal-backdrop&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal&quot; @click.stop&gt;</span><br><span class="line">            &lt;slot &gt;&lt;/slot&gt;</span><br><span class="line">            &lt;slot &gt;&lt;/slot&gt;</span><br><span class="line">            &lt;slot &gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>在使用模板的时候：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;modal v-show=&quot;toggleModal&quot; @click=&quot;closeModal&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;modal-header&quot; slot=&quot;header&quot;&gt;</span><br><span class="line">            &lt;div  class=&quot;close rotate&quot; @click=&quot;closeModal&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;fa-times fa&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;h3 class=&quot;modal-title&quot;&gt;Modal Header&lt;/h3&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;modal-body&quot; slot=&quot;body&quot;&gt;</span><br><span class="line">            &lt;h3&gt;Modal Body&lt;/h3&gt;</span><br><span class="line">            &lt;p&gt;Modal body conent...&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;modal-footer&quot; slot=&quot;footer&quot;&gt;</span><br><span class="line">            &lt;button class=&quot;btn&quot; @click=&quot;closeModal&quot;&gt;关闭&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/modal&gt;</span><br><span class="line">    &lt;button class=&quot;btn btn-open&quot; @click=&quot;showModal&quot;&gt;Show Modal&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>其他不变，最终的效果如下：</p>
<p>这个时候，你可以根据你的需要，在使用的时候视项目情况去选择，使用具名的插槽。</p>
<blockquote>
<p>在《<a href="//www.w3cplus.com/vue/vue-modal-component.html">使用 Vue 创建 Modal 组件</a>》一文中，也涉及到了<code>slot</code>的内容，现在回过头来看，将会变得更轻松些。</p>
</blockquote>
<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>作用域插槽是一种特殊类型的插槽，用作一个（能被传递数据的）可重用模板，来代替已经渲染好的元素。</p>
<p>在子组件中，只需将数据传递到插槽，就像你将<code>prop</code>传递给组件一样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    &lt;slot text=&quot;hello from child&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>在父级中，具有特殊特性 <code>slot-scope</code> 的 <code>&lt;template&gt;</code> 元素必须存在，表示它是作用域插槽的模板。<code>slot-scope</code> 的值将被用作一个临时变量名，此变量接收从子组件传递过来的 <code>prop</code> 对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;child&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;props&quot;&gt;</span><br><span class="line">            &lt;span&gt;hello from parent&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123; props.text &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/child&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>如果我们渲染上述模板，得到的输出会是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">        &lt;span&gt;hello from parent&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;hello from child&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>在 2.5.0+，<code>slot-scope</code> 能被用在任意元素或组件中而不再局限于 <code>&lt;template&gt;</code></strong>。</p>
</blockquote>
<p>作用域插槽更典型的用例是在列表组件中，允许使用者自定义如何渲染列表的每一项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;my-awesome-list :items=&quot;items&quot;&gt;</span><br><span class="line">    &lt;!-- 作用域插槽也可以是具名的 --&gt;</span><br><span class="line">    &lt;li</span><br><span class="line">        slot=&quot;item&quot;</span><br><span class="line">        slot-scope=&quot;props&quot;</span><br><span class="line">        class=&quot;my-fancy-item&quot;&gt;</span><br><span class="line">        &#123;&#123; props.text &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/my-awesome-list&gt;</span><br></pre></td></tr></table></figure>

<p>列表组件的模板：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;slot</span><br><span class="line">        v-for=&quot;item in items&quot;</span><br><span class="line">        :text=&quot;item.text&quot;&gt;</span><br><span class="line">        &lt;!-- 这里写入备用内容 --&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p><code>slot-scope</code> 的值实际上是一个可以出现在函数签名参数位置的合法的 JavaScript 表达式。这意味着在受支持的环境 (单文件组件或现代浏览器) 中，您还可以在表达式中使用 ES2015 解构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;child&gt;</span><br><span class="line">    &lt;span slot-scope=&quot;&#123; text &#125;&quot;&gt;&#123;&#123; text &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/child&gt;</span><br></pre></td></tr></table></figure>

<p>比如下面这个示例：</p>
<p>如果想进一步的了解<code>slot</code>中的作用域插槽，可以阅读《<a href="//www.w3cplus.com/vue/vue-js-scoped-slots.html">Vue 的作用域插槽</a>》一文。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章主要学习和了解了 Vue 中的插槽<code>&lt;slot&gt;</code>。是一个空壳子，它显示与否以及怎么显示完全是由<strong>父组件</strong>来控制。不过，<strong>插槽显示的位置由子组件自身决定，<code>slot</code>写在组件<code>template</code>的哪块，父组件传过来的模板将来就显示在哪块</strong>。在写一些组件的时候，<code>slot</code>能帮助我们做很多事情，也能让组件可复用性变得更为灵活。</p>
<p><a href="//weibo.com/w3cplus"><img src="https://www.w3cplus.com/sites/default/files/blogs/author/airen.jpg" alt></a></p>
<h3 id="大漠"><a href="#大漠" class="headerlink" title="大漠"></a><a href="//weibo.com/w3cplus">大漠</a></h3><p>常用昵称 “大漠”，W3CPlus 创始人，目前就职于手淘。对 HTML5、CSS3 和 Sass 等前端脚本语言有非常深入的认识和丰富的实践经验，尤其专注对 CSS3 的研究，是国内最早研究和使用 CSS3 技术的一批人。CSS3、Sass 和 Drupal 中国布道者。2014 年出版《<a href="//www.w3cplus.com/book-comment.html">图解 CSS3：核心技术与案例实战</a>》。</p>
<p>如需转载，烦请注明出处：<a href="//www.w3cplus.com/vue/vue-slot.html">https://www.w3cplus.com/vue/vue-slot.html</a><a href="https://www.febshoes.com/category/556" target="_blank" rel="noopener">Air Jordan 89 Shoes</a></p>
<p>如需转载，烦请注明出处：<a href="https://www.w3cplus.com/vue/vue-slot.html" target="_blank" rel="noopener">https://www.w3cplus.com/vue/vue-slot.html</a></p>
<blockquote>
<p><strong>如果文章中有不对之处，烦请各位大神拍正。如果你觉得这篇文章对你有所帮助，<a href="//www.zhi12.com/paycenter/reward/widget?entity=user&id=5491">打个赏，让我有更大的动力去创作</a>。(^_^)。看完了？还不过瘾？点击<a href="//www.zhi12.com/ask/5491/widget">向作者提问！</a></strong></p>
</blockquote>
<p>赏杯咖啡，鼓励他创作更多优质内容！ <a href="//www.zhi12.com/paycenter/reward/widget?entity=user&id=5491"><img src="https://www.w3cplus.com/sites/default/files/blogs/2018/1807/shang1.png" alt></a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>slot</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域资源共享 CORS 详解</title>
    <url>/2019/11/19/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB-CORS-%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>CORS 是一个 W3C 标准，全称是 “跨域资源共享”（Cross-origin resource sharing）。</p>
<p>它允许浏览器向跨源服务器，发出 <a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener"><code>XMLHttpRequest</code></a>请求，从而克服了 AJAX 只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">同源</a>使用的限制。</p>
<a id="more"></a>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><hr>
<p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。</p>
<p>整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。</p>
<h2 id="二、两种请求"><a href="#二、两种请求" class="headerlink" title="二、两种请求"></a>二、两种请求</h2><hr>
<p>浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>
<p>只要同时满足以下两大条件，就属于简单请求。</p>
<blockquote>
<p>（1) 请求方法是以下三种方法之一：</p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<p>（2）HTTP 的头信息不超出以下几种字段：</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type：只限于三个值<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li>
</ul>
</blockquote>
<p>凡是不同时满足上面两个条件，就属于非简单请求。</p>
<p>浏览器对这两种请求的处理，是不一样的。</p>
<h2 id="三、简单请求"><a href="#三、简单请求" class="headerlink" title="三、简单请求"></a>三、简单请求</h2><hr>
<h3 id="3-1-基本流程"><a href="#3-1-基本流程" class="headerlink" title="3.1 基本流程"></a>3.1 基本流程</h3><p>对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是在头信息之中，增加一个<code>Origin</code>字段。</p>
<p>下面是一个例子，浏览器发现这次跨源 AJAX 请求是简单请求，就自动在头信息之中，添加一个<code>Origin</code>字段。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面的头信息中，<code>Origin</code>字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p>
<p>如果<code>Origin</code>指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段（详见下文），就知道出错了，从而抛出一个错误，被<code>XMLHttpRequest</code>的<code>onerror</code>回调函数捕获。注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200。</p>
<p>如果<code>Origin</code>指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面的头信息之中，有三个与 CORS 请求相关的字段，都以<code>Access-Control-</code>开头。</p>
<h4 id="（1）Access-Control-Allow-Origin"><a href="#（1）Access-Control-Allow-Origin" class="headerlink" title="（1）Access-Control-Allow-Origin"></a><strong>（1）Access-Control-Allow-Origin</strong></h4><p>该字段是必须的。它的值要么是请求时<code>Origin</code>字段的值，要么是一个<code>*</code>，表示接受任意域名的请求。</p>
<h4 id="（2）Access-Control-Allow-Credentials"><a href="#（2）Access-Control-Allow-Credentials" class="headerlink" title="（2）Access-Control-Allow-Credentials"></a><strong>（2）Access-Control-Allow-Credentials</strong></h4><p>该字段可选。它的值是一个布尔值，表示是否允许发送 Cookie。默认情况下，Cookie 不包括在 CORS 请求之中。设为<code>true</code>，即表示服务器明确许可，Cookie 可以包含在请求中，一起发给服务器。这个值也只能设为<code>true</code>，如果服务器不要浏览器发送 Cookie，删除该字段即可。</p>
<h4 id="（3）Access-Control-Expose-Headers"><a href="#（3）Access-Control-Expose-Headers" class="headerlink" title="（3）Access-Control-Expose-Headers"></a><strong>（3）Access-Control-Expose-Headers</strong></h4><p>该字段可选。CORS 请求时，<code>XMLHttpRequest</code>对象的<code>getResponseHeader()</code>方法只能拿到 6 个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。上面的例子指定，<code>getResponseHeader(&#39;FooBar&#39;)</code>可以返回<code>FooBar</code>字段的值。</p>
<h3 id="3-2-withCredentials-属性"><a href="#3-2-withCredentials-属性" class="headerlink" title="3.2 withCredentials 属性"></a>3.2 withCredentials 属性</h3><p>上面说到，CORS 请求默认不发送 Cookie 和 HTTP 认证信息。如果要把 Cookie 发到服务器，一方面要服务器同意，指定<code>Access-Control-Allow-Credentials</code>字段。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>
</blockquote>
<p>另一方面，开发者必须在 AJAX 请求中打开<code>withCredentials</code>属性。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = true;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>否则，即使服务器同意发送 Cookie，浏览器也不会发送。或者，服务器要求设置 Cookie，浏览器也不会处理。</p>
<p>但是，如果省略<code>withCredentials</code>设置，有的浏览器还是会一起发送 Cookie。这时，可以显式关闭<code>withCredentials</code>。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xhr.withCredentials = false;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>需要注意的是，如果要发送 Cookie，<code>Access-Control-Allow-Origin</code>就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie 依然遵循同源政策，只有用服务器域名设置的 Cookie 才会上传，其他域名的 Cookie 并不会上传，且（跨源）原网页代码中的<code>document.cookie</code>也无法读取服务器域名下的 Cookie。</p>
<h2 id="四、非简单请求"><a href="#四、非简单请求" class="headerlink" title="四、非简单请求"></a>四、非简单请求</h2><hr>
<h3 id="4-1-预检请求"><a href="#4-1-预检请求" class="headerlink" title="4.1 预检请求"></a>4.1 预检请求</h3><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。</p>
<p>非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为 “预检” 请求（preflight）。</p>
<p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p>
<p>下面是一段浏览器的 JavaScript 脚本。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var url = &apos;http://api.alice.com/cors&apos;;</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&apos;PUT&apos;, url, true);</span><br><span class="line">xhr.setRequestHeader(&apos;X-Custom-Header&apos;, &apos;value&apos;);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，HTTP 请求的方法是<code>PUT</code>，并且发送一个自定义头信息<code>X-Custom-Header</code>。</p>
<p>浏览器发现，这是一个非简单请求，就自动发出一个 “预检” 请求，要求服务器确认可以这样请求。下面是这个 “预检” 请求的 HTTP 头信息。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTIONS /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Access-Control-Request-Method: PUT</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>
</blockquote>
<p>“预检” 请求用的请求方法是<code>OPTIONS</code>，表示这个请求是用来询问的。头信息里面，关键字段是<code>Origin</code>，表示请求来自哪个源。</p>
<p>除了<code>Origin</code>字段，”预检” 请求的头信息包括两个特殊字段。</p>
<h4 id="（1）Access-Control-Request-Method"><a href="#（1）Access-Control-Request-Method" class="headerlink" title="（1）Access-Control-Request-Method"></a><strong>（1）Access-Control-Request-Method</strong></h4><p>该字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，上例是<code>PUT</code>。</p>
<h4 id="（2）Access-Control-Request-Headers"><a href="#（2）Access-Control-Request-Headers" class="headerlink" title="（2）Access-Control-Request-Headers"></a><strong>（2）Access-Control-Request-Headers</strong></h4><p>该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是<code>X-Custom-Header</code>。</p>
<h3 id="4-2-预检请求的回应"><a href="#4-2-预检请求的回应" class="headerlink" title="4.2 预检请求的回应"></a>4.2 预检请求的回应</h3><p>服务器收到 “预检” 请求以后，检查了<code>Origin</code>、<code>Access-Control-Request-Method</code>和<code>Access-Control-Request-Headers</code>字段以后，确认允许跨源请求，就可以做出回应。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache/2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面的 HTTP 回应中，关键的是<code>Access-Control-Allow-Origin</code>字段，表示<code>http://api.bob.com</code>可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果浏览器否定了 “预检” 请求，会返回一个正常的 HTTP 回应，但是没有任何 CORS 相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被<code>XMLHttpRequest</code>对象的<code>onerror</code>回调函数捕获。控制台会打印出如下的报错信息。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://api.alice.com.</span><br><span class="line">Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure>
</blockquote>
<p>服务器回应的其他 CORS 相关字段如下。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="（1）Access-Control-Allow-Methods"><a href="#（1）Access-Control-Allow-Methods" class="headerlink" title="（1）Access-Control-Allow-Methods"></a><strong>（1）Access-Control-Allow-Methods</strong></h4><p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次 “预检” 请求。</p>
<h4 id="（2）Access-Control-Allow-Headers"><a href="#（2）Access-Control-Allow-Headers" class="headerlink" title="（2）Access-Control-Allow-Headers"></a><strong>（2）Access-Control-Allow-Headers</strong></h4><p>如果浏览器请求包括<code>Access-Control-Request-Headers</code>字段，则<code>Access-Control-Allow-Headers</code>字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在 “预检” 中请求的字段。</p>
<h4 id="（3）Access-Control-Allow-Credentials"><a href="#（3）Access-Control-Allow-Credentials" class="headerlink" title="（3）Access-Control-Allow-Credentials"></a><strong>（3）Access-Control-Allow-Credentials</strong></h4><p>该字段与简单请求时的含义相同。</p>
<h4 id="（4）Access-Control-Max-Age"><a href="#（4）Access-Control-Max-Age" class="headerlink" title="（4）Access-Control-Max-Age"></a><strong>（4）Access-Control-Max-Age</strong></h4><p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是 20 天（1728000 秒），即允许缓存该条回应 1728000 秒（即 20 天），在此期间，不用发出另一条预检请求。</p>
<h3 id="4-3-浏览器的正常请求和回应"><a href="#4-3-浏览器的正常请求和回应" class="headerlink" title="4.3 浏览器的正常请求和回应"></a>4.3 浏览器的正常请求和回应</h3><p>一旦服务器通过了 “预检” 请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样，会有一个<code>Origin</code>头信息字段。服务器的回应，也都会有一个<code>Access-Control-Allow-Origin</code>头信息字段。</p>
<p>下面是 “预检” 请求之后，浏览器的正常 CORS 请求。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">X-Custom-Header: value</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面头信息的<code>Origin</code>字段是浏览器自动添加的。</p>
<p>下面是服务器正常的回应。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面头信息中，<code>Access-Control-Allow-Origin</code>字段是每次回应都必定包含的。</p>
<h2 id="五、与-JSONP-的比较"><a href="#五、与-JSONP-的比较" class="headerlink" title="五、与 JSONP 的比较"></a>五、与 JSONP 的比较</h2><hr>
<p>CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。</p>
<p>JSONP 只支持<code>GET</code>请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。</p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存头 Cache-Control 的含义和使用</title>
    <url>/2019/11/18/%E7%BC%93%E5%AD%98%E5%A4%B4-Cache-Control-%E7%9A%84%E5%90%AB%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h3><blockquote>
<p>以下这些头只是限制性的，声明性的作用，没有强制约束力。只是为代理服务器设置了这些头，要求按照规范去做，但是完全可以不按照这个规范做。</p>
</blockquote>
<a id="more"></a>

<ul>
<li><h5 id="可缓存性"><a href="#可缓存性" class="headerlink" title="可缓存性"></a>可缓存性</h5><ul>
<li>public<br>在 http 请求返回的过程当中，在 Cache-Control 设置了 public 值，代表这个 http 请求返回的内容所经过的任何路径当中，包括一些中间的 http 代理服务器以及我们发出请求的客户端浏览器，都可以进行对返回内容的缓存操作：就是把这份数据存在本地，下次直接读这个缓存，不需要到返回这个内容的服务器上面重新进行操作返回内容。可缓存性是指哪些地方可以执行这些缓存。</li>
<li>private<br>只要发起请求的浏览器才可以缓存</li>
<li>no-cache<br>任何节点都不可以缓存。可以在本地服务器缓存，每次发起请求都需要去服务器验证，如果服务器说可以使用缓存，才能使用缓存。也就是说需要经过服务器验证的。</li>
</ul>
</li>
<li><h5 id="到期"><a href="#到期" class="headerlink" title="到期"></a>到期</h5><ul>
<li>max-age=<seconds><br>缓存有效期</seconds></li>
<li>s-maxage=<seconds><br>代替上面的 max-age，但是只有在代理服务器里面才会生效</seconds></li>
<li>max-stale=<seconds><br>max-stale：浏览器用不到，浏览器并不会主动去设置这个头，只有在发起端设置是有用的，服务端返回的内容中设置没有用。发起请求方，主动带的头，在 max-age 过期之后，如果我们返回的资源中有这个 max-stale 设置，还可以使用过期的缓存，而不需要去服务器请求新的内容。</seconds></li>
</ul>
</li>
<li><h5 id="重新验证"><a href="#重新验证" class="headerlink" title="重新验证"></a>重新验证</h5><ul>
<li>must-revalidate<br>设置了 max-age，如果缓存已经过期了，必须去原服务端发送这个请求，重新获取数据，来验证内容是否真的过期了，而不能直接使用本地缓存。</li>
<li>proxy-revalidate<br>用在指定缓存服务器，在过期的时候必须去原服务器重新请求一遍，而不能直接使用本地缓存。</li>
</ul>
</li>
<li><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul>
<li>no-store<br>本地和代理服务器不可以存储这个缓存，永远要去服务器拿新的 body 的内容。</li>
<li>no-transform<br>不允许代理服务器不要改动返回的内容。  </li>
</ul>
</li>
</ul>
<h3 id="浏览器中用到的"><a href="#浏览器中用到的" class="headerlink" title="浏览器中用到的:"></a>浏览器中用到的:</h3><ul>
<li><h5 id="可缓存性-1"><a href="#可缓存性-1" class="headerlink" title="可缓存性"></a>可缓存性</h5><ul>
<li>public</li>
<li>private</li>
<li>no-cahe</li>
</ul>
</li>
<li><h5 id="到期-1"><a href="#到期-1" class="headerlink" title="到期"></a>到期</h5><ul>
<li>max-age=<seconds></seconds></li>
<li>s-maxage=<seconds></seconds></li>
<li>max-stale=<seconds></seconds></li>
</ul>
</li>
<li><h5 id="重新验证-1"><a href="#重新验证-1" class="headerlink" title="重新验证"></a>重新验证</h5><ul>
<li><p>must-revalidate</p>
</li>
<li><p>设置请求文件缓存时间<br><code>&#39;Cache-Control&#39;: &#39;max-age=20&#39;</code></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.createServer(function (request, response) &#123;</span><br><span class="line">  console.log(&apos;request come&apos;, request.url)</span><br><span class="line"></span><br><span class="line">  if (request.url === &apos;/&apos;) &#123;</span><br><span class="line">    const html = fs.readFileSync(&apos;test.html&apos;, &apos;utf8&apos;)</span><br><span class="line">    response.writeHead(200, &#123;</span><br><span class="line">      &apos;Content-Type&apos;: &apos;text/html&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(html)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (request.url === &apos;/script.js&apos;) &#123;</span><br><span class="line">    response.writeHead(200, &#123;</span><br><span class="line">      &apos;Content-Type&apos;: &apos;text/javascript&apos;,</span><br><span class="line">      // 设置到期时间</span><br><span class="line">      &apos;Cache-Control&apos;: &apos;max-age=20&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(&apos;console.log(&quot;script loaded&quot;)&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).listen(8888)</span><br></pre></td></tr></table></figure>

<p>问题 ： 这时如果改变了服务器返回的结果，刷新，发现返回的还是之前的结果，并不是最新的。这是因为服务器端更新了之后，客户端还是请求的缓存的资源，这样想要更新一个应用的时候，客户端根本触及不到了，一般 max-ag 可能会设置一年。<br>解决：在构建流程的时候，把打包完成的 JS 文件名根据内容的 hash 结果，加上一串 hash 码，这串 hash 码是因为根据打包完成的 js 以及其他静态资源的文件内容进行性的 hash 计算，所以如果这些静态文件内容没有变，hash 码就不变，反应到 web 页面上就是 url 没有变，那么就可以使用静态缓存；而如果你的内容有变，hash 码就会变化，嵌入在 html 的 url 路径就有变化，有了变化之后发起的请求就是一个新的静态资源请求而不是之前缓存的请求。这样就可以达到缓存的目的。</p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Java文件读写</title>
    <url>/2019/11/18/Java%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
    <content><![CDATA[<h2 id="Java文件读写"><a href="#Java文件读写" class="headerlink" title="Java文件读写"></a>Java文件读写</h2><a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/13863123-3b31b9635a45a269.jpg" alt> <img src="http://upload-images.jianshu.io/upload_images/13863123-e669017cd996500b.jpg" alt></p>
<h3 id="IO-流"><a href="#IO-流" class="headerlink" title="IO 流"></a><strong>IO 流</strong></h3><ol>
<li>IO 流：用于处理设备上的数据。</li>
</ol>
<p>设备：硬盘，内存，键盘录入。</p>
<ol start="2">
<li>IO 有具体的分类：</li>
</ol>
<p>（1）根据处理的数据类型不同：字节流和字符流。</p>
<p>（2）根据流向不同：输入流和输出流。</p>
<p>字符流的由来：</p>
<p>因为文件编码的不同，而有了对字符进行高效操作的字符流对象。</p>
<p>原理：其实就是基于字节流读取字节时，去查了指定的码表。</p>
<p>字节流和字符流的区别：</p>
<p>（1）字节流读取的时候，读到一个字节就返回一个字节。</p>
<p>字符流使用了字节流读到一个或多个字节（中文对应的字节数是两个，在 UTF-8 码表中是 3 个字节）时，先去查指定的编码表，将查到的字符返回。</p>
<p><strong>（2）字节流可以处理所有类型数据，如 MP3，图片，avi。而字符流只能处理字符数据。</strong></p>
<p><strong>结论：只要是处理纯文本数据，就要优先考虑使用字符流，除此之外都要用字节流。</strong></p>
<p>IO 的体系，所具备的基本功能就有两个：读和写。</p>
<ol>
<li><p>字节流：InputStream(读)，OutputStream（写）。</p>
</li>
<li><p>字符流：Reader（读），Writer（写）。</p>
</li>
</ol>
<h3 id="一-字符流"><a href="#一-字符流" class="headerlink" title="一. 字符流:"></a><strong>一. 字符流:</strong></h3><h4 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h4><p>|–InputStreamReader  </p>
<p>　　 |–FileReader: 专门用于处理文件的字符读取流对象。  </p>
<h4 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h4><p> |–OutputStreamWriter  </p>
<p>　　 |–FileWriter: 专门用于处理文件的字符写入流对象</p>
<h4 id="Reader-中的常见的方法："><a href="#Reader-中的常见的方法：" class="headerlink" title="Reader 中的常见的方法："></a>Reader 中的常见的方法：</h4><ol>
<li>int read()：  </li>
</ol>
<p>　　 读取一个字符。返回的是读到的那个字符。如果读到流的末尾，返回 - 1.  </p>
<p>*<em>2. int read(char[])：    *</em></p>
<p>**　　将读到的字符存入指定的数组中，返回的是读到的字符个数，也就是往数组里装的元素的个数。如果读到流的末尾，返回 - 1.  **</p>
<ol start="3">
<li>close():    </li>
</ol>
<p>　　读取字符其实用的是 window 系统的功能，就希望使用完毕后，进行资源的释放。</p>
<h4 id="Writer-中的常见的方法："><a href="#Writer-中的常见的方法：" class="headerlink" title="Writer 中的常见的方法："></a>Writer 中的常见的方法：</h4><p>1，write(ch): 将一个字符写入到流中。  </p>
<p>2，write(char[]): 将一个字符数组写入到流中。</p>
<p>3，write(String): 将一个字符串写入到流中。  </p>
<p>4，flush(): 刷新流，将流中的数据刷新到目的地中，流还存在。  </p>
<p>5，close(): 关闭资源：在关闭前会先调用 flush()，刷新流中的数据去目的地。然流关闭。</p>
<h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter:"></a>FileWriter:</h4><p>该类没有特有的方法。只有自己的构造函数。  </p>
<p>该类特点在于，  </p>
<p>1，用于处理文本文件。  </p>
<p>2，该类中有默认的编码表，  </p>
<p>3，该类中有临时缓冲。</p>
<p>构造函数：在写入流对象初始化时，必须要有一个存储数据的目的地。</p>
<p>  FileWriter(String filename):   该构造函数做了什么事情呢？  </p>
<p>1，调用系统资源。  </p>
<p>2，在指定位置，创建一个文件。  </p>
<p> 注意：如果该文件已存在，将会被覆盖。  </p>
<p>FileWriter(String filename,boolean append):  </p>
<p> 　　该构造函数：当传入的 boolean 类型值为 true 时，会在指定文件末尾处进行数据的续写。</p>
<h4 id="FileReader："><a href="#FileReader：" class="headerlink" title="FileReader："></a>FileReader：</h4><p>1，用于读取文本文件的流对象。  </p>
<p>2，用于关联文本文件。</p>
<p> 构造函数：在读取流对象初始化的时候，必须要指定一个被读取的文件。    </p>
<p>如果该文件不存在会发生 FileNotFoundException.  </p>
<h4 id="FileReader-String-filename"><a href="#FileReader-String-filename" class="headerlink" title="FileReader(String filename);"></a>FileReader(String filename);</h4><p>对于读取或者写入流对象的构造函数，以及读写方法，还有刷新关闭功能都会抛出 IOException 或其子类。</p>
<p>所以都要进行处理，或者 throws 抛出，或者 try、catch 处理。</p>
<h4 id="另一个小细节："><a href="#另一个小细节：" class="headerlink" title="*另一个小细节：  *"></a>*<em>另一个小细节：  *</em></h4><p><strong>当指定绝对路径时，定义目录分隔符有两种方式：</strong></p>
<p><strong>1，反斜线 但是一定要写两个。\  new FileWriter(“c:\demo.txt”);</strong></p>
<p><strong>2，斜线  /  写一个即可。 new FileWriter(“c:/demo.txt”);</strong></p>
<h4 id="字符流的缓冲区："><a href="#字符流的缓冲区：" class="headerlink" title="字符流的缓冲区："></a><strong>字符流的缓冲区：</strong></h4><p>缓冲区的出现提高了对流的操作效率。</p>
<p>原理：其实就是将数组进行封装。</p>
<p>对应的对象：</p>
<p>BufferedWriter：</p>
<p>　　特有方法：</p>
<p><strong>newLine（）：跨平台的换行符。</strong></p>
<p>BufferedReader：</p>
<p>　　特有方法：</p>
<p><strong>readLine（）：一次读一行，到行标记时，将行标记之前的字符数据作为字符串返回。当读到末尾时，返回 null。</strong></p>
<p>使用缓冲区对象时，要明确，缓冲的存在是为了增强流的功能而存在，所以在简历缓冲区对象时，要现有流对象存在。</p>
<p>其实缓冲内部就是在使用流对象的方法，只不过加入了数组对数据进行了临时存储，为了提高操作数据的效率。</p>
<p>代码上的体现:</p>
<p><strong>写入缓冲区对象：</strong></p>
<p>// 建立缓冲区对象必须把流对象作为参数传递给缓冲区的构造函数。</p>
<p>BufferedWriter bw=new BufferedWriter（new FileWriter（“abc.txt”））；</p>
<p>bw.write(“abce”);// 将数据写入到了缓冲区。</p>
<p>bw.flush();// 对缓冲区的数据进行刷新。将数据刷到目的地中。</p>
<p>bw.close();// 关闭缓冲区，其实关闭的是被包装在内部的流对象。</p>
<h3 id="二-字节流"><a href="#二-字节流" class="headerlink" title="二. 字节流:"></a><strong>二. 字节流:</strong></h3><p>抽象基类: InputStream，OutputStream。</p>
<p>字节流可以操作任何数据。</p>
<p>注意：字符流使用的数组是字符数组，char[] chs ；</p>
<p>　　　字节流使用的数组是字节数组，byte[] bt ；</p>
<p>FileOutputStream fos=new FileOutputStream(“a.txt”)；</p>
<p>fos.write(“abcde”); // 直接将数据写入到了目的地。</p>
<p>fos.close();// 只关闭资源。</p>
<p>FileInputSteam fls=new FileInputStream(“a.txt”);</p>
<p>//fis.available();// 获取关联的文件字节数。如果文件体积不大，可以这样操作。</p>
<p>byte[]buf=new byte[fis.available()];// 创建一个刚刚好的缓冲区。// 但是这有一个弊端，就是文件过大，大小超出 Jvm 的内容空间时，会内存溢出。</p>
<p>fis.read(buf);</p>
<p>System.out.println(new String(buf));</p>
<p>例子:</p>
<p>　　需求: copy 一个图片。</p>
<p>BufferedInputStream bufis=new BufferedInputStream(new FileInputStream(“1.jpg”));</p>
<p>BufferedOutputStream bufos=new BufferedOutputStream(new FileOutputStream(“2.jpg”));</p>
<p>int by=0;</p>
<p>while(by=bufis.read()!=-1){</p>
<p>　　bufos.write(by);</p>
<p>　　bufos.newLine();</p>
<p>}</p>
<p>bufis.close();</p>
<p>bufos.close();</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a><strong>小结:</strong></h3><p>目前学习的流对象:</p>
<p>字符流: FileReader  FileWriter  BuffereedReader  BufferedWriter</p>
<p>字节流: FileInputStream  FileOutputStream   BufferedInputStream  BufferedOutputStream</p>
<p>补充：</p>
<ol>
<li>字节流的 read（）方法读取的是一个字节。为什么返回的不是 byte 类型，而是 int 类型呢？</li>
</ol>
<p>因为 read 方法读到末尾时返回的是 - 1，而在所操作的数据中很容易出现连续多个 1 的情况，而连续读到 8 个 1，就是 - 1，导致读取会提前停止。所以将读到的一个字节提升为一个 int 类型的数值，但是只保留原字节，并在剩余二进制位补 0。</p>
<p>具体操作是：byte&amp;255 or byte&amp;0xff</p>
<ol start="2">
<li>对于 write 方法，可以一次写入一个字节，但接收的是一个 int 类型数值。只写入该 int 类型的数值的最低一个字节（8 位）。</li>
</ol>
<p>简单说：<strong>read 方法对读到的数据进行提升，write 对操作的数据进行转换。</strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>File</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>DataURL, Blob, File, Image 之间的关系与转换</title>
    <url>/2019/11/18/DataURL-Blob-File-Image-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E4%B8%8E%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h4 id="使用前景："><a href="#使用前景：" class="headerlink" title="使用前景："></a>使用前景：</h4><p><strong><em>移动端上传拍照图片太大，使用 canvas 压缩后 base64=&gt;blob 二进制表单文件 =&gt;ajax-POST 上传</em></strong> <a id="more"></a><img src="https://oscimg.oschina.net/oscnet/45bb5cc130ba93fa7d2365fb81304c75f9a.jpg" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// canvas转dataURL：canvas对象、转换格式、图像品质</span><br><span class="line">function canvasToDataURL(canvas, format, quality) &#123;</span><br><span class="line">    return canvas.toDataURL(format||&apos;image/jpeg&apos;, quality||1.0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// DataURL转canvas</span><br><span class="line">function dataURLToCanvas(dataurl, cb)&#123;</span><br><span class="line">    var canvas = document.createElement(&apos;CANVAS&apos;);</span><br><span class="line">    var ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">    var img = new Image();</span><br><span class="line">    img.onload = function()&#123;</span><br><span class="line">        canvas.width = img.width;</span><br><span class="line">        canvas.height = img.height;</span><br><span class="line">        ctx.drawImage(img, 0, 0);</span><br><span class="line">        cb(canvas);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.src = dataurl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// image转canvas：图片地址</span><br><span class="line">function imageToCanvas(src, cb)&#123;</span><br><span class="line">    var canvas = document.createElement(&apos;CANVAS&apos;);</span><br><span class="line">    var ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">    var img = new Image();</span><br><span class="line">    img.src = src;</span><br><span class="line">    img.onload = function ()&#123;</span><br><span class="line">        canvas.width = img.width;</span><br><span class="line">        canvas.height = img.height;</span><br><span class="line">        ctx.drawImage(img, 0, 0);</span><br><span class="line">        cb(canvas);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// canvas转image</span><br><span class="line">    function canvasToImage(canvas)&#123;</span><br><span class="line">        var img = new Image();</span><br><span class="line">        img.src = canvas.toDataURL(&apos;image/jpeg&apos;, 1.0);</span><br><span class="line">        return img;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// File/Blob对象转DataURL</span><br><span class="line">    function fileOrBlobToDataURL(obj, cb)&#123;</span><br><span class="line">        var a = new FileReader();</span><br><span class="line">        a.readAsDataURL(obj);</span><br><span class="line">        a.onload = function (e)&#123;</span><br><span class="line">            cb(e.target.result);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// DataURL转Blob对象</span><br><span class="line">    function dataURLToBlob(dataurl)&#123;</span><br><span class="line">        var arr = dataurl.split(&apos;,&apos;);</span><br><span class="line">        var mime = arr[0].match(/:(.*?);/)[1];</span><br><span class="line">        var bstr = atob(arr[1]);</span><br><span class="line">        var n = bstr.length;</span><br><span class="line">        var u8arr = new Uint8Array(n);</span><br><span class="line">        while(n--)&#123;</span><br><span class="line">            u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">        &#125;</span><br><span class="line">        return new Blob([u8arr], &#123;type:mime&#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Blob转image</span><br><span class="line">    function blobToImage(blob, cb)&#123;</span><br><span class="line">        fileOrBlobToDataURL(blob, function (dataurl)&#123;</span><br><span class="line">        var img = new Image();</span><br><span class="line">            img.src = dataurl;</span><br><span class="line">            cb(img);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// image转Blob</span><br><span class="line">    function imageToBlob(src, cb)&#123;</span><br><span class="line">        imageToCanvas(src, function (canvas)&#123;</span><br><span class="line">            cb(dataURLToBlob(canvasToDataURL(canvas)));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Blob转canvas</span><br><span class="line">    function BlobToCanvas(blob, cb)&#123;</span><br><span class="line">        fileOrBlobToDataURL(blob, function (dataurl)&#123;</span><br><span class="line">            dataURLToCanvas(dataurl, cb);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// canvas转Blob</span><br><span class="line">function canvasToBlob(canvas, cb)&#123;</span><br><span class="line">	cb(dataURLToBlob(canvasToDataURL(canvas)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// image转dataURL</span><br><span class="line">function imageToDataURL(src, cb)&#123;</span><br><span class="line">	imageToCanvas(src, function (canvas)&#123;</span><br><span class="line">		cb(canvasToDataURL(canvas));</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// dataURL转image，这个不需要转，直接给了src就能用</span><br><span class="line">function dataURLToImage(dataurl)&#123;</span><br><span class="line">	var img = new Image();</span><br><span class="line">	img.src = d;</span><br><span class="line">	return img;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Blob</tag>
        <tag>File</tag>
      </tags>
  </entry>
</search>
