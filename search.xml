<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>跨域资源共享 CORS 详解</title>
    <url>/2019/11/19/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB-CORS-%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>CORS 是一个 W3C 标准，全称是 “跨域资源共享”（Cross-origin resource sharing）。</p>
<p>它允许浏览器向跨源服务器，发出 <a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener"><code>XMLHttpRequest</code></a>请求，从而克服了 AJAX 只能<a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="noopener">同源</a>使用的限制。</p>
<a id="more"></a>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><hr>
<p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。</p>
<p>整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p>
<p>因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。</p>
<h2 id="二、两种请求"><a href="#二、两种请求" class="headerlink" title="二、两种请求"></a>二、两种请求</h2><hr>
<p>浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>
<p>只要同时满足以下两大条件，就属于简单请求。</p>
<blockquote>
<p>（1) 请求方法是以下三种方法之一：</p>
<ul>
<li>HEAD</li>
<li>GET</li>
<li>POST</li>
</ul>
<p>（2）HTTP 的头信息不超出以下几种字段：</p>
<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Last-Event-ID</li>
<li>Content-Type：只限于三个值<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li>
</ul>
</blockquote>
<p>凡是不同时满足上面两个条件，就属于非简单请求。</p>
<p>浏览器对这两种请求的处理，是不一样的。</p>
<h2 id="三、简单请求"><a href="#三、简单请求" class="headerlink" title="三、简单请求"></a>三、简单请求</h2><hr>
<h3 id="3-1-基本流程"><a href="#3-1-基本流程" class="headerlink" title="3.1 基本流程"></a>3.1 基本流程</h3><p>对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是在头信息之中，增加一个<code>Origin</code>字段。</p>
<p>下面是一个例子，浏览器发现这次跨源 AJAX 请求是简单请求，就自动在头信息之中，添加一个<code>Origin</code>字段。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面的头信息中，<code>Origin</code>字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p>
<p>如果<code>Origin</code>指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含<code>Access-Control-Allow-Origin</code>字段（详见下文），就知道出错了，从而抛出一个错误，被<code>XMLHttpRequest</code>的<code>onerror</code>回调函数捕获。注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200。</p>
<p>如果<code>Origin</code>指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Expose-Headers: FooBar</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面的头信息之中，有三个与 CORS 请求相关的字段，都以<code>Access-Control-</code>开头。</p>
<h4 id="（1）Access-Control-Allow-Origin"><a href="#（1）Access-Control-Allow-Origin" class="headerlink" title="（1）Access-Control-Allow-Origin"></a><strong>（1）Access-Control-Allow-Origin</strong></h4><p>该字段是必须的。它的值要么是请求时<code>Origin</code>字段的值，要么是一个<code>*</code>，表示接受任意域名的请求。</p>
<h4 id="（2）Access-Control-Allow-Credentials"><a href="#（2）Access-Control-Allow-Credentials" class="headerlink" title="（2）Access-Control-Allow-Credentials"></a><strong>（2）Access-Control-Allow-Credentials</strong></h4><p>该字段可选。它的值是一个布尔值，表示是否允许发送 Cookie。默认情况下，Cookie 不包括在 CORS 请求之中。设为<code>true</code>，即表示服务器明确许可，Cookie 可以包含在请求中，一起发给服务器。这个值也只能设为<code>true</code>，如果服务器不要浏览器发送 Cookie，删除该字段即可。</p>
<h4 id="（3）Access-Control-Expose-Headers"><a href="#（3）Access-Control-Expose-Headers" class="headerlink" title="（3）Access-Control-Expose-Headers"></a><strong>（3）Access-Control-Expose-Headers</strong></h4><p>该字段可选。CORS 请求时，<code>XMLHttpRequest</code>对象的<code>getResponseHeader()</code>方法只能拿到 6 个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。上面的例子指定，<code>getResponseHeader(&#39;FooBar&#39;)</code>可以返回<code>FooBar</code>字段的值。</p>
<h3 id="3-2-withCredentials-属性"><a href="#3-2-withCredentials-属性" class="headerlink" title="3.2 withCredentials 属性"></a>3.2 withCredentials 属性</h3><p>上面说到，CORS 请求默认不发送 Cookie 和 HTTP 认证信息。如果要把 Cookie 发到服务器，一方面要服务器同意，指定<code>Access-Control-Allow-Credentials</code>字段。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>
</blockquote>
<p>另一方面，开发者必须在 AJAX 请求中打开<code>withCredentials</code>属性。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = true;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>否则，即使服务器同意发送 Cookie，浏览器也不会发送。或者，服务器要求设置 Cookie，浏览器也不会处理。</p>
<p>但是，如果省略<code>withCredentials</code>设置，有的浏览器还是会一起发送 Cookie。这时，可以显式关闭<code>withCredentials</code>。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xhr.withCredentials = false;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>需要注意的是，如果要发送 Cookie，<code>Access-Control-Allow-Origin</code>就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie 依然遵循同源政策，只有用服务器域名设置的 Cookie 才会上传，其他域名的 Cookie 并不会上传，且（跨源）原网页代码中的<code>document.cookie</code>也无法读取服务器域名下的 Cookie。</p>
<h2 id="四、非简单请求"><a href="#四、非简单请求" class="headerlink" title="四、非简单请求"></a>四、非简单请求</h2><hr>
<h3 id="4-1-预检请求"><a href="#4-1-预检请求" class="headerlink" title="4.1 预检请求"></a>4.1 预检请求</h3><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是<code>PUT</code>或<code>DELETE</code>，或者<code>Content-Type</code>字段的类型是<code>application/json</code>。</p>
<p>非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为 “预检” 请求（preflight）。</p>
<p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的<code>XMLHttpRequest</code>请求，否则就报错。</p>
<p>下面是一段浏览器的 JavaScript 脚本。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var url = &apos;http://api.alice.com/cors&apos;;</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&apos;PUT&apos;, url, true);</span><br><span class="line">xhr.setRequestHeader(&apos;X-Custom-Header&apos;, &apos;value&apos;);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，HTTP 请求的方法是<code>PUT</code>，并且发送一个自定义头信息<code>X-Custom-Header</code>。</p>
<p>浏览器发现，这是一个非简单请求，就自动发出一个 “预检” 请求，要求服务器确认可以这样请求。下面是这个 “预检” 请求的 HTTP 头信息。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTIONS /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Access-Control-Request-Method: PUT</span><br><span class="line">Access-Control-Request-Headers: X-Custom-Header</span><br><span class="line">Host: api.alice.com</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>
</blockquote>
<p>“预检” 请求用的请求方法是<code>OPTIONS</code>，表示这个请求是用来询问的。头信息里面，关键字段是<code>Origin</code>，表示请求来自哪个源。</p>
<p>除了<code>Origin</code>字段，”预检” 请求的头信息包括两个特殊字段。</p>
<h4 id="（1）Access-Control-Request-Method"><a href="#（1）Access-Control-Request-Method" class="headerlink" title="（1）Access-Control-Request-Method"></a><strong>（1）Access-Control-Request-Method</strong></h4><p>该字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，上例是<code>PUT</code>。</p>
<h4 id="（2）Access-Control-Request-Headers"><a href="#（2）Access-Control-Request-Headers" class="headerlink" title="（2）Access-Control-Request-Headers"></a><strong>（2）Access-Control-Request-Headers</strong></h4><p>该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是<code>X-Custom-Header</code>。</p>
<h3 id="4-2-预检请求的回应"><a href="#4-2-预检请求的回应" class="headerlink" title="4.2 预检请求的回应"></a>4.2 预检请求的回应</h3><p>服务器收到 “预检” 请求以后，检查了<code>Origin</code>、<code>Access-Control-Request-Method</code>和<code>Access-Control-Request-Headers</code>字段以后，确认允许跨源请求，就可以做出回应。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache/2.0.61 (Unix)</span><br><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 0</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面的 HTTP 回应中，关键的是<code>Access-Control-Allow-Origin</code>字段，表示<code>http://api.bob.com</code>可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果浏览器否定了 “预检” 请求，会返回一个正常的 HTTP 回应，但是没有任何 CORS 相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被<code>XMLHttpRequest</code>对象的<code>onerror</code>回调函数捕获。控制台会打印出如下的报错信息。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load http://api.alice.com.</span><br><span class="line">Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.</span><br></pre></td></tr></table></figure>
</blockquote>
<p>服务器回应的其他 CORS 相关字段如下。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Max-Age: 1728000</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="（1）Access-Control-Allow-Methods"><a href="#（1）Access-Control-Allow-Methods" class="headerlink" title="（1）Access-Control-Allow-Methods"></a><strong>（1）Access-Control-Allow-Methods</strong></h4><p>该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次 “预检” 请求。</p>
<h4 id="（2）Access-Control-Allow-Headers"><a href="#（2）Access-Control-Allow-Headers" class="headerlink" title="（2）Access-Control-Allow-Headers"></a><strong>（2）Access-Control-Allow-Headers</strong></h4><p>如果浏览器请求包括<code>Access-Control-Request-Headers</code>字段，则<code>Access-Control-Allow-Headers</code>字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在 “预检” 中请求的字段。</p>
<h4 id="（3）Access-Control-Allow-Credentials"><a href="#（3）Access-Control-Allow-Credentials" class="headerlink" title="（3）Access-Control-Allow-Credentials"></a><strong>（3）Access-Control-Allow-Credentials</strong></h4><p>该字段与简单请求时的含义相同。</p>
<h4 id="（4）Access-Control-Max-Age"><a href="#（4）Access-Control-Max-Age" class="headerlink" title="（4）Access-Control-Max-Age"></a><strong>（4）Access-Control-Max-Age</strong></h4><p>该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是 20 天（1728000 秒），即允许缓存该条回应 1728000 秒（即 20 天），在此期间，不用发出另一条预检请求。</p>
<h3 id="4-3-浏览器的正常请求和回应"><a href="#4-3-浏览器的正常请求和回应" class="headerlink" title="4.3 浏览器的正常请求和回应"></a>4.3 浏览器的正常请求和回应</h3><p>一旦服务器通过了 “预检” 请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样，会有一个<code>Origin</code>头信息字段。服务器的回应，也都会有一个<code>Access-Control-Allow-Origin</code>头信息字段。</p>
<p>下面是 “预检” 请求之后，浏览器的正常 CORS 请求。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT /cors HTTP/1.1</span><br><span class="line">Origin: http://api.bob.com</span><br><span class="line">Host: api.alice.com</span><br><span class="line">X-Custom-Header: value</span><br><span class="line">Accept-Language: en-US</span><br><span class="line">Connection: keep-alive</span><br><span class="line">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面头信息的<code>Origin</code>字段是浏览器自动添加的。</p>
<p>下面是服务器正常的回应。</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面头信息中，<code>Access-Control-Allow-Origin</code>字段是每次回应都必定包含的。</p>
<h2 id="五、与-JSONP-的比较"><a href="#五、与-JSONP-的比较" class="headerlink" title="五、与 JSONP 的比较"></a>五、与 JSONP 的比较</h2><hr>
<p>CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。</p>
<p>JSONP 只支持<code>GET</code>请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。</p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存头 Cache-Control 的含义和使用</title>
    <url>/2019/11/18/%E7%BC%93%E5%AD%98%E5%A4%B4-Cache-Control-%E7%9A%84%E5%90%AB%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h3><blockquote>
<p>以下这些头只是限制性的，声明性的作用，没有强制约束力。只是为代理服务器设置了这些头，要求按照规范去做，但是完全可以不按照这个规范做。</p>
</blockquote>
<a id="more"></a>

<ul>
<li><h5 id="可缓存性"><a href="#可缓存性" class="headerlink" title="可缓存性"></a>可缓存性</h5><ul>
<li>public<br>在 http 请求返回的过程当中，在 Cache-Control 设置了 public 值，代表这个 http 请求返回的内容所经过的任何路径当中，包括一些中间的 http 代理服务器以及我们发出请求的客户端浏览器，都可以进行对返回内容的缓存操作：就是把这份数据存在本地，下次直接读这个缓存，不需要到返回这个内容的服务器上面重新进行操作返回内容。可缓存性是指哪些地方可以执行这些缓存。</li>
<li>private<br>只要发起请求的浏览器才可以缓存</li>
<li>no-cache<br>任何节点都不可以缓存。可以在本地服务器缓存，每次发起请求都需要去服务器验证，如果服务器说可以使用缓存，才能使用缓存。也就是说需要经过服务器验证的。</li>
</ul>
</li>
<li><h5 id="到期"><a href="#到期" class="headerlink" title="到期"></a>到期</h5><ul>
<li>max-age=<seconds><br>缓存有效期</li>
<li>s-maxage=<seconds><br>代替上面的 max-age，但是只有在代理服务器里面才会生效</li>
<li>max-stale=<seconds><br>max-stale：浏览器用不到，浏览器并不会主动去设置这个头，只有在发起端设置是有用的，服务端返回的内容中设置没有用。发起请求方，主动带的头，在 max-age 过期之后，如果我们返回的资源中有这个 max-stale 设置，还可以使用过期的缓存，而不需要去服务器请求新的内容。</li>
</ul>
</li>
<li><h5 id="重新验证"><a href="#重新验证" class="headerlink" title="重新验证"></a>重新验证</h5><ul>
<li>must-revalidate<br>设置了 max-age，如果缓存已经过期了，必须去原服务端发送这个请求，重新获取数据，来验证内容是否真的过期了，而不能直接使用本地缓存。</li>
<li>proxy-revalidate<br>用在指定缓存服务器，在过期的时候必须去原服务器重新请求一遍，而不能直接使用本地缓存。</li>
</ul>
</li>
<li><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul>
<li>no-store<br>本地和代理服务器不可以存储这个缓存，永远要去服务器拿新的 body 的内容。</li>
<li>no-transform<br>不允许代理服务器不要改动返回的内容。  </li>
</ul>
</li>
</ul>
<h3 id="浏览器中用到的"><a href="#浏览器中用到的" class="headerlink" title="浏览器中用到的:"></a>浏览器中用到的:</h3><ul>
<li><h5 id="可缓存性-1"><a href="#可缓存性-1" class="headerlink" title="可缓存性"></a>可缓存性</h5><ul>
<li>public</li>
<li>private</li>
<li>no-cahe</li>
</ul>
</li>
<li><h5 id="到期-1"><a href="#到期-1" class="headerlink" title="到期"></a>到期</h5><ul>
<li>max-age=<seconds></li>
<li>s-maxage=<seconds></li>
<li>max-stale=<seconds></li>
</ul>
</li>
<li><h5 id="重新验证-1"><a href="#重新验证-1" class="headerlink" title="重新验证"></a>重新验证</h5><ul>
<li><p>must-revalidate</p>
</li>
<li><p>设置请求文件缓存时间<br><code>&#39;Cache-Control&#39;: &#39;max-age=20&#39;</code></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.createServer(function (request, response) &#123;</span><br><span class="line">  console.log(&apos;request come&apos;, request.url)</span><br><span class="line"></span><br><span class="line">  if (request.url === &apos;/&apos;) &#123;</span><br><span class="line">    const html = fs.readFileSync(&apos;test.html&apos;, &apos;utf8&apos;)</span><br><span class="line">    response.writeHead(200, &#123;</span><br><span class="line">      &apos;Content-Type&apos;: &apos;text/html&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(html)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (request.url === &apos;/script.js&apos;) &#123;</span><br><span class="line">    response.writeHead(200, &#123;</span><br><span class="line">      &apos;Content-Type&apos;: &apos;text/javascript&apos;,</span><br><span class="line">      // 设置到期时间</span><br><span class="line">      &apos;Cache-Control&apos;: &apos;max-age=20&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(&apos;console.log(&quot;script loaded&quot;)&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).listen(8888)</span><br></pre></td></tr></table></figure>

<p>问题 ： 这时如果改变了服务器返回的结果，刷新，发现返回的还是之前的结果，并不是最新的。这是因为服务器端更新了之后，客户端还是请求的缓存的资源，这样想要更新一个应用的时候，客户端根本触及不到了，一般 max-ag 可能会设置一年。<br>解决：在构建流程的时候，把打包完成的 JS 文件名根据内容的 hash 结果，加上一串 hash 码，这串 hash 码是因为根据打包完成的 js 以及其他静态资源的文件内容进行性的 hash 计算，所以如果这些静态文件内容没有变，hash 码就不变，反应到 web 页面上就是 url 没有变，那么就可以使用静态缓存；而如果你的内容有变，hash 码就会变化，嵌入在 html 的 url 路径就有变化，有了变化之后发起的请求就是一个新的静态资源请求而不是之前缓存的请求。这样就可以达到缓存的目的。</p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Java文件读写</title>
    <url>/2019/11/18/Java%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</url>
    <content><![CDATA[<h2 id="Java文件读写"><a href="#Java文件读写" class="headerlink" title="Java文件读写"></a>Java文件读写</h2><a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/13863123-3b31b9635a45a269.jpg" alt=""> <img src="http://upload-images.jianshu.io/upload_images/13863123-e669017cd996500b.jpg" alt=""></p>
<h3 id="IO-流"><a href="#IO-流" class="headerlink" title="IO 流"></a><strong>IO 流</strong></h3><ol>
<li>IO 流：用于处理设备上的数据。</li>
</ol>
<p>设备：硬盘，内存，键盘录入。</p>
<ol start="2">
<li>IO 有具体的分类：</li>
</ol>
<p>（1）根据处理的数据类型不同：字节流和字符流。</p>
<p>（2）根据流向不同：输入流和输出流。</p>
<p>字符流的由来：</p>
<p>因为文件编码的不同，而有了对字符进行高效操作的字符流对象。</p>
<p>原理：其实就是基于字节流读取字节时，去查了指定的码表。</p>
<p>字节流和字符流的区别：</p>
<p>（1）字节流读取的时候，读到一个字节就返回一个字节。</p>
<p>字符流使用了字节流读到一个或多个字节（中文对应的字节数是两个，在 UTF-8 码表中是 3 个字节）时，先去查指定的编码表，将查到的字符返回。</p>
<p><strong>（2）字节流可以处理所有类型数据，如 MP3，图片，avi。而字符流只能处理字符数据。</strong></p>
<p><strong>结论：只要是处理纯文本数据，就要优先考虑使用字符流，除此之外都要用字节流。</strong></p>
<p>IO 的体系，所具备的基本功能就有两个：读和写。</p>
<ol>
<li><p>字节流：InputStream(读)，OutputStream（写）。</p>
</li>
<li><p>字符流：Reader（读），Writer（写）。</p>
</li>
</ol>
<h3 id="一-字符流"><a href="#一-字符流" class="headerlink" title="一. 字符流:"></a><strong>一. 字符流:</strong></h3><h4 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h4><p>|–InputStreamReader  </p>
<p>　　 |–FileReader: 专门用于处理文件的字符读取流对象。  </p>
<h4 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h4><p> |–OutputStreamWriter  </p>
<p>　　 |–FileWriter: 专门用于处理文件的字符写入流对象</p>
<h4 id="Reader-中的常见的方法："><a href="#Reader-中的常见的方法：" class="headerlink" title="Reader 中的常见的方法："></a>Reader 中的常见的方法：</h4><ol>
<li>int read()：  </li>
</ol>
<p>　　 读取一个字符。返回的是读到的那个字符。如果读到流的末尾，返回 - 1.  </p>
<p>*<em>2. int read(char[])：    *</em></p>
<p>**　　将读到的字符存入指定的数组中，返回的是读到的字符个数，也就是往数组里装的元素的个数。如果读到流的末尾，返回 - 1.  **</p>
<ol start="3">
<li>close():    </li>
</ol>
<p>　　读取字符其实用的是 window 系统的功能，就希望使用完毕后，进行资源的释放。</p>
<h4 id="Writer-中的常见的方法："><a href="#Writer-中的常见的方法：" class="headerlink" title="Writer 中的常见的方法："></a>Writer 中的常见的方法：</h4><p>1，write(ch): 将一个字符写入到流中。  </p>
<p>2，write(char[]): 将一个字符数组写入到流中。</p>
<p>3，write(String): 将一个字符串写入到流中。  </p>
<p>4，flush(): 刷新流，将流中的数据刷新到目的地中，流还存在。  </p>
<p>5，close(): 关闭资源：在关闭前会先调用 flush()，刷新流中的数据去目的地。然流关闭。</p>
<h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter:"></a>FileWriter:</h4><p>该类没有特有的方法。只有自己的构造函数。  </p>
<p>该类特点在于，  </p>
<p>1，用于处理文本文件。  </p>
<p>2，该类中有默认的编码表，  </p>
<p>3，该类中有临时缓冲。</p>
<p>构造函数：在写入流对象初始化时，必须要有一个存储数据的目的地。</p>
<p>  FileWriter(String filename):   该构造函数做了什么事情呢？  </p>
<p>1，调用系统资源。  </p>
<p>2，在指定位置，创建一个文件。  </p>
<p> 注意：如果该文件已存在，将会被覆盖。  </p>
<p>FileWriter(String filename,boolean append):  </p>
<p> 　　该构造函数：当传入的 boolean 类型值为 true 时，会在指定文件末尾处进行数据的续写。</p>
<h4 id="FileReader："><a href="#FileReader：" class="headerlink" title="FileReader："></a>FileReader：</h4><p>1，用于读取文本文件的流对象。  </p>
<p>2，用于关联文本文件。</p>
<p> 构造函数：在读取流对象初始化的时候，必须要指定一个被读取的文件。    </p>
<p>如果该文件不存在会发生 FileNotFoundException.  </p>
<h4 id="FileReader-String-filename"><a href="#FileReader-String-filename" class="headerlink" title="FileReader(String filename);"></a>FileReader(String filename);</h4><p>对于读取或者写入流对象的构造函数，以及读写方法，还有刷新关闭功能都会抛出 IOException 或其子类。</p>
<p>所以都要进行处理，或者 throws 抛出，或者 try、catch 处理。</p>
<h4 id="另一个小细节："><a href="#另一个小细节：" class="headerlink" title="*另一个小细节：  *"></a>*<em>另一个小细节：  *</em></h4><p><strong>当指定绝对路径时，定义目录分隔符有两种方式：</strong></p>
<p><strong>1，反斜线 但是一定要写两个。\  new FileWriter(“c:\demo.txt”);</strong></p>
<p><strong>2，斜线  /  写一个即可。 new FileWriter(“c:/demo.txt”);</strong></p>
<h4 id="字符流的缓冲区："><a href="#字符流的缓冲区：" class="headerlink" title="字符流的缓冲区："></a><strong>字符流的缓冲区：</strong></h4><p>缓冲区的出现提高了对流的操作效率。</p>
<p>原理：其实就是将数组进行封装。</p>
<p>对应的对象：</p>
<p>BufferedWriter：</p>
<p>　　特有方法：</p>
<p><strong>newLine（）：跨平台的换行符。</strong></p>
<p>BufferedReader：</p>
<p>　　特有方法：</p>
<p><strong>readLine（）：一次读一行，到行标记时，将行标记之前的字符数据作为字符串返回。当读到末尾时，返回 null。</strong></p>
<p>使用缓冲区对象时，要明确，缓冲的存在是为了增强流的功能而存在，所以在简历缓冲区对象时，要现有流对象存在。</p>
<p>其实缓冲内部就是在使用流对象的方法，只不过加入了数组对数据进行了临时存储，为了提高操作数据的效率。</p>
<p>代码上的体现:</p>
<p><strong>写入缓冲区对象：</strong></p>
<p>// 建立缓冲区对象必须把流对象作为参数传递给缓冲区的构造函数。</p>
<p>BufferedWriter bw=new BufferedWriter（new FileWriter（“abc.txt”））；</p>
<p>bw.write(“abce”);// 将数据写入到了缓冲区。</p>
<p>bw.flush();// 对缓冲区的数据进行刷新。将数据刷到目的地中。</p>
<p>bw.close();// 关闭缓冲区，其实关闭的是被包装在内部的流对象。</p>
<h3 id="二-字节流"><a href="#二-字节流" class="headerlink" title="二. 字节流:"></a><strong>二. 字节流:</strong></h3><p>抽象基类: InputStream，OutputStream。</p>
<p>字节流可以操作任何数据。</p>
<p>注意：字符流使用的数组是字符数组，char[] chs ；</p>
<p>　　　字节流使用的数组是字节数组，byte[] bt ；</p>
<p>FileOutputStream fos=new FileOutputStream(“a.txt”)；</p>
<p>fos.write(“abcde”); // 直接将数据写入到了目的地。</p>
<p>fos.close();// 只关闭资源。</p>
<p>FileInputSteam fls=new FileInputStream(“a.txt”);</p>
<p>//fis.available();// 获取关联的文件字节数。如果文件体积不大，可以这样操作。</p>
<p>byte[]buf=new byte[fis.available()];// 创建一个刚刚好的缓冲区。// 但是这有一个弊端，就是文件过大，大小超出 Jvm 的内容空间时，会内存溢出。</p>
<p>fis.read(buf);</p>
<p>System.out.println(new String(buf));</p>
<p>例子:</p>
<p>　　需求: copy 一个图片。</p>
<p>BufferedInputStream bufis=new BufferedInputStream(new FileInputStream(“1.jpg”));</p>
<p>BufferedOutputStream bufos=new BufferedOutputStream(new FileOutputStream(“2.jpg”));</p>
<p>int by=0;</p>
<p>while(by=bufis.read()!=-1){</p>
<p>　　bufos.write(by);</p>
<p>　　bufos.newLine();</p>
<p>}</p>
<p>bufis.close();</p>
<p>bufos.close();</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a><strong>小结:</strong></h3><p>目前学习的流对象:</p>
<p>字符流: FileReader  FileWriter  BuffereedReader  BufferedWriter</p>
<p>字节流: FileInputStream  FileOutputStream   BufferedInputStream  BufferedOutputStream</p>
<p>补充：</p>
<ol>
<li>字节流的 read（）方法读取的是一个字节。为什么返回的不是 byte 类型，而是 int 类型呢？</li>
</ol>
<p>因为 read 方法读到末尾时返回的是 - 1，而在所操作的数据中很容易出现连续多个 1 的情况，而连续读到 8 个 1，就是 - 1，导致读取会提前停止。所以将读到的一个字节提升为一个 int 类型的数值，但是只保留原字节，并在剩余二进制位补 0。</p>
<p>具体操作是：byte&amp;255 or byte&amp;0xff</p>
<ol start="2">
<li>对于 write 方法，可以一次写入一个字节，但接收的是一个 int 类型数值。只写入该 int 类型的数值的最低一个字节（8 位）。</li>
</ol>
<p>简单说：<strong>read 方法对读到的数据进行提升，write 对操作的数据进行转换。</strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>File</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>DataURL, Blob, File, Image 之间的关系与转换</title>
    <url>/2019/11/18/DataURL-Blob-File-Image-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E4%B8%8E%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h4 id="使用前景："><a href="#使用前景：" class="headerlink" title="使用前景："></a>使用前景：</h4><p><strong><em>移动端上传拍照图片太大，使用 canvas 压缩后 base64=&gt;blob 二进制表单文件 =&gt;ajax-POST 上传</em></strong> <a id="more"></a><img src="https://oscimg.oschina.net/oscnet/45bb5cc130ba93fa7d2365fb81304c75f9a.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// canvas转dataURL：canvas对象、转换格式、图像品质</span><br><span class="line">function canvasToDataURL(canvas, format, quality) &#123;</span><br><span class="line">    return canvas.toDataURL(format||&apos;image/jpeg&apos;, quality||1.0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// DataURL转canvas</span><br><span class="line">function dataURLToCanvas(dataurl, cb)&#123;</span><br><span class="line">    var canvas = document.createElement(&apos;CANVAS&apos;);</span><br><span class="line">    var ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">    var img = new Image();</span><br><span class="line">    img.onload = function()&#123;</span><br><span class="line">        canvas.width = img.width;</span><br><span class="line">        canvas.height = img.height;</span><br><span class="line">        ctx.drawImage(img, 0, 0);</span><br><span class="line">        cb(canvas);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.src = dataurl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// image转canvas：图片地址</span><br><span class="line">function imageToCanvas(src, cb)&#123;</span><br><span class="line">    var canvas = document.createElement(&apos;CANVAS&apos;);</span><br><span class="line">    var ctx = canvas.getContext(&apos;2d&apos;);</span><br><span class="line">    var img = new Image();</span><br><span class="line">    img.src = src;</span><br><span class="line">    img.onload = function ()&#123;</span><br><span class="line">        canvas.width = img.width;</span><br><span class="line">        canvas.height = img.height;</span><br><span class="line">        ctx.drawImage(img, 0, 0);</span><br><span class="line">        cb(canvas);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// canvas转image</span><br><span class="line">    function canvasToImage(canvas)&#123;</span><br><span class="line">        var img = new Image();</span><br><span class="line">        img.src = canvas.toDataURL(&apos;image/jpeg&apos;, 1.0);</span><br><span class="line">        return img;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// File/Blob对象转DataURL</span><br><span class="line">    function fileOrBlobToDataURL(obj, cb)&#123;</span><br><span class="line">        var a = new FileReader();</span><br><span class="line">        a.readAsDataURL(obj);</span><br><span class="line">        a.onload = function (e)&#123;</span><br><span class="line">            cb(e.target.result);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// DataURL转Blob对象</span><br><span class="line">    function dataURLToBlob(dataurl)&#123;</span><br><span class="line">        var arr = dataurl.split(&apos;,&apos;);</span><br><span class="line">        var mime = arr[0].match(/:(.*?);/)[1];</span><br><span class="line">        var bstr = atob(arr[1]);</span><br><span class="line">        var n = bstr.length;</span><br><span class="line">        var u8arr = new Uint8Array(n);</span><br><span class="line">        while(n--)&#123;</span><br><span class="line">            u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">        &#125;</span><br><span class="line">        return new Blob([u8arr], &#123;type:mime&#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Blob转image</span><br><span class="line">    function blobToImage(blob, cb)&#123;</span><br><span class="line">        fileOrBlobToDataURL(blob, function (dataurl)&#123;</span><br><span class="line">        var img = new Image();</span><br><span class="line">            img.src = dataurl;</span><br><span class="line">            cb(img);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// image转Blob</span><br><span class="line">    function imageToBlob(src, cb)&#123;</span><br><span class="line">        imageToCanvas(src, function (canvas)&#123;</span><br><span class="line">            cb(dataURLToBlob(canvasToDataURL(canvas)));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Blob转canvas</span><br><span class="line">    function BlobToCanvas(blob, cb)&#123;</span><br><span class="line">        fileOrBlobToDataURL(blob, function (dataurl)&#123;</span><br><span class="line">            dataURLToCanvas(dataurl, cb);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// canvas转Blob</span><br><span class="line">function canvasToBlob(canvas, cb)&#123;</span><br><span class="line">	cb(dataURLToBlob(canvasToDataURL(canvas)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// image转dataURL</span><br><span class="line">function imageToDataURL(src, cb)&#123;</span><br><span class="line">	imageToCanvas(src, function (canvas)&#123;</span><br><span class="line">		cb(canvasToDataURL(canvas));</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// dataURL转image，这个不需要转，直接给了src就能用</span><br><span class="line">function dataURLToImage(dataurl)&#123;</span><br><span class="line">	var img = new Image();</span><br><span class="line">	img.src = d;</span><br><span class="line">	return img;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Blob</tag>
        <tag>File</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p>hello world!!</p>
]]></content>
  </entry>
</search>
